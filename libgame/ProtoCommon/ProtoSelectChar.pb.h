// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSelectChar.proto

#ifndef PROTOBUF_ProtoSelectChar_2eproto__INCLUDED
#define PROTOBUF_ProtoSelectChar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoGameData.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoSelectChar_2eproto();
void protobuf_AssignDesc_ProtoSelectChar_2eproto();
void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

class SelectCharInfo;
class RequestGetCharList;
class ResponseGetCharList;
class RequestCreateChar;
class ResponseCreateChar;
class RequestDeleteChar;
class ResponseDeleteChar;
class RequestEnterGame;
class ResponseEnterGame;
class RequestLogout;
class ResponseLogout;

enum SelectCharOpCode {
  OP_GET_CHARLIST = 1,
  OP_CREATE_CHAR = 2,
  OP_DELETE_CHAR = 3,
  OP_ENTER_GAME = 4,
  OP_LOGOUT = 5
};
bool SelectCharOpCode_IsValid(int value);
const SelectCharOpCode SelectCharOpCode_MIN = OP_GET_CHARLIST;
const SelectCharOpCode SelectCharOpCode_MAX = OP_LOGOUT;
const int SelectCharOpCode_ARRAYSIZE = SelectCharOpCode_MAX + 1;

enum CreateCharError {
  CREATE_CHAR_ERROR_SUCCESS = 0,
  CREATE_CHAR_ERROR_ALREADY_EXIST = 1,
  CREATE_CHAR_ERROR_FORBIDNAME = 2
};
bool CreateCharError_IsValid(int value);
const CreateCharError CreateCharError_MIN = CREATE_CHAR_ERROR_SUCCESS;
const CreateCharError CreateCharError_MAX = CREATE_CHAR_ERROR_FORBIDNAME;
const int CreateCharError_ARRAYSIZE = CreateCharError_MAX + 1;

enum EnterGameError {
  ENTER_GAME_ERROR_SUCCESS = 0,
  ENTER_GAME_ERROR_GAME_CLOSED = 1
};
bool EnterGameError_IsValid(int value);
const EnterGameError EnterGameError_MIN = ENTER_GAME_ERROR_SUCCESS;
const EnterGameError EnterGameError_MAX = ENTER_GAME_ERROR_GAME_CLOSED;
const int EnterGameError_ARRAYSIZE = EnterGameError_MAX + 1;

enum LogoutType {
  LOGOUT_SELECT_CHAR = 0,
  LOGOUT_LOGIN = 1
};
bool LogoutType_IsValid(int value);
const LogoutType LogoutType_MIN = LOGOUT_SELECT_CHAR;
const LogoutType LogoutType_MAX = LOGOUT_LOGIN;
const int LogoutType_ARRAYSIZE = LogoutType_MAX + 1;

// ===================================================================

class SelectCharInfo : public ::google::protobuf::MessageLite {
 public:
  SelectCharInfo();
  virtual ~SelectCharInfo();

  SelectCharInfo(const SelectCharInfo& from);

  inline SelectCharInfo& operator=(const SelectCharInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SelectCharInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SelectCharInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SelectCharInfo* other);

  // implements Message ----------------------------------------------

  SelectCharInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SelectCharInfo& from);
  void MergeFrom(const SelectCharInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional int32 race = 2;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 2;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional string charname = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 country = 5;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 5;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.SelectCharInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::int32 charid_;
  ::google::protobuf::int32 race_;
  ::std::string* charname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static SelectCharInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestGetCharList : public ::google::protobuf::MessageLite {
 public:
  RequestGetCharList();
  virtual ~RequestGetCharList();

  RequestGetCharList(const RequestGetCharList& from);

  inline RequestGetCharList& operator=(const RequestGetCharList& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestGetCharList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestGetCharList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestGetCharList* other);

  // implements Message ----------------------------------------------

  RequestGetCharList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestGetCharList& from);
  void MergeFrom(const RequestGetCharList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 login_key = 3;
  inline bool has_login_key() const;
  inline void clear_login_key();
  static const int kLoginKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 login_key() const;
  inline void set_login_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestGetCharList)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_login_key();
  inline void clear_has_login_key();

  ::std::string* account_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::uint32 login_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static RequestGetCharList* default_instance_;
};
// -------------------------------------------------------------------

class ResponseGetCharList : public ::google::protobuf::MessageLite {
 public:
  ResponseGetCharList();
  virtual ~ResponseGetCharList();

  ResponseGetCharList(const ResponseGetCharList& from);

  inline ResponseGetCharList& operator=(const ResponseGetCharList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseGetCharList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseGetCharList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseGetCharList* other);

  // implements Message ----------------------------------------------

  ResponseGetCharList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseGetCharList& from);
  void MergeFrom(const ResponseGetCharList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .Protocol.SelectCharInfo char_list = 2;
  inline int char_list_size() const;
  inline void clear_char_list();
  static const int kCharListFieldNumber = 2;
  inline const ::Protocol::SelectCharInfo& char_list(int index) const;
  inline ::Protocol::SelectCharInfo* mutable_char_list(int index);
  inline ::Protocol::SelectCharInfo* add_char_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::SelectCharInfo >&
      char_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::SelectCharInfo >*
      mutable_char_list();

  // @@protoc_insertion_point(class_scope:Protocol.ResponseGetCharList)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::RepeatedPtrField< ::Protocol::SelectCharInfo > char_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static ResponseGetCharList* default_instance_;
};
// -------------------------------------------------------------------

class RequestCreateChar : public ::google::protobuf::MessageLite {
 public:
  RequestCreateChar();
  virtual ~RequestCreateChar();

  RequestCreateChar(const RequestCreateChar& from);

  inline RequestCreateChar& operator=(const RequestCreateChar& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestCreateChar& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestCreateChar* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestCreateChar* other);

  // implements Message ----------------------------------------------

  RequestCreateChar* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestCreateChar& from);
  void MergeFrom(const RequestCreateChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string charname = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 race = 2;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 2;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestCreateChar)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_country();
  inline void clear_has_country();

  ::std::string* charname_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static RequestCreateChar* default_instance_;
};
// -------------------------------------------------------------------

class ResponseCreateChar : public ::google::protobuf::MessageLite {
 public:
  ResponseCreateChar();
  virtual ~ResponseCreateChar();

  ResponseCreateChar(const ResponseCreateChar& from);

  inline ResponseCreateChar& operator=(const ResponseCreateChar& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseCreateChar& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseCreateChar* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseCreateChar* other);

  // implements Message ----------------------------------------------

  ResponseCreateChar* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseCreateChar& from);
  void MergeFrom(const ResponseCreateChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.CreateCharError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Protocol::CreateCharError result() const;
  inline void set_result(::Protocol::CreateCharError value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseCreateChar)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();

  int result_;
  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static ResponseCreateChar* default_instance_;
};
// -------------------------------------------------------------------

class RequestDeleteChar : public ::google::protobuf::MessageLite {
 public:
  RequestDeleteChar();
  virtual ~RequestDeleteChar();

  RequestDeleteChar(const RequestDeleteChar& from);

  inline RequestDeleteChar& operator=(const RequestDeleteChar& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestDeleteChar& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestDeleteChar* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestDeleteChar* other);

  // implements Message ----------------------------------------------

  RequestDeleteChar* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestDeleteChar& from);
  void MergeFrom(const RequestDeleteChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestDeleteChar)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static RequestDeleteChar* default_instance_;
};
// -------------------------------------------------------------------

class ResponseDeleteChar : public ::google::protobuf::MessageLite {
 public:
  ResponseDeleteChar();
  virtual ~ResponseDeleteChar();

  ResponseDeleteChar(const ResponseDeleteChar& from);

  inline ResponseDeleteChar& operator=(const ResponseDeleteChar& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseDeleteChar& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseDeleteChar* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseDeleteChar* other);

  // implements Message ----------------------------------------------

  ResponseDeleteChar* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseDeleteChar& from);
  void MergeFrom(const ResponseDeleteChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseDeleteChar)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static ResponseDeleteChar* default_instance_;
};
// -------------------------------------------------------------------

class RequestEnterGame : public ::google::protobuf::MessageLite {
 public:
  RequestEnterGame();
  virtual ~RequestEnterGame();

  RequestEnterGame(const RequestEnterGame& from);

  inline RequestEnterGame& operator=(const RequestEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestEnterGame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestEnterGame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestEnterGame* other);

  // implements Message ----------------------------------------------

  RequestEnterGame* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestEnterGame& from);
  void MergeFrom(const RequestEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestEnterGame)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static RequestEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEnterGame : public ::google::protobuf::MessageLite {
 public:
  ResponseEnterGame();
  virtual ~ResponseEnterGame();

  ResponseEnterGame(const ResponseEnterGame& from);

  inline ResponseEnterGame& operator=(const ResponseEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseEnterGame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseEnterGame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseEnterGame* other);

  // implements Message ----------------------------------------------

  ResponseEnterGame* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseEnterGame& from);
  void MergeFrom(const ResponseEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.EnterGameError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Protocol::EnterGameError result() const;
  inline void set_result(::Protocol::EnterGameError value);

  // optional .CharBase charbase = 2;
  inline bool has_charbase() const;
  inline void clear_charbase();
  static const int kCharbaseFieldNumber = 2;
  inline const ::CharBase& charbase() const;
  inline ::CharBase* mutable_charbase();
  inline ::CharBase* release_charbase();
  inline void set_allocated_charbase(::CharBase* charbase);

  // optional .CharBinaryData bindata = 3;
  inline bool has_bindata() const;
  inline void clear_bindata();
  static const int kBindataFieldNumber = 3;
  inline const ::CharBinaryData& bindata() const;
  inline ::CharBinaryData* mutable_bindata();
  inline ::CharBinaryData* release_bindata();
  inline void set_allocated_bindata(::CharBinaryData* bindata);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseEnterGame)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charbase();
  inline void clear_has_charbase();
  inline void set_has_bindata();
  inline void clear_has_bindata();

  ::CharBase* charbase_;
  ::CharBinaryData* bindata_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static ResponseEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class RequestLogout : public ::google::protobuf::MessageLite {
 public:
  RequestLogout();
  virtual ~RequestLogout();

  RequestLogout(const RequestLogout& from);

  inline RequestLogout& operator=(const RequestLogout& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestLogout& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestLogout* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestLogout* other);

  // implements Message ----------------------------------------------

  RequestLogout* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestLogout& from);
  void MergeFrom(const RequestLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.LogoutType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Protocol::LogoutType type() const;
  inline void set_type(::Protocol::LogoutType value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestLogout)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static RequestLogout* default_instance_;
};
// -------------------------------------------------------------------

class ResponseLogout : public ::google::protobuf::MessageLite {
 public:
  ResponseLogout();
  virtual ~ResponseLogout();

  ResponseLogout(const ResponseLogout& from);

  inline ResponseLogout& operator=(const ResponseLogout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseLogout& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseLogout* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseLogout* other);

  // implements Message ----------------------------------------------

  ResponseLogout* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseLogout& from);
  void MergeFrom(const ResponseLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .Protocol.LogoutType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Protocol::LogoutType type() const;
  inline void set_type(::Protocol::LogoutType value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseLogout)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::int32 result_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSelectChar_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSelectChar_2eproto();
  friend void protobuf_ShutdownFile_ProtoSelectChar_2eproto();

  void InitAsDefaultInstance();
  static ResponseLogout* default_instance_;
};
// ===================================================================


// ===================================================================

// SelectCharInfo

// optional int32 charid = 1;
inline bool SelectCharInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectCharInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectCharInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectCharInfo::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 SelectCharInfo::charid() const {
  return charid_;
}
inline void SelectCharInfo::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 race = 2;
inline bool SelectCharInfo::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectCharInfo::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectCharInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectCharInfo::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 SelectCharInfo::race() const {
  return race_;
}
inline void SelectCharInfo::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional string charname = 3;
inline bool SelectCharInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectCharInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectCharInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectCharInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& SelectCharInfo::charname() const {
  return *charname_;
}
inline void SelectCharInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SelectCharInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SelectCharInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SelectCharInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* SelectCharInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SelectCharInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool SelectCharInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectCharInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectCharInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectCharInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SelectCharInfo::level() const {
  return level_;
}
inline void SelectCharInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 country = 5;
inline bool SelectCharInfo::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelectCharInfo::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelectCharInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelectCharInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 SelectCharInfo::country() const {
  return country_;
}
inline void SelectCharInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// -------------------------------------------------------------------

// RequestGetCharList

// optional int32 version = 1;
inline bool RequestGetCharList::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestGetCharList::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestGetCharList::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestGetCharList::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 RequestGetCharList::version() const {
  return version_;
}
inline void RequestGetCharList::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string account = 2;
inline bool RequestGetCharList::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestGetCharList::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestGetCharList::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestGetCharList::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestGetCharList::account() const {
  return *account_;
}
inline void RequestGetCharList::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestGetCharList::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestGetCharList::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestGetCharList::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RequestGetCharList::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestGetCharList::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 login_key = 3;
inline bool RequestGetCharList::has_login_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestGetCharList::set_has_login_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestGetCharList::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestGetCharList::clear_login_key() {
  login_key_ = 0u;
  clear_has_login_key();
}
inline ::google::protobuf::uint32 RequestGetCharList::login_key() const {
  return login_key_;
}
inline void RequestGetCharList::set_login_key(::google::protobuf::uint32 value) {
  set_has_login_key();
  login_key_ = value;
}

// -------------------------------------------------------------------

// ResponseGetCharList

// optional int32 result = 1;
inline bool ResponseGetCharList::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseGetCharList::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseGetCharList::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseGetCharList::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ResponseGetCharList::result() const {
  return result_;
}
inline void ResponseGetCharList::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .Protocol.SelectCharInfo char_list = 2;
inline int ResponseGetCharList::char_list_size() const {
  return char_list_.size();
}
inline void ResponseGetCharList::clear_char_list() {
  char_list_.Clear();
}
inline const ::Protocol::SelectCharInfo& ResponseGetCharList::char_list(int index) const {
  return char_list_.Get(index);
}
inline ::Protocol::SelectCharInfo* ResponseGetCharList::mutable_char_list(int index) {
  return char_list_.Mutable(index);
}
inline ::Protocol::SelectCharInfo* ResponseGetCharList::add_char_list() {
  return char_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::SelectCharInfo >&
ResponseGetCharList::char_list() const {
  return char_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::SelectCharInfo >*
ResponseGetCharList::mutable_char_list() {
  return &char_list_;
}

// -------------------------------------------------------------------

// RequestCreateChar

// optional string charname = 1;
inline bool RequestCreateChar::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestCreateChar::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestCreateChar::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestCreateChar::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& RequestCreateChar::charname() const {
  return *charname_;
}
inline void RequestCreateChar::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void RequestCreateChar::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void RequestCreateChar::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestCreateChar::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* RequestCreateChar::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestCreateChar::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 race = 2;
inline bool RequestCreateChar::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestCreateChar::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestCreateChar::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestCreateChar::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 RequestCreateChar::race() const {
  return race_;
}
inline void RequestCreateChar::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 country = 3;
inline bool RequestCreateChar::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestCreateChar::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestCreateChar::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestCreateChar::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 RequestCreateChar::country() const {
  return country_;
}
inline void RequestCreateChar::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// -------------------------------------------------------------------

// ResponseCreateChar

// optional .Protocol.CreateCharError result = 1;
inline bool ResponseCreateChar::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseCreateChar::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseCreateChar::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseCreateChar::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Protocol::CreateCharError ResponseCreateChar::result() const {
  return static_cast< ::Protocol::CreateCharError >(result_);
}
inline void ResponseCreateChar::set_result(::Protocol::CreateCharError value) {
  assert(::Protocol::CreateCharError_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 charid = 2;
inline bool ResponseCreateChar::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseCreateChar::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseCreateChar::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseCreateChar::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 ResponseCreateChar::charid() const {
  return charid_;
}
inline void ResponseCreateChar::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// RequestDeleteChar

// optional int32 charid = 1;
inline bool RequestDeleteChar::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestDeleteChar::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestDeleteChar::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestDeleteChar::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 RequestDeleteChar::charid() const {
  return charid_;
}
inline void RequestDeleteChar::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// ResponseDeleteChar

// optional int32 result = 1;
inline bool ResponseDeleteChar::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseDeleteChar::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseDeleteChar::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseDeleteChar::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ResponseDeleteChar::result() const {
  return result_;
}
inline void ResponseDeleteChar::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// RequestEnterGame

// optional int32 charid = 1;
inline bool RequestEnterGame::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestEnterGame::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestEnterGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestEnterGame::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 RequestEnterGame::charid() const {
  return charid_;
}
inline void RequestEnterGame::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// ResponseEnterGame

// optional .Protocol.EnterGameError result = 1;
inline bool ResponseEnterGame::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseEnterGame::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseEnterGame::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseEnterGame::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Protocol::EnterGameError ResponseEnterGame::result() const {
  return static_cast< ::Protocol::EnterGameError >(result_);
}
inline void ResponseEnterGame::set_result(::Protocol::EnterGameError value) {
  assert(::Protocol::EnterGameError_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .CharBase charbase = 2;
inline bool ResponseEnterGame::has_charbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseEnterGame::set_has_charbase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseEnterGame::clear_has_charbase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseEnterGame::clear_charbase() {
  if (charbase_ != NULL) charbase_->::CharBase::Clear();
  clear_has_charbase();
}
inline const ::CharBase& ResponseEnterGame::charbase() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return charbase_ != NULL ? *charbase_ : *default_instance().charbase_;
#else
  return charbase_ != NULL ? *charbase_ : *default_instance_->charbase_;
#endif
}
inline ::CharBase* ResponseEnterGame::mutable_charbase() {
  set_has_charbase();
  if (charbase_ == NULL) charbase_ = new ::CharBase;
  return charbase_;
}
inline ::CharBase* ResponseEnterGame::release_charbase() {
  clear_has_charbase();
  ::CharBase* temp = charbase_;
  charbase_ = NULL;
  return temp;
}
inline void ResponseEnterGame::set_allocated_charbase(::CharBase* charbase) {
  delete charbase_;
  charbase_ = charbase;
  if (charbase) {
    set_has_charbase();
  } else {
    clear_has_charbase();
  }
}

// optional .CharBinaryData bindata = 3;
inline bool ResponseEnterGame::has_bindata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseEnterGame::set_has_bindata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseEnterGame::clear_has_bindata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseEnterGame::clear_bindata() {
  if (bindata_ != NULL) bindata_->::CharBinaryData::Clear();
  clear_has_bindata();
}
inline const ::CharBinaryData& ResponseEnterGame::bindata() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bindata_ != NULL ? *bindata_ : *default_instance().bindata_;
#else
  return bindata_ != NULL ? *bindata_ : *default_instance_->bindata_;
#endif
}
inline ::CharBinaryData* ResponseEnterGame::mutable_bindata() {
  set_has_bindata();
  if (bindata_ == NULL) bindata_ = new ::CharBinaryData;
  return bindata_;
}
inline ::CharBinaryData* ResponseEnterGame::release_bindata() {
  clear_has_bindata();
  ::CharBinaryData* temp = bindata_;
  bindata_ = NULL;
  return temp;
}
inline void ResponseEnterGame::set_allocated_bindata(::CharBinaryData* bindata) {
  delete bindata_;
  bindata_ = bindata;
  if (bindata) {
    set_has_bindata();
  } else {
    clear_has_bindata();
  }
}

// -------------------------------------------------------------------

// RequestLogout

// optional .Protocol.LogoutType type = 1;
inline bool RequestLogout::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestLogout::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestLogout::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestLogout::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Protocol::LogoutType RequestLogout::type() const {
  return static_cast< ::Protocol::LogoutType >(type_);
}
inline void RequestLogout::set_type(::Protocol::LogoutType value) {
  assert(::Protocol::LogoutType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ResponseLogout

// optional int32 result = 1;
inline bool ResponseLogout::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLogout::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLogout::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLogout::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ResponseLogout::result() const {
  return result_;
}
inline void ResponseLogout::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .Protocol.LogoutType type = 2;
inline bool ResponseLogout::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLogout::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLogout::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLogout::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Protocol::LogoutType ResponseLogout::type() const {
  return static_cast< ::Protocol::LogoutType >(type_);
}
inline void ResponseLogout::set_type(::Protocol::LogoutType value) {
  assert(::Protocol::LogoutType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoSelectChar_2eproto__INCLUDED
