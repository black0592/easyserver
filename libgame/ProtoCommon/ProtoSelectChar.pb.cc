// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSelectChar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoSelectChar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoSelectChar_2eproto() {
  delete SelectCharInfo::default_instance_;
  delete RequestGetCharList::default_instance_;
  delete ResponseGetCharList::default_instance_;
  delete RequestCreateChar::default_instance_;
  delete ResponseCreateChar::default_instance_;
  delete RequestDeleteChar::default_instance_;
  delete ResponseDeleteChar::default_instance_;
  delete RequestEnterGame::default_instance_;
  delete ResponseEnterGame::default_instance_;
  delete RequestLogout::default_instance_;
  delete ResponseLogout::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoSelectChar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoSelectChar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  SelectCharInfo::default_instance_ = new SelectCharInfo();
  RequestGetCharList::default_instance_ = new RequestGetCharList();
  ResponseGetCharList::default_instance_ = new ResponseGetCharList();
  RequestCreateChar::default_instance_ = new RequestCreateChar();
  ResponseCreateChar::default_instance_ = new ResponseCreateChar();
  RequestDeleteChar::default_instance_ = new RequestDeleteChar();
  ResponseDeleteChar::default_instance_ = new ResponseDeleteChar();
  RequestEnterGame::default_instance_ = new RequestEnterGame();
  ResponseEnterGame::default_instance_ = new ResponseEnterGame();
  RequestLogout::default_instance_ = new RequestLogout();
  ResponseLogout::default_instance_ = new ResponseLogout();
  SelectCharInfo::default_instance_->InitAsDefaultInstance();
  RequestGetCharList::default_instance_->InitAsDefaultInstance();
  ResponseGetCharList::default_instance_->InitAsDefaultInstance();
  RequestCreateChar::default_instance_->InitAsDefaultInstance();
  ResponseCreateChar::default_instance_->InitAsDefaultInstance();
  RequestDeleteChar::default_instance_->InitAsDefaultInstance();
  ResponseDeleteChar::default_instance_->InitAsDefaultInstance();
  RequestEnterGame::default_instance_->InitAsDefaultInstance();
  ResponseEnterGame::default_instance_->InitAsDefaultInstance();
  RequestLogout::default_instance_->InitAsDefaultInstance();
  ResponseLogout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoSelectChar_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoSelectChar_2eproto_once_);
void protobuf_AddDesc_ProtoSelectChar_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoSelectChar_2eproto_once_,
                 &protobuf_AddDesc_ProtoSelectChar_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoSelectChar_2eproto {
  StaticDescriptorInitializer_ProtoSelectChar_2eproto() {
    protobuf_AddDesc_ProtoSelectChar_2eproto();
  }
} static_descriptor_initializer_ProtoSelectChar_2eproto_;
#endif
bool SelectCharOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool CreateCharError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool EnterGameError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool LogoutType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SelectCharInfo::kCharidFieldNumber;
const int SelectCharInfo::kRaceFieldNumber;
const int SelectCharInfo::kCharnameFieldNumber;
const int SelectCharInfo::kLevelFieldNumber;
const int SelectCharInfo::kCountryFieldNumber;
#endif  // !_MSC_VER

SelectCharInfo::SelectCharInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SelectCharInfo::InitAsDefaultInstance() {
}

SelectCharInfo::SelectCharInfo(const SelectCharInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SelectCharInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  race_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectCharInfo::~SelectCharInfo() {
  SharedDtor();
}

void SelectCharInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SelectCharInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SelectCharInfo& SelectCharInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

SelectCharInfo* SelectCharInfo::default_instance_ = NULL;

SelectCharInfo* SelectCharInfo::New() const {
  return new SelectCharInfo;
}

void SelectCharInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    race_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    level_ = 0;
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SelectCharInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race;
        break;
      }

      // optional int32 race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country;
        break;
      }

      // optional int32 country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectCharInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional int32 race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->race(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 country = 5;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->country(), output);
  }

}

int SelectCharInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional int32 race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectCharInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SelectCharInfo*>(&from));
}

void SelectCharInfo::MergeFrom(const SelectCharInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
}

void SelectCharInfo::CopyFrom(const SelectCharInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCharInfo::IsInitialized() const {

  return true;
}

void SelectCharInfo::Swap(SelectCharInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(race_, other->race_);
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SelectCharInfo::GetTypeName() const {
  return "Protocol.SelectCharInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetCharList::kVersionFieldNumber;
const int RequestGetCharList::kAccountFieldNumber;
const int RequestGetCharList::kLoginKeyFieldNumber;
#endif  // !_MSC_VER

RequestGetCharList::RequestGetCharList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetCharList::InitAsDefaultInstance() {
}

RequestGetCharList::RequestGetCharList(const RequestGetCharList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetCharList::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetCharList::~RequestGetCharList() {
  SharedDtor();
}

void RequestGetCharList::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetCharList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetCharList& RequestGetCharList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

RequestGetCharList* RequestGetCharList::default_instance_ = NULL;

RequestGetCharList* RequestGetCharList::New() const {
  return new RequestGetCharList;
}

void RequestGetCharList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    login_key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetCharList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_key;
        break;
      }

      // optional uint32 login_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_key_)));
          set_has_login_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetCharList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 login_key = 3;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->login_key(), output);
  }

}

int RequestGetCharList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 login_key = 3;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetCharList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetCharList*>(&from));
}

void RequestGetCharList::MergeFrom(const RequestGetCharList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
  }
}

void RequestGetCharList::CopyFrom(const RequestGetCharList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetCharList::IsInitialized() const {

  return true;
}

void RequestGetCharList::Swap(RequestGetCharList* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(account_, other->account_);
    std::swap(login_key_, other->login_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetCharList::GetTypeName() const {
  return "Protocol.RequestGetCharList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetCharList::kResultFieldNumber;
const int ResponseGetCharList::kCharListFieldNumber;
#endif  // !_MSC_VER

ResponseGetCharList::ResponseGetCharList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetCharList::InitAsDefaultInstance() {
}

ResponseGetCharList::ResponseGetCharList(const ResponseGetCharList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetCharList::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetCharList::~ResponseGetCharList() {
  SharedDtor();
}

void ResponseGetCharList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetCharList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetCharList& ResponseGetCharList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

ResponseGetCharList* ResponseGetCharList::default_instance_ = NULL;

ResponseGetCharList* ResponseGetCharList::New() const {
  return new ResponseGetCharList;
}

void ResponseGetCharList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  char_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetCharList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_list;
        break;
      }

      // repeated .Protocol.SelectCharInfo char_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_char_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetCharList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .Protocol.SelectCharInfo char_list = 2;
  for (int i = 0; i < this->char_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->char_list(i), output);
  }

}

int ResponseGetCharList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .Protocol.SelectCharInfo char_list = 2;
  total_size += 1 * this->char_list_size();
  for (int i = 0; i < this->char_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetCharList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetCharList*>(&from));
}

void ResponseGetCharList::MergeFrom(const ResponseGetCharList& from) {
  GOOGLE_CHECK_NE(&from, this);
  char_list_.MergeFrom(from.char_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseGetCharList::CopyFrom(const ResponseGetCharList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetCharList::IsInitialized() const {

  return true;
}

void ResponseGetCharList::Swap(ResponseGetCharList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    char_list_.Swap(&other->char_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetCharList::GetTypeName() const {
  return "Protocol.ResponseGetCharList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateChar::kCharnameFieldNumber;
const int RequestCreateChar::kRaceFieldNumber;
const int RequestCreateChar::kCountryFieldNumber;
#endif  // !_MSC_VER

RequestCreateChar::RequestCreateChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestCreateChar::InitAsDefaultInstance() {
}

RequestCreateChar::RequestCreateChar(const RequestCreateChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCreateChar::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateChar::~RequestCreateChar() {
  SharedDtor();
}

void RequestCreateChar::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateChar& RequestCreateChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

RequestCreateChar* RequestCreateChar::default_instance_ = NULL;

RequestCreateChar* RequestCreateChar::New() const {
  return new RequestCreateChar;
}

void RequestCreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    race_ = 0;
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestCreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race;
        break;
      }

      // optional int32 race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional int32 country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int32 race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->race(), output);
  }

  // optional int32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->country(), output);
  }

}

int RequestCreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateChar*>(&from));
}

void RequestCreateChar::MergeFrom(const RequestCreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
}

void RequestCreateChar::CopyFrom(const RequestCreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateChar::IsInitialized() const {

  return true;
}

void RequestCreateChar::Swap(RequestCreateChar* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(race_, other->race_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateChar::GetTypeName() const {
  return "Protocol.RequestCreateChar";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCreateChar::kResultFieldNumber;
const int ResponseCreateChar::kCharidFieldNumber;
#endif  // !_MSC_VER

ResponseCreateChar::ResponseCreateChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseCreateChar::InitAsDefaultInstance() {
}

ResponseCreateChar::ResponseCreateChar(const ResponseCreateChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCreateChar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCreateChar::~ResponseCreateChar() {
  SharedDtor();
}

void ResponseCreateChar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseCreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseCreateChar& ResponseCreateChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

ResponseCreateChar* ResponseCreateChar::default_instance_ = NULL;

ResponseCreateChar* ResponseCreateChar::New() const {
  return new ResponseCreateChar;
}

void ResponseCreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseCreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.CreateCharError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::CreateCharError_IsValid(value)) {
            set_result(static_cast< ::Protocol::CreateCharError >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.CreateCharError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

}

int ResponseCreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.CreateCharError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCreateChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCreateChar*>(&from));
}

void ResponseCreateChar::MergeFrom(const ResponseCreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void ResponseCreateChar::CopyFrom(const ResponseCreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateChar::IsInitialized() const {

  return true;
}

void ResponseCreateChar::Swap(ResponseCreateChar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseCreateChar::GetTypeName() const {
  return "Protocol.ResponseCreateChar";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDeleteChar::kCharidFieldNumber;
#endif  // !_MSC_VER

RequestDeleteChar::RequestDeleteChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestDeleteChar::InitAsDefaultInstance() {
}

RequestDeleteChar::RequestDeleteChar(const RequestDeleteChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestDeleteChar::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDeleteChar::~RequestDeleteChar() {
  SharedDtor();
}

void RequestDeleteChar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestDeleteChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestDeleteChar& RequestDeleteChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

RequestDeleteChar* RequestDeleteChar::default_instance_ = NULL;

RequestDeleteChar* RequestDeleteChar::New() const {
  return new RequestDeleteChar;
}

void RequestDeleteChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestDeleteChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestDeleteChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int RequestDeleteChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDeleteChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestDeleteChar*>(&from));
}

void RequestDeleteChar::MergeFrom(const RequestDeleteChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void RequestDeleteChar::CopyFrom(const RequestDeleteChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeleteChar::IsInitialized() const {

  return true;
}

void RequestDeleteChar::Swap(RequestDeleteChar* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestDeleteChar::GetTypeName() const {
  return "Protocol.RequestDeleteChar";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseDeleteChar::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseDeleteChar::ResponseDeleteChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseDeleteChar::InitAsDefaultInstance() {
}

ResponseDeleteChar::ResponseDeleteChar(const ResponseDeleteChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseDeleteChar::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDeleteChar::~ResponseDeleteChar() {
  SharedDtor();
}

void ResponseDeleteChar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseDeleteChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseDeleteChar& ResponseDeleteChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

ResponseDeleteChar* ResponseDeleteChar::default_instance_ = NULL;

ResponseDeleteChar* ResponseDeleteChar::New() const {
  return new ResponseDeleteChar;
}

void ResponseDeleteChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseDeleteChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseDeleteChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseDeleteChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDeleteChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseDeleteChar*>(&from));
}

void ResponseDeleteChar::MergeFrom(const ResponseDeleteChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseDeleteChar::CopyFrom(const ResponseDeleteChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeleteChar::IsInitialized() const {

  return true;
}

void ResponseDeleteChar::Swap(ResponseDeleteChar* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseDeleteChar::GetTypeName() const {
  return "Protocol.ResponseDeleteChar";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestEnterGame::kCharidFieldNumber;
#endif  // !_MSC_VER

RequestEnterGame::RequestEnterGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestEnterGame::InitAsDefaultInstance() {
}

RequestEnterGame::RequestEnterGame(const RequestEnterGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestEnterGame::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEnterGame::~RequestEnterGame() {
  SharedDtor();
}

void RequestEnterGame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestEnterGame& RequestEnterGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

RequestEnterGame* RequestEnterGame::default_instance_ = NULL;

RequestEnterGame* RequestEnterGame::New() const {
  return new RequestEnterGame;
}

void RequestEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int RequestEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnterGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestEnterGame*>(&from));
}

void RequestEnterGame::MergeFrom(const RequestEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void RequestEnterGame::CopyFrom(const RequestEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnterGame::IsInitialized() const {

  return true;
}

void RequestEnterGame::Swap(RequestEnterGame* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestEnterGame::GetTypeName() const {
  return "Protocol.RequestEnterGame";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseEnterGame::kResultFieldNumber;
const int ResponseEnterGame::kCharbaseFieldNumber;
const int ResponseEnterGame::kBindataFieldNumber;
#endif  // !_MSC_VER

ResponseEnterGame::ResponseEnterGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseEnterGame::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  charbase_ = const_cast< ::CharBase*>(
      ::CharBase::internal_default_instance());
#else
  charbase_ = const_cast< ::CharBase*>(&::CharBase::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bindata_ = const_cast< ::CharBinaryData*>(
      ::CharBinaryData::internal_default_instance());
#else
  bindata_ = const_cast< ::CharBinaryData*>(&::CharBinaryData::default_instance());
#endif
}

ResponseEnterGame::ResponseEnterGame(const ResponseEnterGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseEnterGame::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charbase_ = NULL;
  bindata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseEnterGame::~ResponseEnterGame() {
  SharedDtor();
}

void ResponseEnterGame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete charbase_;
    delete bindata_;
  }
}

void ResponseEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseEnterGame& ResponseEnterGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

ResponseEnterGame* ResponseEnterGame::default_instance_ = NULL;

ResponseEnterGame* ResponseEnterGame::New() const {
  return new ResponseEnterGame;
}

void ResponseEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_charbase()) {
      if (charbase_ != NULL) charbase_->::CharBase::Clear();
    }
    if (has_bindata()) {
      if (bindata_ != NULL) bindata_->::CharBinaryData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.EnterGameError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::EnterGameError_IsValid(value)) {
            set_result(static_cast< ::Protocol::EnterGameError >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charbase;
        break;
      }

      // optional .CharBase charbase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bindata;
        break;
      }

      // optional .CharBinaryData bindata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.EnterGameError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .CharBase charbase = 2;
  if (has_charbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->charbase(), output);
  }

  // optional .CharBinaryData bindata = 3;
  if (has_bindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bindata(), output);
  }

}

int ResponseEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.EnterGameError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .CharBase charbase = 2;
    if (has_charbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charbase());
    }

    // optional .CharBinaryData bindata = 3;
    if (has_bindata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEnterGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseEnterGame*>(&from));
}

void ResponseEnterGame::MergeFrom(const ResponseEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charbase()) {
      mutable_charbase()->::CharBase::MergeFrom(from.charbase());
    }
    if (from.has_bindata()) {
      mutable_bindata()->::CharBinaryData::MergeFrom(from.bindata());
    }
  }
}

void ResponseEnterGame::CopyFrom(const ResponseEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEnterGame::IsInitialized() const {

  return true;
}

void ResponseEnterGame::Swap(ResponseEnterGame* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charbase_, other->charbase_);
    std::swap(bindata_, other->bindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseEnterGame::GetTypeName() const {
  return "Protocol.ResponseEnterGame";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLogout::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestLogout::RequestLogout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestLogout::InitAsDefaultInstance() {
}

RequestLogout::RequestLogout(const RequestLogout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLogout::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLogout::~RequestLogout() {
  SharedDtor();
}

void RequestLogout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestLogout& RequestLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

RequestLogout* RequestLogout::default_instance_ = NULL;

RequestLogout* RequestLogout::New() const {
  return new RequestLogout;
}

void RequestLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.LogoutType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::LogoutType_IsValid(value)) {
            set_type(static_cast< ::Protocol::LogoutType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.LogoutType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

}

int RequestLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.LogoutType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLogout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestLogout*>(&from));
}

void RequestLogout::MergeFrom(const RequestLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void RequestLogout::CopyFrom(const RequestLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLogout::IsInitialized() const {

  return true;
}

void RequestLogout::Swap(RequestLogout* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestLogout::GetTypeName() const {
  return "Protocol.RequestLogout";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLogout::kResultFieldNumber;
const int ResponseLogout::kTypeFieldNumber;
#endif  // !_MSC_VER

ResponseLogout::ResponseLogout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseLogout::InitAsDefaultInstance() {
}

ResponseLogout::ResponseLogout(const ResponseLogout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLogout::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLogout::~ResponseLogout() {
  SharedDtor();
}

void ResponseLogout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseLogout& ResponseLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoSelectChar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSelectChar_2eproto();
#endif
  return *default_instance_;
}

ResponseLogout* ResponseLogout::default_instance_ = NULL;

ResponseLogout* ResponseLogout::New() const {
  return new ResponseLogout;
}

void ResponseLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Protocol.LogoutType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::LogoutType_IsValid(value)) {
            set_type(static_cast< ::Protocol::LogoutType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Protocol.LogoutType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

}

int ResponseLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Protocol.LogoutType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLogout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseLogout*>(&from));
}

void ResponseLogout::MergeFrom(const ResponseLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ResponseLogout::CopyFrom(const ResponseLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLogout::IsInitialized() const {

  return true;
}

void ResponseLogout::Swap(ResponseLogout* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseLogout::GetTypeName() const {
  return "Protocol.ResponseLogout";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
