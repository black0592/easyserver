// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRelations.proto

#ifndef PROTOBUF_ProtoRelations_2eproto__INCLUDED
#define PROTOBUF_ProtoRelations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoGameData.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoRelations_2eproto();
void protobuf_AssignDesc_ProtoRelations_2eproto();
void protobuf_ShutdownFile_ProtoRelations_2eproto();

class RelationsInfo;
class RequestFriendList;
class ResponseFriendList;
class RequestAddFriend;
class ResponseAddFriend;
class NotifyAddFriendTips;
class RequestRemoveFriend;
class ResponseRemoveFriend;
class RequestEnemyList;
class ResponseEnemyList;
class NotifyAddEnemy;
class RequestRemoveEnemy;
class ResponseRemoveEnemy;
class RequestMarry;
class RequestAskMarry;
class NotifyMarry;
class RequestUnmarry;
class RequestAskUnmarry;
class NotifyUnmarry;

enum RelationsOpCode {
  OP_FRIEND_GET_LIST = 1,
  OP_FRIEND_ADD = 2,
  OP_FRIEND_REMOVE = 3,
  OP_FRIEND_ADD_TIPS = 4,
  OP_ENEMY_GET_LIST = 5,
  OP_ENEMY_ADD = 6,
  OP_ENEMY_REMOVE = 7,
  OP_MARRIAGE_MARRY = 8,
  OP_MARRIAGE_ASK_MARRY = 9,
  OP_MARRIAGE_UNMARRY = 10,
  OP_MARRIAGE_ASK_UNMARRY = 11
};
bool RelationsOpCode_IsValid(int value);
const RelationsOpCode RelationsOpCode_MIN = OP_FRIEND_GET_LIST;
const RelationsOpCode RelationsOpCode_MAX = OP_MARRIAGE_ASK_UNMARRY;
const int RelationsOpCode_ARRAYSIZE = RelationsOpCode_MAX + 1;

// ===================================================================

class RelationsInfo : public ::google::protobuf::MessageLite {
 public:
  RelationsInfo();
  virtual ~RelationsInfo();

  RelationsInfo(const RelationsInfo& from);

  inline RelationsInfo& operator=(const RelationsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const RelationsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RelationsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RelationsInfo* other);

  // implements Message ----------------------------------------------

  RelationsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RelationsInfo& from);
  void MergeFrom(const RelationsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 race = 4;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 4;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 mapid = 6;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 6;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool online = 8;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 8;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.RelationsInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::uint32 time_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RelationsInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestFriendList : public ::google::protobuf::MessageLite {
 public:
  RequestFriendList();
  virtual ~RequestFriendList();

  RequestFriendList(const RequestFriendList& from);

  inline RequestFriendList& operator=(const RequestFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestFriendList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestFriendList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestFriendList* other);

  // implements Message ----------------------------------------------

  RequestFriendList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestFriendList& from);
  void MergeFrom(const RequestFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestFriendList)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();

  ::google::protobuf::int32 reserve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestFriendList* default_instance_;
};
// -------------------------------------------------------------------

class ResponseFriendList : public ::google::protobuf::MessageLite {
 public:
  ResponseFriendList();
  virtual ~ResponseFriendList();

  ResponseFriendList(const ResponseFriendList& from);

  inline ResponseFriendList& operator=(const ResponseFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseFriendList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseFriendList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseFriendList* other);

  // implements Message ----------------------------------------------

  ResponseFriendList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseFriendList& from);
  void MergeFrom(const ResponseFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Protocol.RelationsInfo friend_list = 1;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 1;
  inline const ::Protocol::RelationsInfo& friend_list(int index) const;
  inline ::Protocol::RelationsInfo* mutable_friend_list(int index);
  inline ::Protocol::RelationsInfo* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >*
      mutable_friend_list();

  // @@protoc_insertion_point(class_scope:Protocol.ResponseFriendList)
 private:

  ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo > friend_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static ResponseFriendList* default_instance_;
};
// -------------------------------------------------------------------

class RequestAddFriend : public ::google::protobuf::MessageLite {
 public:
  RequestAddFriend();
  virtual ~RequestAddFriend();

  RequestAddFriend(const RequestAddFriend& from);

  inline RequestAddFriend& operator=(const RequestAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestAddFriend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestAddFriend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestAddFriend* other);

  // implements Message ----------------------------------------------

  RequestAddFriend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestAddFriend& from);
  void MergeFrom(const RequestAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Protocol.RequestAddFriend)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class ResponseAddFriend : public ::google::protobuf::MessageLite {
 public:
  ResponseAddFriend();
  virtual ~ResponseAddFriend();

  ResponseAddFriend(const ResponseAddFriend& from);

  inline ResponseAddFriend& operator=(const ResponseAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseAddFriend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseAddFriend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseAddFriend* other);

  // implements Message ----------------------------------------------

  ResponseAddFriend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseAddFriend& from);
  void MergeFrom(const ResponseAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.RelationsInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Protocol::RelationsInfo& info() const;
  inline ::Protocol::RelationsInfo* mutable_info();
  inline ::Protocol::RelationsInfo* release_info();
  inline void set_allocated_info(::Protocol::RelationsInfo* info);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseAddFriend)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::Protocol::RelationsInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static ResponseAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class NotifyAddFriendTips : public ::google::protobuf::MessageLite {
 public:
  NotifyAddFriendTips();
  virtual ~NotifyAddFriendTips();

  NotifyAddFriendTips(const NotifyAddFriendTips& from);

  inline NotifyAddFriendTips& operator=(const NotifyAddFriendTips& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyAddFriendTips& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyAddFriendTips* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyAddFriendTips* other);

  // implements Message ----------------------------------------------

  NotifyAddFriendTips* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyAddFriendTips& from);
  void MergeFrom(const NotifyAddFriendTips& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyAddFriendTips)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static NotifyAddFriendTips* default_instance_;
};
// -------------------------------------------------------------------

class RequestRemoveFriend : public ::google::protobuf::MessageLite {
 public:
  RequestRemoveFriend();
  virtual ~RequestRemoveFriend();

  RequestRemoveFriend(const RequestRemoveFriend& from);

  inline RequestRemoveFriend& operator=(const RequestRemoveFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestRemoveFriend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestRemoveFriend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestRemoveFriend* other);

  // implements Message ----------------------------------------------

  RequestRemoveFriend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestRemoveFriend& from);
  void MergeFrom(const RequestRemoveFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestRemoveFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestRemoveFriend* default_instance_;
};
// -------------------------------------------------------------------

class ResponseRemoveFriend : public ::google::protobuf::MessageLite {
 public:
  ResponseRemoveFriend();
  virtual ~ResponseRemoveFriend();

  ResponseRemoveFriend(const ResponseRemoveFriend& from);

  inline ResponseRemoveFriend& operator=(const ResponseRemoveFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseRemoveFriend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseRemoveFriend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseRemoveFriend* other);

  // implements Message ----------------------------------------------

  ResponseRemoveFriend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseRemoveFriend& from);
  void MergeFrom(const ResponseRemoveFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseRemoveFriend)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static ResponseRemoveFriend* default_instance_;
};
// -------------------------------------------------------------------

class RequestEnemyList : public ::google::protobuf::MessageLite {
 public:
  RequestEnemyList();
  virtual ~RequestEnemyList();

  RequestEnemyList(const RequestEnemyList& from);

  inline RequestEnemyList& operator=(const RequestEnemyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestEnemyList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestEnemyList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestEnemyList* other);

  // implements Message ----------------------------------------------

  RequestEnemyList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestEnemyList& from);
  void MergeFrom(const RequestEnemyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestEnemyList)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();

  ::google::protobuf::int32 reserve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestEnemyList* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEnemyList : public ::google::protobuf::MessageLite {
 public:
  ResponseEnemyList();
  virtual ~ResponseEnemyList();

  ResponseEnemyList(const ResponseEnemyList& from);

  inline ResponseEnemyList& operator=(const ResponseEnemyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseEnemyList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseEnemyList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseEnemyList* other);

  // implements Message ----------------------------------------------

  ResponseEnemyList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseEnemyList& from);
  void MergeFrom(const ResponseEnemyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Protocol.RelationsInfo enemy_list = 1;
  inline int enemy_list_size() const;
  inline void clear_enemy_list();
  static const int kEnemyListFieldNumber = 1;
  inline const ::Protocol::RelationsInfo& enemy_list(int index) const;
  inline ::Protocol::RelationsInfo* mutable_enemy_list(int index);
  inline ::Protocol::RelationsInfo* add_enemy_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >&
      enemy_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >*
      mutable_enemy_list();

  // @@protoc_insertion_point(class_scope:Protocol.ResponseEnemyList)
 private:

  ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo > enemy_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static ResponseEnemyList* default_instance_;
};
// -------------------------------------------------------------------

class NotifyAddEnemy : public ::google::protobuf::MessageLite {
 public:
  NotifyAddEnemy();
  virtual ~NotifyAddEnemy();

  NotifyAddEnemy(const NotifyAddEnemy& from);

  inline NotifyAddEnemy& operator=(const NotifyAddEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyAddEnemy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyAddEnemy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyAddEnemy* other);

  // implements Message ----------------------------------------------

  NotifyAddEnemy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyAddEnemy& from);
  void MergeFrom(const NotifyAddEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.RelationsInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Protocol::RelationsInfo& info() const;
  inline ::Protocol::RelationsInfo* mutable_info();
  inline ::Protocol::RelationsInfo* release_info();
  inline void set_allocated_info(::Protocol::RelationsInfo* info);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyAddEnemy)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::Protocol::RelationsInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static NotifyAddEnemy* default_instance_;
};
// -------------------------------------------------------------------

class RequestRemoveEnemy : public ::google::protobuf::MessageLite {
 public:
  RequestRemoveEnemy();
  virtual ~RequestRemoveEnemy();

  RequestRemoveEnemy(const RequestRemoveEnemy& from);

  inline RequestRemoveEnemy& operator=(const RequestRemoveEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestRemoveEnemy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestRemoveEnemy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestRemoveEnemy* other);

  // implements Message ----------------------------------------------

  RequestRemoveEnemy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestRemoveEnemy& from);
  void MergeFrom(const RequestRemoveEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestRemoveEnemy)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestRemoveEnemy* default_instance_;
};
// -------------------------------------------------------------------

class ResponseRemoveEnemy : public ::google::protobuf::MessageLite {
 public:
  ResponseRemoveEnemy();
  virtual ~ResponseRemoveEnemy();

  ResponseRemoveEnemy(const ResponseRemoveEnemy& from);

  inline ResponseRemoveEnemy& operator=(const ResponseRemoveEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseRemoveEnemy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseRemoveEnemy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseRemoveEnemy* other);

  // implements Message ----------------------------------------------

  ResponseRemoveEnemy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseRemoveEnemy& from);
  void MergeFrom(const ResponseRemoveEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseRemoveEnemy)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static ResponseRemoveEnemy* default_instance_;
};
// -------------------------------------------------------------------

class RequestMarry : public ::google::protobuf::MessageLite {
 public:
  RequestMarry();
  virtual ~RequestMarry();

  RequestMarry(const RequestMarry& from);

  inline RequestMarry& operator=(const RequestMarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestMarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestMarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestMarry* other);

  // implements Message ----------------------------------------------

  RequestMarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestMarry& from);
  void MergeFrom(const RequestMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestMarry)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestMarry* default_instance_;
};
// -------------------------------------------------------------------

class RequestAskMarry : public ::google::protobuf::MessageLite {
 public:
  RequestAskMarry();
  virtual ~RequestAskMarry();

  RequestAskMarry(const RequestAskMarry& from);

  inline RequestAskMarry& operator=(const RequestAskMarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestAskMarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestAskMarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestAskMarry* other);

  // implements Message ----------------------------------------------

  RequestAskMarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestAskMarry& from);
  void MergeFrom(const RequestAskMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestAskMarry)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();

  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestAskMarry* default_instance_;
};
// -------------------------------------------------------------------

class NotifyMarry : public ::google::protobuf::MessageLite {
 public:
  NotifyMarry();
  virtual ~NotifyMarry();

  NotifyMarry(const NotifyMarry& from);

  inline NotifyMarry& operator=(const NotifyMarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyMarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyMarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyMarry* other);

  // implements Message ----------------------------------------------

  NotifyMarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyMarry& from);
  void MergeFrom(const NotifyMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .Protocol.RelationsInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::Protocol::RelationsInfo& info() const;
  inline ::Protocol::RelationsInfo* mutable_info();
  inline ::Protocol::RelationsInfo* release_info();
  inline void set_allocated_info(::Protocol::RelationsInfo* info);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyMarry)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();

  ::Protocol::RelationsInfo* info_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static NotifyMarry* default_instance_;
};
// -------------------------------------------------------------------

class RequestUnmarry : public ::google::protobuf::MessageLite {
 public:
  RequestUnmarry();
  virtual ~RequestUnmarry();

  RequestUnmarry(const RequestUnmarry& from);

  inline RequestUnmarry& operator=(const RequestUnmarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestUnmarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestUnmarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestUnmarry* other);

  // implements Message ----------------------------------------------

  RequestUnmarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestUnmarry& from);
  void MergeFrom(const RequestUnmarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestUnmarry)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestUnmarry* default_instance_;
};
// -------------------------------------------------------------------

class RequestAskUnmarry : public ::google::protobuf::MessageLite {
 public:
  RequestAskUnmarry();
  virtual ~RequestAskUnmarry();

  RequestAskUnmarry(const RequestAskUnmarry& from);

  inline RequestAskUnmarry& operator=(const RequestAskUnmarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestAskUnmarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestAskUnmarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestAskUnmarry* other);

  // implements Message ----------------------------------------------

  RequestAskUnmarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestAskUnmarry& from);
  void MergeFrom(const RequestAskUnmarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestAskUnmarry)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();

  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static RequestAskUnmarry* default_instance_;
};
// -------------------------------------------------------------------

class NotifyUnmarry : public ::google::protobuf::MessageLite {
 public:
  NotifyUnmarry();
  virtual ~NotifyUnmarry();

  NotifyUnmarry(const NotifyUnmarry& from);

  inline NotifyUnmarry& operator=(const NotifyUnmarry& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyUnmarry& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyUnmarry* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyUnmarry* other);

  // implements Message ----------------------------------------------

  NotifyUnmarry* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyUnmarry& from);
  void MergeFrom(const NotifyUnmarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyUnmarry)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoRelations_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoRelations_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoRelations_2eproto();
  friend void protobuf_ShutdownFile_ProtoRelations_2eproto();

  void InitAsDefaultInstance();
  static NotifyUnmarry* default_instance_;
};
// ===================================================================


// ===================================================================

// RelationsInfo

// optional int32 type = 1;
inline bool RelationsInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationsInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationsInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationsInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RelationsInfo::type() const {
  return type_;
}
inline void RelationsInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 charid = 2;
inline bool RelationsInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelationsInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelationsInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelationsInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 RelationsInfo::charid() const {
  return charid_;
}
inline void RelationsInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool RelationsInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelationsInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelationsInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelationsInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RelationsInfo::name() const {
  return *name_;
}
inline void RelationsInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RelationsInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RelationsInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RelationsInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RelationsInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RelationsInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 race = 4;
inline bool RelationsInfo::has_race() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelationsInfo::set_has_race() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelationsInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelationsInfo::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 RelationsInfo::race() const {
  return race_;
}
inline void RelationsInfo::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 level = 5;
inline bool RelationsInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelationsInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelationsInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelationsInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RelationsInfo::level() const {
  return level_;
}
inline void RelationsInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 mapid = 6;
inline bool RelationsInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelationsInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelationsInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelationsInfo::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 RelationsInfo::mapid() const {
  return mapid_;
}
inline void RelationsInfo::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional uint32 time = 7;
inline bool RelationsInfo::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelationsInfo::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelationsInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelationsInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RelationsInfo::time() const {
  return time_;
}
inline void RelationsInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional bool online = 8;
inline bool RelationsInfo::has_online() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RelationsInfo::set_has_online() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RelationsInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RelationsInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool RelationsInfo::online() const {
  return online_;
}
inline void RelationsInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// RequestFriendList

// optional int32 reserve = 1;
inline bool RequestFriendList::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestFriendList::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestFriendList::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestFriendList::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 RequestFriendList::reserve() const {
  return reserve_;
}
inline void RequestFriendList::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// ResponseFriendList

// repeated .Protocol.RelationsInfo friend_list = 1;
inline int ResponseFriendList::friend_list_size() const {
  return friend_list_.size();
}
inline void ResponseFriendList::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::Protocol::RelationsInfo& ResponseFriendList::friend_list(int index) const {
  return friend_list_.Get(index);
}
inline ::Protocol::RelationsInfo* ResponseFriendList::mutable_friend_list(int index) {
  return friend_list_.Mutable(index);
}
inline ::Protocol::RelationsInfo* ResponseFriendList::add_friend_list() {
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >&
ResponseFriendList::friend_list() const {
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >*
ResponseFriendList::mutable_friend_list() {
  return &friend_list_;
}

// -------------------------------------------------------------------

// RequestAddFriend

// optional string name = 1;
inline bool RequestAddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestAddFriend::name() const {
  return *name_;
}
inline void RequestAddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestAddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestAddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestAddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestAddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestAddFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseAddFriend

// optional .Protocol.RelationsInfo info = 1;
inline bool ResponseAddFriend::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseAddFriend::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseAddFriend::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseAddFriend::clear_info() {
  if (info_ != NULL) info_->::Protocol::RelationsInfo::Clear();
  clear_has_info();
}
inline const ::Protocol::RelationsInfo& ResponseAddFriend::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::Protocol::RelationsInfo* ResponseAddFriend::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Protocol::RelationsInfo;
  return info_;
}
inline ::Protocol::RelationsInfo* ResponseAddFriend::release_info() {
  clear_has_info();
  ::Protocol::RelationsInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ResponseAddFriend::set_allocated_info(::Protocol::RelationsInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// NotifyAddFriendTips

// optional string name = 1;
inline bool NotifyAddFriendTips::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyAddFriendTips::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyAddFriendTips::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyAddFriendTips::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NotifyAddFriendTips::name() const {
  return *name_;
}
inline void NotifyAddFriendTips::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyAddFriendTips::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyAddFriendTips::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyAddFriendTips::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NotifyAddFriendTips::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifyAddFriendTips::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestRemoveFriend

// optional uint32 charid = 1;
inline bool RequestRemoveFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRemoveFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRemoveFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRemoveFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 RequestRemoveFriend::charid() const {
  return charid_;
}
inline void RequestRemoveFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// ResponseRemoveFriend

// optional uint32 charid = 1;
inline bool ResponseRemoveFriend::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRemoveFriend::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRemoveFriend::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRemoveFriend::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ResponseRemoveFriend::charid() const {
  return charid_;
}
inline void ResponseRemoveFriend::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// RequestEnemyList

// optional int32 reserve = 1;
inline bool RequestEnemyList::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestEnemyList::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestEnemyList::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestEnemyList::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 RequestEnemyList::reserve() const {
  return reserve_;
}
inline void RequestEnemyList::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// ResponseEnemyList

// repeated .Protocol.RelationsInfo enemy_list = 1;
inline int ResponseEnemyList::enemy_list_size() const {
  return enemy_list_.size();
}
inline void ResponseEnemyList::clear_enemy_list() {
  enemy_list_.Clear();
}
inline const ::Protocol::RelationsInfo& ResponseEnemyList::enemy_list(int index) const {
  return enemy_list_.Get(index);
}
inline ::Protocol::RelationsInfo* ResponseEnemyList::mutable_enemy_list(int index) {
  return enemy_list_.Mutable(index);
}
inline ::Protocol::RelationsInfo* ResponseEnemyList::add_enemy_list() {
  return enemy_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >&
ResponseEnemyList::enemy_list() const {
  return enemy_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::RelationsInfo >*
ResponseEnemyList::mutable_enemy_list() {
  return &enemy_list_;
}

// -------------------------------------------------------------------

// NotifyAddEnemy

// optional .Protocol.RelationsInfo info = 1;
inline bool NotifyAddEnemy::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyAddEnemy::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyAddEnemy::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyAddEnemy::clear_info() {
  if (info_ != NULL) info_->::Protocol::RelationsInfo::Clear();
  clear_has_info();
}
inline const ::Protocol::RelationsInfo& NotifyAddEnemy::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::Protocol::RelationsInfo* NotifyAddEnemy::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Protocol::RelationsInfo;
  return info_;
}
inline ::Protocol::RelationsInfo* NotifyAddEnemy::release_info() {
  clear_has_info();
  ::Protocol::RelationsInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void NotifyAddEnemy::set_allocated_info(::Protocol::RelationsInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// RequestRemoveEnemy

// optional uint32 charid = 1;
inline bool RequestRemoveEnemy::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRemoveEnemy::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRemoveEnemy::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRemoveEnemy::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 RequestRemoveEnemy::charid() const {
  return charid_;
}
inline void RequestRemoveEnemy::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// ResponseRemoveEnemy

// optional uint32 charid = 1;
inline bool ResponseRemoveEnemy::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRemoveEnemy::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRemoveEnemy::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRemoveEnemy::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ResponseRemoveEnemy::charid() const {
  return charid_;
}
inline void ResponseRemoveEnemy::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// RequestMarry

// optional int32 type = 1;
inline bool RequestMarry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestMarry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestMarry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestMarry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RequestMarry::type() const {
  return type_;
}
inline void RequestMarry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RequestAskMarry

// optional bool agree = 1;
inline bool RequestAskMarry::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAskMarry::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAskMarry::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAskMarry::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool RequestAskMarry::agree() const {
  return agree_;
}
inline void RequestAskMarry::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// NotifyMarry

// optional int32 result = 1;
inline bool NotifyMarry::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyMarry::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyMarry::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyMarry::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NotifyMarry::result() const {
  return result_;
}
inline void NotifyMarry::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .Protocol.RelationsInfo info = 2;
inline bool NotifyMarry::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyMarry::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyMarry::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyMarry::clear_info() {
  if (info_ != NULL) info_->::Protocol::RelationsInfo::Clear();
  clear_has_info();
}
inline const ::Protocol::RelationsInfo& NotifyMarry::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::Protocol::RelationsInfo* NotifyMarry::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Protocol::RelationsInfo;
  return info_;
}
inline ::Protocol::RelationsInfo* NotifyMarry::release_info() {
  clear_has_info();
  ::Protocol::RelationsInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void NotifyMarry::set_allocated_info(::Protocol::RelationsInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// RequestUnmarry

// optional int32 type = 1;
inline bool RequestUnmarry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestUnmarry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestUnmarry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestUnmarry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RequestUnmarry::type() const {
  return type_;
}
inline void RequestUnmarry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RequestAskUnmarry

// optional bool agree = 1;
inline bool RequestAskUnmarry::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAskUnmarry::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAskUnmarry::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAskUnmarry::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool RequestAskUnmarry::agree() const {
  return agree_;
}
inline void RequestAskUnmarry::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// NotifyUnmarry

// optional int32 result = 1;
inline bool NotifyUnmarry::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyUnmarry::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyUnmarry::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyUnmarry::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NotifyUnmarry::result() const {
  return result_;
}
inline void NotifyUnmarry::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoRelations_2eproto__INCLUDED
