// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGuild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoGuild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoGuild_2eproto() {
  delete GuildInfo::default_instance_;
  delete GuildMemberInfo::default_instance_;
  delete GuildSkillData::default_instance_;
  delete GuildApplyInfo::default_instance_;
  delete RequestCreateGuild::default_instance_;
  delete ResponseCreateGuild::default_instance_;
  delete RequestGetGuildList::default_instance_;
  delete ResponseGetGuildList::default_instance_;
  delete RequestGetGuildMemberList::default_instance_;
  delete ResponseGetGuildMemberList::default_instance_;
  delete RequestApplyJoinGuild::default_instance_;
  delete RequestInviteJoinGuild::default_instance_;
  delete NotifyInviteJoinGuild::default_instance_;
  delete RequestInviteResult::default_instance_;
  delete RequestGuildRemoveMember::default_instance_;
  delete NotifyGuildRemoveMember::default_instance_;
  delete NotifyGuildAddMember::default_instance_;
  delete RequestChangeGuildTitle::default_instance_;
  delete NotifyChangeGuildTitle::default_instance_;
  delete RequestChangeGuildNotice::default_instance_;
  delete NotifyChangeGuildNotice::default_instance_;
  delete RequestChangeGuildRequire::default_instance_;
  delete ResponseChangeGuildRequire::default_instance_;
  delete NotifyUpdateGuildMember::default_instance_;
  delete RequestGetApplyList::default_instance_;
  delete ResponseGetApplyList::default_instance_;
  delete RequestProcessApply::default_instance_;
  delete RequestUpdateGuildInfo::default_instance_;
  delete NotifyUpdateGuildInfo::default_instance_;
  delete RequestGuildDonateResource::default_instance_;
  delete NotifyGuildDonateResource::default_instance_;
  delete RequestGuildUpgrade::default_instance_;
  delete NotifyGuildUpgrade::default_instance_;
  delete RequestGuildDevelopSkill::default_instance_;
  delete NotifyGuildDevelopSkill::default_instance_;
  delete RequestGuildLearnSkill::default_instance_;
  delete ResponseGuildLearnSkill::default_instance_;
  delete RequestGetGuildSkill::default_instance_;
  delete NotifyGetGuildSkill::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoGuild_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoGuild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  GuildInfo::default_instance_ = new GuildInfo();
  GuildMemberInfo::default_instance_ = new GuildMemberInfo();
  GuildSkillData::default_instance_ = new GuildSkillData();
  GuildApplyInfo::default_instance_ = new GuildApplyInfo();
  RequestCreateGuild::default_instance_ = new RequestCreateGuild();
  ResponseCreateGuild::default_instance_ = new ResponseCreateGuild();
  RequestGetGuildList::default_instance_ = new RequestGetGuildList();
  ResponseGetGuildList::default_instance_ = new ResponseGetGuildList();
  RequestGetGuildMemberList::default_instance_ = new RequestGetGuildMemberList();
  ResponseGetGuildMemberList::default_instance_ = new ResponseGetGuildMemberList();
  RequestApplyJoinGuild::default_instance_ = new RequestApplyJoinGuild();
  RequestInviteJoinGuild::default_instance_ = new RequestInviteJoinGuild();
  NotifyInviteJoinGuild::default_instance_ = new NotifyInviteJoinGuild();
  RequestInviteResult::default_instance_ = new RequestInviteResult();
  RequestGuildRemoveMember::default_instance_ = new RequestGuildRemoveMember();
  NotifyGuildRemoveMember::default_instance_ = new NotifyGuildRemoveMember();
  NotifyGuildAddMember::default_instance_ = new NotifyGuildAddMember();
  RequestChangeGuildTitle::default_instance_ = new RequestChangeGuildTitle();
  NotifyChangeGuildTitle::default_instance_ = new NotifyChangeGuildTitle();
  RequestChangeGuildNotice::default_instance_ = new RequestChangeGuildNotice();
  NotifyChangeGuildNotice::default_instance_ = new NotifyChangeGuildNotice();
  RequestChangeGuildRequire::default_instance_ = new RequestChangeGuildRequire();
  ResponseChangeGuildRequire::default_instance_ = new ResponseChangeGuildRequire();
  NotifyUpdateGuildMember::default_instance_ = new NotifyUpdateGuildMember();
  RequestGetApplyList::default_instance_ = new RequestGetApplyList();
  ResponseGetApplyList::default_instance_ = new ResponseGetApplyList();
  RequestProcessApply::default_instance_ = new RequestProcessApply();
  RequestUpdateGuildInfo::default_instance_ = new RequestUpdateGuildInfo();
  NotifyUpdateGuildInfo::default_instance_ = new NotifyUpdateGuildInfo();
  RequestGuildDonateResource::default_instance_ = new RequestGuildDonateResource();
  NotifyGuildDonateResource::default_instance_ = new NotifyGuildDonateResource();
  RequestGuildUpgrade::default_instance_ = new RequestGuildUpgrade();
  NotifyGuildUpgrade::default_instance_ = new NotifyGuildUpgrade();
  RequestGuildDevelopSkill::default_instance_ = new RequestGuildDevelopSkill();
  NotifyGuildDevelopSkill::default_instance_ = new NotifyGuildDevelopSkill();
  RequestGuildLearnSkill::default_instance_ = new RequestGuildLearnSkill();
  ResponseGuildLearnSkill::default_instance_ = new ResponseGuildLearnSkill();
  RequestGetGuildSkill::default_instance_ = new RequestGetGuildSkill();
  NotifyGetGuildSkill::default_instance_ = new NotifyGetGuildSkill();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMemberInfo::default_instance_->InitAsDefaultInstance();
  GuildSkillData::default_instance_->InitAsDefaultInstance();
  GuildApplyInfo::default_instance_->InitAsDefaultInstance();
  RequestCreateGuild::default_instance_->InitAsDefaultInstance();
  ResponseCreateGuild::default_instance_->InitAsDefaultInstance();
  RequestGetGuildList::default_instance_->InitAsDefaultInstance();
  ResponseGetGuildList::default_instance_->InitAsDefaultInstance();
  RequestGetGuildMemberList::default_instance_->InitAsDefaultInstance();
  ResponseGetGuildMemberList::default_instance_->InitAsDefaultInstance();
  RequestApplyJoinGuild::default_instance_->InitAsDefaultInstance();
  RequestInviteJoinGuild::default_instance_->InitAsDefaultInstance();
  NotifyInviteJoinGuild::default_instance_->InitAsDefaultInstance();
  RequestInviteResult::default_instance_->InitAsDefaultInstance();
  RequestGuildRemoveMember::default_instance_->InitAsDefaultInstance();
  NotifyGuildRemoveMember::default_instance_->InitAsDefaultInstance();
  NotifyGuildAddMember::default_instance_->InitAsDefaultInstance();
  RequestChangeGuildTitle::default_instance_->InitAsDefaultInstance();
  NotifyChangeGuildTitle::default_instance_->InitAsDefaultInstance();
  RequestChangeGuildNotice::default_instance_->InitAsDefaultInstance();
  NotifyChangeGuildNotice::default_instance_->InitAsDefaultInstance();
  RequestChangeGuildRequire::default_instance_->InitAsDefaultInstance();
  ResponseChangeGuildRequire::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGuildMember::default_instance_->InitAsDefaultInstance();
  RequestGetApplyList::default_instance_->InitAsDefaultInstance();
  ResponseGetApplyList::default_instance_->InitAsDefaultInstance();
  RequestProcessApply::default_instance_->InitAsDefaultInstance();
  RequestUpdateGuildInfo::default_instance_->InitAsDefaultInstance();
  NotifyUpdateGuildInfo::default_instance_->InitAsDefaultInstance();
  RequestGuildDonateResource::default_instance_->InitAsDefaultInstance();
  NotifyGuildDonateResource::default_instance_->InitAsDefaultInstance();
  RequestGuildUpgrade::default_instance_->InitAsDefaultInstance();
  NotifyGuildUpgrade::default_instance_->InitAsDefaultInstance();
  RequestGuildDevelopSkill::default_instance_->InitAsDefaultInstance();
  NotifyGuildDevelopSkill::default_instance_->InitAsDefaultInstance();
  RequestGuildLearnSkill::default_instance_->InitAsDefaultInstance();
  ResponseGuildLearnSkill::default_instance_->InitAsDefaultInstance();
  RequestGetGuildSkill::default_instance_->InitAsDefaultInstance();
  NotifyGetGuildSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoGuild_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoGuild_2eproto_once_);
void protobuf_AddDesc_ProtoGuild_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoGuild_2eproto_once_,
                 &protobuf_AddDesc_ProtoGuild_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoGuild_2eproto {
  StaticDescriptorInitializer_ProtoGuild_2eproto() {
    protobuf_AddDesc_ProtoGuild_2eproto();
  }
} static_descriptor_initializer_ProtoGuild_2eproto_;
#endif
bool GuildOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

bool GuildTitle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kGuildidFieldNumber;
const int GuildInfo::kNameFieldNumber;
const int GuildInfo::kMasterFieldNumber;
const int GuildInfo::kLevelFieldNumber;
const int GuildInfo::kCurMemberFieldNumber;
const int GuildInfo::kMaxMemberFieldNumber;
const int GuildInfo::kRequireLevelFieldNumber;
const int GuildInfo::kRequireVerifyFieldNumber;
const int GuildInfo::kNoticeFieldNumber;
const int GuildInfo::kCreditsFieldNumber;
const int GuildInfo::kResource1FieldNumber;
const int GuildInfo::kResource2FieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildInfo::InitAsDefaultInstance() {
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  cur_member_ = 0;
  max_member_ = 0;
  require_level_ = 0;
  require_verify_ = false;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  credits_ = 0;
  resource1_ = 0;
  resource2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildInfo& GuildInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
    level_ = 0;
    cur_member_ = 0;
    max_member_ = 0;
    require_level_ = 0;
    require_verify_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    credits_ = 0;
    resource1_ = 0;
    resource2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_member;
        break;
      }

      // optional int32 cur_member = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_member_)));
          set_has_cur_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_member;
        break;
      }

      // optional int32 max_member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_member_)));
          set_has_max_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_require_level;
        break;
      }

      // optional int32 require_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_level_)));
          set_has_require_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_require_verify;
        break;
      }

      // optional bool require_verify = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_verify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_verify_)));
          set_has_require_verify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional string notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_credits;
        break;
      }

      // optional int32 credits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_resource1;
        break;
      }

      // optional int32 resource1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource1_)));
          set_has_resource1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_resource2;
        break;
      }

      // optional int32 resource2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource2_)));
          set_has_resource2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 cur_member = 5;
  if (has_cur_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_member(), output);
  }

  // optional int32 max_member = 6;
  if (has_max_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_member(), output);
  }

  // optional int32 require_level = 7;
  if (has_require_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->require_level(), output);
  }

  // optional bool require_verify = 8;
  if (has_require_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->require_verify(), output);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notice(), output);
  }

  // optional int32 credits = 10;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->credits(), output);
  }

  // optional int32 resource1 = 11;
  if (has_resource1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->resource1(), output);
  }

  // optional int32 resource2 = 12;
  if (has_resource2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->resource2(), output);
  }

}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 cur_member = 5;
    if (has_cur_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_member());
    }

    // optional int32 max_member = 6;
    if (has_max_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_member());
    }

    // optional int32 require_level = 7;
    if (has_require_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_level());
    }

    // optional bool require_verify = 8;
    if (has_require_verify()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 credits = 10;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

    // optional int32 resource1 = 11;
    if (has_resource1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource1());
    }

    // optional int32 resource2 = 12;
    if (has_resource2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildInfo*>(&from));
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_member()) {
      set_cur_member(from.cur_member());
    }
    if (from.has_max_member()) {
      set_max_member(from.max_member());
    }
    if (from.has_require_level()) {
      set_require_level(from.require_level());
    }
    if (from.has_require_verify()) {
      set_require_verify(from.require_verify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_resource1()) {
      set_resource1(from.resource1());
    }
    if (from.has_resource2()) {
      set_resource2(from.resource2());
    }
  }
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {

  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(master_, other->master_);
    std::swap(level_, other->level_);
    std::swap(cur_member_, other->cur_member_);
    std::swap(max_member_, other->max_member_);
    std::swap(require_level_, other->require_level_);
    std::swap(require_verify_, other->require_verify_);
    std::swap(notice_, other->notice_);
    std::swap(credits_, other->credits_);
    std::swap(resource1_, other->resource1_);
    std::swap(resource2_, other->resource2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildInfo::GetTypeName() const {
  return "Protocol.GuildInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberInfo::kCharidFieldNumber;
const int GuildMemberInfo::kNameFieldNumber;
const int GuildMemberInfo::kRaceFieldNumber;
const int GuildMemberInfo::kLevelFieldNumber;
const int GuildMemberInfo::kTitleFieldNumber;
const int GuildMemberInfo::kCreditsFieldNumber;
const int GuildMemberInfo::kTotalCreditsFieldNumber;
const int GuildMemberInfo::kJointimeFieldNumber;
const int GuildMemberInfo::kOnlineFieldNumber;
const int GuildMemberInfo::kOfflinetimeFieldNumber;
#endif  // !_MSC_VER

GuildMemberInfo::GuildMemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildMemberInfo::InitAsDefaultInstance() {
}

GuildMemberInfo::GuildMemberInfo(const GuildMemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = 0;
  level_ = 0;
  title_ = 0;
  credits_ = 0;
  total_credits_ = 0;
  jointime_ = 0u;
  online_ = false;
  offlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberInfo::~GuildMemberInfo() {
  SharedDtor();
}

void GuildMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildMemberInfo& GuildMemberInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

GuildMemberInfo* GuildMemberInfo::default_instance_ = NULL;

GuildMemberInfo* GuildMemberInfo::New() const {
  return new GuildMemberInfo;
}

void GuildMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    race_ = 0;
    level_ = 0;
    title_ = 0;
    credits_ = 0;
    total_credits_ = 0;
    jointime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = false;
    offlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // optional int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }

      // optional .Protocol.GuildTitle title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::GuildTitle_IsValid(value)) {
            set_title(static_cast< ::Protocol::GuildTitle >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_credits;
        break;
      }

      // optional int32 credits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_credits;
        break;
      }

      // optional int32 total_credits = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_credits_)));
          set_has_total_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jointime;
        break;
      }

      // optional uint32 jointime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // optional bool online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_offlinetime;
        break;
      }

      // optional uint32 offlinetime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional .Protocol.GuildTitle title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->title(), output);
  }

  // optional int32 credits = 6;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->credits(), output);
  }

  // optional int32 total_credits = 7;
  if (has_total_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_credits(), output);
  }

  // optional uint32 jointime = 8;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->jointime(), output);
  }

  // optional bool online = 9;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  // optional uint32 offlinetime = 10;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->offlinetime(), output);
  }

}

int GuildMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .Protocol.GuildTitle title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->title());
    }

    // optional int32 credits = 6;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

    // optional int32 total_credits = 7;
    if (has_total_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_credits());
    }

    // optional uint32 jointime = 8;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool online = 9;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 offlinetime = 10;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildMemberInfo*>(&from));
}

void GuildMemberInfo::MergeFrom(const GuildMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_total_credits()) {
      set_total_credits(from.total_credits());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
  }
}

void GuildMemberInfo::CopyFrom(const GuildMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberInfo::IsInitialized() const {

  return true;
}

void GuildMemberInfo::Swap(GuildMemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(race_, other->race_);
    std::swap(level_, other->level_);
    std::swap(title_, other->title_);
    std::swap(credits_, other->credits_);
    std::swap(total_credits_, other->total_credits_);
    std::swap(jointime_, other->jointime_);
    std::swap(online_, other->online_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildMemberInfo::GetTypeName() const {
  return "Protocol.GuildMemberInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSkillData::kIdFieldNumber;
const int GuildSkillData::kLevelFieldNumber;
#endif  // !_MSC_VER

GuildSkillData::GuildSkillData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildSkillData::InitAsDefaultInstance() {
}

GuildSkillData::GuildSkillData(const GuildSkillData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildSkillData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSkillData::~GuildSkillData() {
  SharedDtor();
}

void GuildSkillData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildSkillData& GuildSkillData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

GuildSkillData* GuildSkillData::default_instance_ = NULL;

GuildSkillData* GuildSkillData::New() const {
  return new GuildSkillData;
}

void GuildSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

}

int GuildSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSkillData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildSkillData*>(&from));
}

void GuildSkillData::MergeFrom(const GuildSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void GuildSkillData::CopyFrom(const GuildSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSkillData::IsInitialized() const {

  return true;
}

void GuildSkillData::Swap(GuildSkillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildSkillData::GetTypeName() const {
  return "Protocol.GuildSkillData";
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApplyInfo::kCharidFieldNumber;
const int GuildApplyInfo::kNameFieldNumber;
const int GuildApplyInfo::kRaceFieldNumber;
const int GuildApplyInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

GuildApplyInfo::GuildApplyInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildApplyInfo::InitAsDefaultInstance() {
}

GuildApplyInfo::GuildApplyInfo(const GuildApplyInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApplyInfo::~GuildApplyInfo() {
  SharedDtor();
}

void GuildApplyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildApplyInfo& GuildApplyInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

GuildApplyInfo* GuildApplyInfo::default_instance_ = NULL;

GuildApplyInfo* GuildApplyInfo::New() const {
  return new GuildApplyInfo;
}

void GuildApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    race_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // optional int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

}

int GuildApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApplyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildApplyInfo*>(&from));
}

void GuildApplyInfo::MergeFrom(const GuildApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void GuildApplyInfo::CopyFrom(const GuildApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyInfo::IsInitialized() const {

  return true;
}

void GuildApplyInfo::Swap(GuildApplyInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(race_, other->race_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildApplyInfo::GetTypeName() const {
  return "Protocol.GuildApplyInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateGuild::kNameFieldNumber;
#endif  // !_MSC_VER

RequestCreateGuild::RequestCreateGuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestCreateGuild::InitAsDefaultInstance() {
}

RequestCreateGuild::RequestCreateGuild(const RequestCreateGuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCreateGuild::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateGuild::~RequestCreateGuild() {
  SharedDtor();
}

void RequestCreateGuild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCreateGuild& RequestCreateGuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestCreateGuild* RequestCreateGuild::default_instance_ = NULL;

RequestCreateGuild* RequestCreateGuild::New() const {
  return new RequestCreateGuild;
}

void RequestCreateGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int RequestCreateGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateGuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCreateGuild*>(&from));
}

void RequestCreateGuild::MergeFrom(const RequestCreateGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void RequestCreateGuild::CopyFrom(const RequestCreateGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGuild::IsInitialized() const {

  return true;
}

void RequestCreateGuild::Swap(RequestCreateGuild* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCreateGuild::GetTypeName() const {
  return "Protocol.RequestCreateGuild";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCreateGuild::kResultFieldNumber;
const int ResponseCreateGuild::kNameFieldNumber;
const int ResponseCreateGuild::kMaxMemberFieldNumber;
#endif  // !_MSC_VER

ResponseCreateGuild::ResponseCreateGuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseCreateGuild::InitAsDefaultInstance() {
}

ResponseCreateGuild::ResponseCreateGuild(const ResponseCreateGuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCreateGuild::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_member_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCreateGuild::~ResponseCreateGuild() {
  SharedDtor();
}

void ResponseCreateGuild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseCreateGuild& ResponseCreateGuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseCreateGuild* ResponseCreateGuild::default_instance_ = NULL;

ResponseCreateGuild* ResponseCreateGuild::New() const {
  return new ResponseCreateGuild;
}

void ResponseCreateGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    max_member_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_member;
        break;
      }

      // optional int32 max_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_member_)));
          set_has_max_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 max_member = 3;
  if (has_max_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_member(), output);
  }

}

int ResponseCreateGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 max_member = 3;
    if (has_max_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_member());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCreateGuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCreateGuild*>(&from));
}

void ResponseCreateGuild::MergeFrom(const ResponseCreateGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_max_member()) {
      set_max_member(from.max_member());
    }
  }
}

void ResponseCreateGuild::CopyFrom(const ResponseCreateGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateGuild::IsInitialized() const {

  return true;
}

void ResponseCreateGuild::Swap(ResponseCreateGuild* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(max_member_, other->max_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseCreateGuild::GetTypeName() const {
  return "Protocol.ResponseCreateGuild";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetGuildList::kPageFieldNumber;
#endif  // !_MSC_VER

RequestGetGuildList::RequestGetGuildList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetGuildList::InitAsDefaultInstance() {
}

RequestGetGuildList::RequestGetGuildList(const RequestGetGuildList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetGuildList::SharedCtor() {
  _cached_size_ = 0;
  page_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetGuildList::~RequestGetGuildList() {
  SharedDtor();
}

void RequestGetGuildList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetGuildList& RequestGetGuildList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGetGuildList* RequestGetGuildList::default_instance_ = NULL;

RequestGetGuildList* RequestGetGuildList::New() const {
  return new RequestGetGuildList;
}

void RequestGetGuildList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

}

int RequestGetGuildList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetGuildList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetGuildList*>(&from));
}

void RequestGetGuildList::MergeFrom(const RequestGetGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
}

void RequestGetGuildList::CopyFrom(const RequestGetGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetGuildList::IsInitialized() const {

  return true;
}

void RequestGetGuildList::Swap(RequestGetGuildList* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetGuildList::GetTypeName() const {
  return "Protocol.RequestGetGuildList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetGuildList::kPageFieldNumber;
const int ResponseGetGuildList::kMaxPageFieldNumber;
const int ResponseGetGuildList::kGuildListFieldNumber;
#endif  // !_MSC_VER

ResponseGetGuildList::ResponseGetGuildList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetGuildList::InitAsDefaultInstance() {
}

ResponseGetGuildList::ResponseGetGuildList(const ResponseGetGuildList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetGuildList::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  max_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetGuildList::~ResponseGetGuildList() {
  SharedDtor();
}

void ResponseGetGuildList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetGuildList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetGuildList& ResponseGetGuildList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseGetGuildList* ResponseGetGuildList::default_instance_ = NULL;

ResponseGetGuildList* ResponseGetGuildList::New() const {
  return new ResponseGetGuildList;
}

void ResponseGetGuildList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
    max_page_ = 0;
  }
  guild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetGuildList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_page;
        break;
      }

      // optional int32 max_page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_page_)));
          set_has_max_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_list;
        break;
      }

      // repeated .Protocol.GuildInfo guild_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetGuildList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  // optional int32 max_page = 2;
  if (has_max_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_page(), output);
  }

  // repeated .Protocol.GuildInfo guild_list = 3;
  for (int i = 0; i < this->guild_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guild_list(i), output);
  }

}

int ResponseGetGuildList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 max_page = 2;
    if (has_max_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_page());
    }

  }
  // repeated .Protocol.GuildInfo guild_list = 3;
  total_size += 1 * this->guild_list_size();
  for (int i = 0; i < this->guild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetGuildList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetGuildList*>(&from));
}

void ResponseGetGuildList::MergeFrom(const ResponseGetGuildList& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_list_.MergeFrom(from.guild_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_max_page()) {
      set_max_page(from.max_page());
    }
  }
}

void ResponseGetGuildList::CopyFrom(const ResponseGetGuildList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetGuildList::IsInitialized() const {

  return true;
}

void ResponseGetGuildList::Swap(ResponseGetGuildList* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(max_page_, other->max_page_);
    guild_list_.Swap(&other->guild_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetGuildList::GetTypeName() const {
  return "Protocol.ResponseGetGuildList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetGuildMemberList::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGetGuildMemberList::RequestGetGuildMemberList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetGuildMemberList::InitAsDefaultInstance() {
}

RequestGetGuildMemberList::RequestGetGuildMemberList(const RequestGetGuildMemberList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetGuildMemberList::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetGuildMemberList::~RequestGetGuildMemberList() {
  SharedDtor();
}

void RequestGetGuildMemberList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetGuildMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetGuildMemberList& RequestGetGuildMemberList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGetGuildMemberList* RequestGetGuildMemberList::default_instance_ = NULL;

RequestGetGuildMemberList* RequestGetGuildMemberList::New() const {
  return new RequestGetGuildMemberList;
}

void RequestGetGuildMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetGuildMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetGuildMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGetGuildMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetGuildMemberList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetGuildMemberList*>(&from));
}

void RequestGetGuildMemberList::MergeFrom(const RequestGetGuildMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGetGuildMemberList::CopyFrom(const RequestGetGuildMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetGuildMemberList::IsInitialized() const {

  return true;
}

void RequestGetGuildMemberList::Swap(RequestGetGuildMemberList* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetGuildMemberList::GetTypeName() const {
  return "Protocol.RequestGetGuildMemberList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetGuildMemberList::kMemberListFieldNumber;
#endif  // !_MSC_VER

ResponseGetGuildMemberList::ResponseGetGuildMemberList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetGuildMemberList::InitAsDefaultInstance() {
}

ResponseGetGuildMemberList::ResponseGetGuildMemberList(const ResponseGetGuildMemberList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetGuildMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetGuildMemberList::~ResponseGetGuildMemberList() {
  SharedDtor();
}

void ResponseGetGuildMemberList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetGuildMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetGuildMemberList& ResponseGetGuildMemberList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseGetGuildMemberList* ResponseGetGuildMemberList::default_instance_ = NULL;

ResponseGetGuildMemberList* ResponseGetGuildMemberList::New() const {
  return new ResponseGetGuildMemberList;
}

void ResponseGetGuildMemberList::Clear() {
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetGuildMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.GuildMemberInfo member_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetGuildMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.GuildMemberInfo member_list = 1;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->member_list(i), output);
  }

}

int ResponseGetGuildMemberList::ByteSize() const {
  int total_size = 0;

  // repeated .Protocol.GuildMemberInfo member_list = 1;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetGuildMemberList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetGuildMemberList*>(&from));
}

void ResponseGetGuildMemberList::MergeFrom(const ResponseGetGuildMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
}

void ResponseGetGuildMemberList::CopyFrom(const ResponseGetGuildMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetGuildMemberList::IsInitialized() const {

  return true;
}

void ResponseGetGuildMemberList::Swap(ResponseGetGuildMemberList* other) {
  if (other != this) {
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetGuildMemberList::GetTypeName() const {
  return "Protocol.ResponseGetGuildMemberList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestApplyJoinGuild::kNameFieldNumber;
#endif  // !_MSC_VER

RequestApplyJoinGuild::RequestApplyJoinGuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestApplyJoinGuild::InitAsDefaultInstance() {
}

RequestApplyJoinGuild::RequestApplyJoinGuild(const RequestApplyJoinGuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestApplyJoinGuild::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestApplyJoinGuild::~RequestApplyJoinGuild() {
  SharedDtor();
}

void RequestApplyJoinGuild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestApplyJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestApplyJoinGuild& RequestApplyJoinGuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestApplyJoinGuild* RequestApplyJoinGuild::default_instance_ = NULL;

RequestApplyJoinGuild* RequestApplyJoinGuild::New() const {
  return new RequestApplyJoinGuild;
}

void RequestApplyJoinGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestApplyJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestApplyJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int RequestApplyJoinGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestApplyJoinGuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestApplyJoinGuild*>(&from));
}

void RequestApplyJoinGuild::MergeFrom(const RequestApplyJoinGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void RequestApplyJoinGuild::CopyFrom(const RequestApplyJoinGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApplyJoinGuild::IsInitialized() const {

  return true;
}

void RequestApplyJoinGuild::Swap(RequestApplyJoinGuild* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestApplyJoinGuild::GetTypeName() const {
  return "Protocol.RequestApplyJoinGuild";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestInviteJoinGuild::kCharnameFieldNumber;
#endif  // !_MSC_VER

RequestInviteJoinGuild::RequestInviteJoinGuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestInviteJoinGuild::InitAsDefaultInstance() {
}

RequestInviteJoinGuild::RequestInviteJoinGuild(const RequestInviteJoinGuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestInviteJoinGuild::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInviteJoinGuild::~RequestInviteJoinGuild() {
  SharedDtor();
}

void RequestInviteJoinGuild::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestInviteJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestInviteJoinGuild& RequestInviteJoinGuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestInviteJoinGuild* RequestInviteJoinGuild::default_instance_ = NULL;

RequestInviteJoinGuild* RequestInviteJoinGuild::New() const {
  return new RequestInviteJoinGuild;
}

void RequestInviteJoinGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestInviteJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestInviteJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

}

int RequestInviteJoinGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInviteJoinGuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestInviteJoinGuild*>(&from));
}

void RequestInviteJoinGuild::MergeFrom(const RequestInviteJoinGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
}

void RequestInviteJoinGuild::CopyFrom(const RequestInviteJoinGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInviteJoinGuild::IsInitialized() const {

  return true;
}

void RequestInviteJoinGuild::Swap(RequestInviteJoinGuild* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestInviteJoinGuild::GetTypeName() const {
  return "Protocol.RequestInviteJoinGuild";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyInviteJoinGuild::kCharnameFieldNumber;
const int NotifyInviteJoinGuild::kGuildnameFieldNumber;
#endif  // !_MSC_VER

NotifyInviteJoinGuild::NotifyInviteJoinGuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyInviteJoinGuild::InitAsDefaultInstance() {
}

NotifyInviteJoinGuild::NotifyInviteJoinGuild(const NotifyInviteJoinGuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyInviteJoinGuild::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyInviteJoinGuild::~NotifyInviteJoinGuild() {
  SharedDtor();
}

void NotifyInviteJoinGuild::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyInviteJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyInviteJoinGuild& NotifyInviteJoinGuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyInviteJoinGuild* NotifyInviteJoinGuild::default_instance_ = NULL;

NotifyInviteJoinGuild* NotifyInviteJoinGuild::New() const {
  return new NotifyInviteJoinGuild;
}

void NotifyInviteJoinGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyInviteJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // optional string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyInviteJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

}

int NotifyInviteJoinGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyInviteJoinGuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyInviteJoinGuild*>(&from));
}

void NotifyInviteJoinGuild::MergeFrom(const NotifyInviteJoinGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
}

void NotifyInviteJoinGuild::CopyFrom(const NotifyInviteJoinGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyInviteJoinGuild::IsInitialized() const {

  return true;
}

void NotifyInviteJoinGuild::Swap(NotifyInviteJoinGuild* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyInviteJoinGuild::GetTypeName() const {
  return "Protocol.NotifyInviteJoinGuild";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestInviteResult::kAgreeFieldNumber;
#endif  // !_MSC_VER

RequestInviteResult::RequestInviteResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestInviteResult::InitAsDefaultInstance() {
}

RequestInviteResult::RequestInviteResult(const RequestInviteResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestInviteResult::SharedCtor() {
  _cached_size_ = 0;
  agree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInviteResult::~RequestInviteResult() {
  SharedDtor();
}

void RequestInviteResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestInviteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestInviteResult& RequestInviteResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestInviteResult* RequestInviteResult::default_instance_ = NULL;

RequestInviteResult* RequestInviteResult::New() const {
  return new RequestInviteResult;
}

void RequestInviteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestInviteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestInviteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agree(), output);
  }

}

int RequestInviteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 agree = 1;
    if (has_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agree());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInviteResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestInviteResult*>(&from));
}

void RequestInviteResult::MergeFrom(const RequestInviteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
}

void RequestInviteResult::CopyFrom(const RequestInviteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInviteResult::IsInitialized() const {

  return true;
}

void RequestInviteResult::Swap(RequestInviteResult* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestInviteResult::GetTypeName() const {
  return "Protocol.RequestInviteResult";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGuildRemoveMember::kNameFieldNumber;
#endif  // !_MSC_VER

RequestGuildRemoveMember::RequestGuildRemoveMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGuildRemoveMember::InitAsDefaultInstance() {
}

RequestGuildRemoveMember::RequestGuildRemoveMember(const RequestGuildRemoveMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGuildRemoveMember::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGuildRemoveMember::~RequestGuildRemoveMember() {
  SharedDtor();
}

void RequestGuildRemoveMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGuildRemoveMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGuildRemoveMember& RequestGuildRemoveMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGuildRemoveMember* RequestGuildRemoveMember::default_instance_ = NULL;

RequestGuildRemoveMember* RequestGuildRemoveMember::New() const {
  return new RequestGuildRemoveMember;
}

void RequestGuildRemoveMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGuildRemoveMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGuildRemoveMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int RequestGuildRemoveMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGuildRemoveMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGuildRemoveMember*>(&from));
}

void RequestGuildRemoveMember::MergeFrom(const RequestGuildRemoveMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void RequestGuildRemoveMember::CopyFrom(const RequestGuildRemoveMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGuildRemoveMember::IsInitialized() const {

  return true;
}

void RequestGuildRemoveMember::Swap(RequestGuildRemoveMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGuildRemoveMember::GetTypeName() const {
  return "Protocol.RequestGuildRemoveMember";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGuildRemoveMember::kNameFieldNumber;
#endif  // !_MSC_VER

NotifyGuildRemoveMember::NotifyGuildRemoveMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGuildRemoveMember::InitAsDefaultInstance() {
}

NotifyGuildRemoveMember::NotifyGuildRemoveMember(const NotifyGuildRemoveMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGuildRemoveMember::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGuildRemoveMember::~NotifyGuildRemoveMember() {
  SharedDtor();
}

void NotifyGuildRemoveMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGuildRemoveMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGuildRemoveMember& NotifyGuildRemoveMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGuildRemoveMember* NotifyGuildRemoveMember::default_instance_ = NULL;

NotifyGuildRemoveMember* NotifyGuildRemoveMember::New() const {
  return new NotifyGuildRemoveMember;
}

void NotifyGuildRemoveMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGuildRemoveMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGuildRemoveMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int NotifyGuildRemoveMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGuildRemoveMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGuildRemoveMember*>(&from));
}

void NotifyGuildRemoveMember::MergeFrom(const NotifyGuildRemoveMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void NotifyGuildRemoveMember::CopyFrom(const NotifyGuildRemoveMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGuildRemoveMember::IsInitialized() const {

  return true;
}

void NotifyGuildRemoveMember::Swap(NotifyGuildRemoveMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGuildRemoveMember::GetTypeName() const {
  return "Protocol.NotifyGuildRemoveMember";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGuildAddMember::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

NotifyGuildAddMember::NotifyGuildAddMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGuildAddMember::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  member_info_ = const_cast< ::Protocol::GuildMemberInfo*>(
      ::Protocol::GuildMemberInfo::internal_default_instance());
#else
  member_info_ = const_cast< ::Protocol::GuildMemberInfo*>(&::Protocol::GuildMemberInfo::default_instance());
#endif
}

NotifyGuildAddMember::NotifyGuildAddMember(const NotifyGuildAddMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGuildAddMember::SharedCtor() {
  _cached_size_ = 0;
  member_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGuildAddMember::~NotifyGuildAddMember() {
  SharedDtor();
}

void NotifyGuildAddMember::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete member_info_;
  }
}

void NotifyGuildAddMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGuildAddMember& NotifyGuildAddMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGuildAddMember* NotifyGuildAddMember::default_instance_ = NULL;

NotifyGuildAddMember* NotifyGuildAddMember::New() const {
  return new NotifyGuildAddMember;
}

void NotifyGuildAddMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member_info()) {
      if (member_info_ != NULL) member_info_->::Protocol::GuildMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGuildAddMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.GuildMemberInfo member_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGuildAddMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.GuildMemberInfo member_info = 1;
  if (has_member_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->member_info(), output);
  }

}

int NotifyGuildAddMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.GuildMemberInfo member_info = 1;
    if (has_member_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGuildAddMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGuildAddMember*>(&from));
}

void NotifyGuildAddMember::MergeFrom(const NotifyGuildAddMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_info()) {
      mutable_member_info()->::Protocol::GuildMemberInfo::MergeFrom(from.member_info());
    }
  }
}

void NotifyGuildAddMember::CopyFrom(const NotifyGuildAddMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGuildAddMember::IsInitialized() const {

  return true;
}

void NotifyGuildAddMember::Swap(NotifyGuildAddMember* other) {
  if (other != this) {
    std::swap(member_info_, other->member_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGuildAddMember::GetTypeName() const {
  return "Protocol.NotifyGuildAddMember";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChangeGuildTitle::kNameFieldNumber;
const int RequestChangeGuildTitle::kTitleFieldNumber;
#endif  // !_MSC_VER

RequestChangeGuildTitle::RequestChangeGuildTitle()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestChangeGuildTitle::InitAsDefaultInstance() {
}

RequestChangeGuildTitle::RequestChangeGuildTitle(const RequestChangeGuildTitle& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChangeGuildTitle::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChangeGuildTitle::~RequestChangeGuildTitle() {
  SharedDtor();
}

void RequestChangeGuildTitle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestChangeGuildTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestChangeGuildTitle& RequestChangeGuildTitle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestChangeGuildTitle* RequestChangeGuildTitle::default_instance_ = NULL;

RequestChangeGuildTitle* RequestChangeGuildTitle::New() const {
  return new RequestChangeGuildTitle;
}

void RequestChangeGuildTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestChangeGuildTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // optional .Protocol.GuildTitle title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::GuildTitle_IsValid(value)) {
            set_title(static_cast< ::Protocol::GuildTitle >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChangeGuildTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .Protocol.GuildTitle title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->title(), output);
  }

}

int RequestChangeGuildTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Protocol.GuildTitle title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->title());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChangeGuildTitle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestChangeGuildTitle*>(&from));
}

void RequestChangeGuildTitle::MergeFrom(const RequestChangeGuildTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void RequestChangeGuildTitle::CopyFrom(const RequestChangeGuildTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeGuildTitle::IsInitialized() const {

  return true;
}

void RequestChangeGuildTitle::Swap(RequestChangeGuildTitle* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestChangeGuildTitle::GetTypeName() const {
  return "Protocol.RequestChangeGuildTitle";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyChangeGuildTitle::kNameFieldNumber;
const int NotifyChangeGuildTitle::kTitleFieldNumber;
#endif  // !_MSC_VER

NotifyChangeGuildTitle::NotifyChangeGuildTitle()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyChangeGuildTitle::InitAsDefaultInstance() {
}

NotifyChangeGuildTitle::NotifyChangeGuildTitle(const NotifyChangeGuildTitle& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyChangeGuildTitle::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyChangeGuildTitle::~NotifyChangeGuildTitle() {
  SharedDtor();
}

void NotifyChangeGuildTitle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyChangeGuildTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyChangeGuildTitle& NotifyChangeGuildTitle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyChangeGuildTitle* NotifyChangeGuildTitle::default_instance_ = NULL;

NotifyChangeGuildTitle* NotifyChangeGuildTitle::New() const {
  return new NotifyChangeGuildTitle;
}

void NotifyChangeGuildTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyChangeGuildTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // optional .Protocol.GuildTitle title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::GuildTitle_IsValid(value)) {
            set_title(static_cast< ::Protocol::GuildTitle >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyChangeGuildTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .Protocol.GuildTitle title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->title(), output);
  }

}

int NotifyChangeGuildTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Protocol.GuildTitle title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->title());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyChangeGuildTitle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyChangeGuildTitle*>(&from));
}

void NotifyChangeGuildTitle::MergeFrom(const NotifyChangeGuildTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void NotifyChangeGuildTitle::CopyFrom(const NotifyChangeGuildTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyChangeGuildTitle::IsInitialized() const {

  return true;
}

void NotifyChangeGuildTitle::Swap(NotifyChangeGuildTitle* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyChangeGuildTitle::GetTypeName() const {
  return "Protocol.NotifyChangeGuildTitle";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChangeGuildNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

RequestChangeGuildNotice::RequestChangeGuildNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestChangeGuildNotice::InitAsDefaultInstance() {
}

RequestChangeGuildNotice::RequestChangeGuildNotice(const RequestChangeGuildNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChangeGuildNotice::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChangeGuildNotice::~RequestChangeGuildNotice() {
  SharedDtor();
}

void RequestChangeGuildNotice::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestChangeGuildNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestChangeGuildNotice& RequestChangeGuildNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestChangeGuildNotice* RequestChangeGuildNotice::default_instance_ = NULL;

RequestChangeGuildNotice* RequestChangeGuildNotice::New() const {
  return new RequestChangeGuildNotice;
}

void RequestChangeGuildNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestChangeGuildNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChangeGuildNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

}

int RequestChangeGuildNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChangeGuildNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestChangeGuildNotice*>(&from));
}

void RequestChangeGuildNotice::MergeFrom(const RequestChangeGuildNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
}

void RequestChangeGuildNotice::CopyFrom(const RequestChangeGuildNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeGuildNotice::IsInitialized() const {

  return true;
}

void RequestChangeGuildNotice::Swap(RequestChangeGuildNotice* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestChangeGuildNotice::GetTypeName() const {
  return "Protocol.RequestChangeGuildNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyChangeGuildNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

NotifyChangeGuildNotice::NotifyChangeGuildNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyChangeGuildNotice::InitAsDefaultInstance() {
}

NotifyChangeGuildNotice::NotifyChangeGuildNotice(const NotifyChangeGuildNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyChangeGuildNotice::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyChangeGuildNotice::~NotifyChangeGuildNotice() {
  SharedDtor();
}

void NotifyChangeGuildNotice::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyChangeGuildNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyChangeGuildNotice& NotifyChangeGuildNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyChangeGuildNotice* NotifyChangeGuildNotice::default_instance_ = NULL;

NotifyChangeGuildNotice* NotifyChangeGuildNotice::New() const {
  return new NotifyChangeGuildNotice;
}

void NotifyChangeGuildNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyChangeGuildNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyChangeGuildNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

}

int NotifyChangeGuildNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyChangeGuildNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyChangeGuildNotice*>(&from));
}

void NotifyChangeGuildNotice::MergeFrom(const NotifyChangeGuildNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
}

void NotifyChangeGuildNotice::CopyFrom(const NotifyChangeGuildNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyChangeGuildNotice::IsInitialized() const {

  return true;
}

void NotifyChangeGuildNotice::Swap(NotifyChangeGuildNotice* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyChangeGuildNotice::GetTypeName() const {
  return "Protocol.NotifyChangeGuildNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChangeGuildRequire::kRequireLevelFieldNumber;
const int RequestChangeGuildRequire::kRequireVerifyFieldNumber;
#endif  // !_MSC_VER

RequestChangeGuildRequire::RequestChangeGuildRequire()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestChangeGuildRequire::InitAsDefaultInstance() {
}

RequestChangeGuildRequire::RequestChangeGuildRequire(const RequestChangeGuildRequire& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChangeGuildRequire::SharedCtor() {
  _cached_size_ = 0;
  require_level_ = 0;
  require_verify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChangeGuildRequire::~RequestChangeGuildRequire() {
  SharedDtor();
}

void RequestChangeGuildRequire::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestChangeGuildRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestChangeGuildRequire& RequestChangeGuildRequire::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestChangeGuildRequire* RequestChangeGuildRequire::default_instance_ = NULL;

RequestChangeGuildRequire* RequestChangeGuildRequire::New() const {
  return new RequestChangeGuildRequire;
}

void RequestChangeGuildRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    require_level_ = 0;
    require_verify_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestChangeGuildRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 require_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_level_)));
          set_has_require_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_require_verify;
        break;
      }

      // optional bool require_verify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_verify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_verify_)));
          set_has_require_verify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChangeGuildRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 require_level = 1;
  if (has_require_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->require_level(), output);
  }

  // optional bool require_verify = 2;
  if (has_require_verify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->require_verify(), output);
  }

}

int RequestChangeGuildRequire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 require_level = 1;
    if (has_require_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_level());
    }

    // optional bool require_verify = 2;
    if (has_require_verify()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChangeGuildRequire::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestChangeGuildRequire*>(&from));
}

void RequestChangeGuildRequire::MergeFrom(const RequestChangeGuildRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_require_level()) {
      set_require_level(from.require_level());
    }
    if (from.has_require_verify()) {
      set_require_verify(from.require_verify());
    }
  }
}

void RequestChangeGuildRequire::CopyFrom(const RequestChangeGuildRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeGuildRequire::IsInitialized() const {

  return true;
}

void RequestChangeGuildRequire::Swap(RequestChangeGuildRequire* other) {
  if (other != this) {
    std::swap(require_level_, other->require_level_);
    std::swap(require_verify_, other->require_verify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestChangeGuildRequire::GetTypeName() const {
  return "Protocol.RequestChangeGuildRequire";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseChangeGuildRequire::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseChangeGuildRequire::ResponseChangeGuildRequire()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseChangeGuildRequire::InitAsDefaultInstance() {
}

ResponseChangeGuildRequire::ResponseChangeGuildRequire(const ResponseChangeGuildRequire& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseChangeGuildRequire::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseChangeGuildRequire::~ResponseChangeGuildRequire() {
  SharedDtor();
}

void ResponseChangeGuildRequire::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseChangeGuildRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseChangeGuildRequire& ResponseChangeGuildRequire::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseChangeGuildRequire* ResponseChangeGuildRequire::default_instance_ = NULL;

ResponseChangeGuildRequire* ResponseChangeGuildRequire::New() const {
  return new ResponseChangeGuildRequire;
}

void ResponseChangeGuildRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseChangeGuildRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseChangeGuildRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseChangeGuildRequire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseChangeGuildRequire::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseChangeGuildRequire*>(&from));
}

void ResponseChangeGuildRequire::MergeFrom(const ResponseChangeGuildRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseChangeGuildRequire::CopyFrom(const ResponseChangeGuildRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChangeGuildRequire::IsInitialized() const {

  return true;
}

void ResponseChangeGuildRequire::Swap(ResponseChangeGuildRequire* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseChangeGuildRequire::GetTypeName() const {
  return "Protocol.ResponseChangeGuildRequire";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGuildMember::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGuildMember::NotifyUpdateGuildMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyUpdateGuildMember::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::Protocol::GuildMemberInfo*>(
      ::Protocol::GuildMemberInfo::internal_default_instance());
#else
  info_ = const_cast< ::Protocol::GuildMemberInfo*>(&::Protocol::GuildMemberInfo::default_instance());
#endif
}

NotifyUpdateGuildMember::NotifyUpdateGuildMember(const NotifyUpdateGuildMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUpdateGuildMember::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGuildMember::~NotifyUpdateGuildMember() {
  SharedDtor();
}

void NotifyUpdateGuildMember::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void NotifyUpdateGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyUpdateGuildMember& NotifyUpdateGuildMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyUpdateGuildMember* NotifyUpdateGuildMember::default_instance_ = NULL;

NotifyUpdateGuildMember* NotifyUpdateGuildMember::New() const {
  return new NotifyUpdateGuildMember;
}

void NotifyUpdateGuildMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Protocol::GuildMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyUpdateGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.GuildMemberInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUpdateGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.GuildMemberInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

}

int NotifyUpdateGuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.GuildMemberInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGuildMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyUpdateGuildMember*>(&from));
}

void NotifyUpdateGuildMember::MergeFrom(const NotifyUpdateGuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Protocol::GuildMemberInfo::MergeFrom(from.info());
    }
  }
}

void NotifyUpdateGuildMember::CopyFrom(const NotifyUpdateGuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGuildMember::IsInitialized() const {

  return true;
}

void NotifyUpdateGuildMember::Swap(NotifyUpdateGuildMember* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyUpdateGuildMember::GetTypeName() const {
  return "Protocol.NotifyUpdateGuildMember";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetApplyList::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGetApplyList::RequestGetApplyList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetApplyList::InitAsDefaultInstance() {
}

RequestGetApplyList::RequestGetApplyList(const RequestGetApplyList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetApplyList::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetApplyList::~RequestGetApplyList() {
  SharedDtor();
}

void RequestGetApplyList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetApplyList& RequestGetApplyList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGetApplyList* RequestGetApplyList::default_instance_ = NULL;

RequestGetApplyList* RequestGetApplyList::New() const {
  return new RequestGetApplyList;
}

void RequestGetApplyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGetApplyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetApplyList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetApplyList*>(&from));
}

void RequestGetApplyList::MergeFrom(const RequestGetApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGetApplyList::CopyFrom(const RequestGetApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetApplyList::IsInitialized() const {

  return true;
}

void RequestGetApplyList::Swap(RequestGetApplyList* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetApplyList::GetTypeName() const {
  return "Protocol.RequestGetApplyList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetApplyList::kApplyListFieldNumber;
#endif  // !_MSC_VER

ResponseGetApplyList::ResponseGetApplyList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetApplyList::InitAsDefaultInstance() {
}

ResponseGetApplyList::ResponseGetApplyList(const ResponseGetApplyList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetApplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetApplyList::~ResponseGetApplyList() {
  SharedDtor();
}

void ResponseGetApplyList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetApplyList& ResponseGetApplyList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseGetApplyList* ResponseGetApplyList::default_instance_ = NULL;

ResponseGetApplyList* ResponseGetApplyList::New() const {
  return new ResponseGetApplyList;
}

void ResponseGetApplyList::Clear() {
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.GuildApplyInfo apply_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.GuildApplyInfo apply_list = 1;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->apply_list(i), output);
  }

}

int ResponseGetApplyList::ByteSize() const {
  int total_size = 0;

  // repeated .Protocol.GuildApplyInfo apply_list = 1;
  total_size += 1 * this->apply_list_size();
  for (int i = 0; i < this->apply_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetApplyList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetApplyList*>(&from));
}

void ResponseGetApplyList::MergeFrom(const ResponseGetApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_list_.MergeFrom(from.apply_list_);
}

void ResponseGetApplyList::CopyFrom(const ResponseGetApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetApplyList::IsInitialized() const {

  return true;
}

void ResponseGetApplyList::Swap(ResponseGetApplyList* other) {
  if (other != this) {
    apply_list_.Swap(&other->apply_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetApplyList::GetTypeName() const {
  return "Protocol.ResponseGetApplyList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProcessApply::kCharidFieldNumber;
const int RequestProcessApply::kAgreeFieldNumber;
#endif  // !_MSC_VER

RequestProcessApply::RequestProcessApply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestProcessApply::InitAsDefaultInstance() {
}

RequestProcessApply::RequestProcessApply(const RequestProcessApply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProcessApply::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProcessApply::~RequestProcessApply() {
  SharedDtor();
}

void RequestProcessApply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestProcessApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestProcessApply& RequestProcessApply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestProcessApply* RequestProcessApply::default_instance_ = NULL;

RequestProcessApply* RequestProcessApply::New() const {
  return new RequestProcessApply;
}

void RequestProcessApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestProcessApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProcessApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

}

int RequestProcessApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProcessApply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestProcessApply*>(&from));
}

void RequestProcessApply::MergeFrom(const RequestProcessApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
}

void RequestProcessApply::CopyFrom(const RequestProcessApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProcessApply::IsInitialized() const {

  return true;
}

void RequestProcessApply::Swap(RequestProcessApply* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestProcessApply::GetTypeName() const {
  return "Protocol.RequestProcessApply";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateGuildInfo::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestUpdateGuildInfo::RequestUpdateGuildInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestUpdateGuildInfo::InitAsDefaultInstance() {
}

RequestUpdateGuildInfo::RequestUpdateGuildInfo(const RequestUpdateGuildInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpdateGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateGuildInfo::~RequestUpdateGuildInfo() {
  SharedDtor();
}

void RequestUpdateGuildInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUpdateGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpdateGuildInfo& RequestUpdateGuildInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestUpdateGuildInfo* RequestUpdateGuildInfo::default_instance_ = NULL;

RequestUpdateGuildInfo* RequestUpdateGuildInfo::New() const {
  return new RequestUpdateGuildInfo;
}

void RequestUpdateGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestUpdateGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpdateGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestUpdateGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateGuildInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpdateGuildInfo*>(&from));
}

void RequestUpdateGuildInfo::MergeFrom(const RequestUpdateGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestUpdateGuildInfo::CopyFrom(const RequestUpdateGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateGuildInfo::IsInitialized() const {

  return true;
}

void RequestUpdateGuildInfo::Swap(RequestUpdateGuildInfo* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpdateGuildInfo::GetTypeName() const {
  return "Protocol.RequestUpdateGuildInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateGuildInfo::kGuildInfoFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateGuildInfo::NotifyUpdateGuildInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyUpdateGuildInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guild_info_ = const_cast< ::Protocol::GuildInfo*>(
      ::Protocol::GuildInfo::internal_default_instance());
#else
  guild_info_ = const_cast< ::Protocol::GuildInfo*>(&::Protocol::GuildInfo::default_instance());
#endif
}

NotifyUpdateGuildInfo::NotifyUpdateGuildInfo(const NotifyUpdateGuildInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUpdateGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateGuildInfo::~NotifyUpdateGuildInfo() {
  SharedDtor();
}

void NotifyUpdateGuildInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guild_info_;
  }
}

void NotifyUpdateGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyUpdateGuildInfo& NotifyUpdateGuildInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyUpdateGuildInfo* NotifyUpdateGuildInfo::default_instance_ = NULL;

NotifyUpdateGuildInfo* NotifyUpdateGuildInfo::New() const {
  return new NotifyUpdateGuildInfo;
}

void NotifyUpdateGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild_info()) {
      if (guild_info_ != NULL) guild_info_->::Protocol::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyUpdateGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.GuildInfo guild_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUpdateGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.GuildInfo guild_info = 1;
  if (has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guild_info(), output);
  }

}

int NotifyUpdateGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.GuildInfo guild_info = 1;
    if (has_guild_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateGuildInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyUpdateGuildInfo*>(&from));
}

void NotifyUpdateGuildInfo::MergeFrom(const NotifyUpdateGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_info()) {
      mutable_guild_info()->::Protocol::GuildInfo::MergeFrom(from.guild_info());
    }
  }
}

void NotifyUpdateGuildInfo::CopyFrom(const NotifyUpdateGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateGuildInfo::IsInitialized() const {

  return true;
}

void NotifyUpdateGuildInfo::Swap(NotifyUpdateGuildInfo* other) {
  if (other != this) {
    std::swap(guild_info_, other->guild_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyUpdateGuildInfo::GetTypeName() const {
  return "Protocol.NotifyUpdateGuildInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGuildDonateResource::kResource1FieldNumber;
const int RequestGuildDonateResource::kResource2FieldNumber;
#endif  // !_MSC_VER

RequestGuildDonateResource::RequestGuildDonateResource()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGuildDonateResource::InitAsDefaultInstance() {
}

RequestGuildDonateResource::RequestGuildDonateResource(const RequestGuildDonateResource& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGuildDonateResource::SharedCtor() {
  _cached_size_ = 0;
  resource1_ = 0;
  resource2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGuildDonateResource::~RequestGuildDonateResource() {
  SharedDtor();
}

void RequestGuildDonateResource::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGuildDonateResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGuildDonateResource& RequestGuildDonateResource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGuildDonateResource* RequestGuildDonateResource::default_instance_ = NULL;

RequestGuildDonateResource* RequestGuildDonateResource::New() const {
  return new RequestGuildDonateResource;
}

void RequestGuildDonateResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resource1_ = 0;
    resource2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGuildDonateResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resource1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource1_)));
          set_has_resource1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource2;
        break;
      }

      // optional int32 resource2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource2_)));
          set_has_resource2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGuildDonateResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resource1 = 1;
  if (has_resource1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resource1(), output);
  }

  // optional int32 resource2 = 2;
  if (has_resource2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource2(), output);
  }

}

int RequestGuildDonateResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resource1 = 1;
    if (has_resource1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource1());
    }

    // optional int32 resource2 = 2;
    if (has_resource2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGuildDonateResource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGuildDonateResource*>(&from));
}

void RequestGuildDonateResource::MergeFrom(const RequestGuildDonateResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource1()) {
      set_resource1(from.resource1());
    }
    if (from.has_resource2()) {
      set_resource2(from.resource2());
    }
  }
}

void RequestGuildDonateResource::CopyFrom(const RequestGuildDonateResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGuildDonateResource::IsInitialized() const {

  return true;
}

void RequestGuildDonateResource::Swap(RequestGuildDonateResource* other) {
  if (other != this) {
    std::swap(resource1_, other->resource1_);
    std::swap(resource2_, other->resource2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGuildDonateResource::GetTypeName() const {
  return "Protocol.RequestGuildDonateResource";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGuildDonateResource::kResultFieldNumber;
#endif  // !_MSC_VER

NotifyGuildDonateResource::NotifyGuildDonateResource()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGuildDonateResource::InitAsDefaultInstance() {
}

NotifyGuildDonateResource::NotifyGuildDonateResource(const NotifyGuildDonateResource& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGuildDonateResource::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGuildDonateResource::~NotifyGuildDonateResource() {
  SharedDtor();
}

void NotifyGuildDonateResource::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGuildDonateResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGuildDonateResource& NotifyGuildDonateResource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGuildDonateResource* NotifyGuildDonateResource::default_instance_ = NULL;

NotifyGuildDonateResource* NotifyGuildDonateResource::New() const {
  return new NotifyGuildDonateResource;
}

void NotifyGuildDonateResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGuildDonateResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGuildDonateResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int NotifyGuildDonateResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGuildDonateResource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGuildDonateResource*>(&from));
}

void NotifyGuildDonateResource::MergeFrom(const NotifyGuildDonateResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void NotifyGuildDonateResource::CopyFrom(const NotifyGuildDonateResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGuildDonateResource::IsInitialized() const {

  return true;
}

void NotifyGuildDonateResource::Swap(NotifyGuildDonateResource* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGuildDonateResource::GetTypeName() const {
  return "Protocol.NotifyGuildDonateResource";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGuildUpgrade::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGuildUpgrade::RequestGuildUpgrade()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGuildUpgrade::InitAsDefaultInstance() {
}

RequestGuildUpgrade::RequestGuildUpgrade(const RequestGuildUpgrade& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGuildUpgrade::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGuildUpgrade::~RequestGuildUpgrade() {
  SharedDtor();
}

void RequestGuildUpgrade::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGuildUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGuildUpgrade& RequestGuildUpgrade::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGuildUpgrade* RequestGuildUpgrade::default_instance_ = NULL;

RequestGuildUpgrade* RequestGuildUpgrade::New() const {
  return new RequestGuildUpgrade;
}

void RequestGuildUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGuildUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGuildUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGuildUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGuildUpgrade::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGuildUpgrade*>(&from));
}

void RequestGuildUpgrade::MergeFrom(const RequestGuildUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGuildUpgrade::CopyFrom(const RequestGuildUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGuildUpgrade::IsInitialized() const {

  return true;
}

void RequestGuildUpgrade::Swap(RequestGuildUpgrade* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGuildUpgrade::GetTypeName() const {
  return "Protocol.RequestGuildUpgrade";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGuildUpgrade::kResultFieldNumber;
#endif  // !_MSC_VER

NotifyGuildUpgrade::NotifyGuildUpgrade()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGuildUpgrade::InitAsDefaultInstance() {
}

NotifyGuildUpgrade::NotifyGuildUpgrade(const NotifyGuildUpgrade& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGuildUpgrade::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGuildUpgrade::~NotifyGuildUpgrade() {
  SharedDtor();
}

void NotifyGuildUpgrade::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGuildUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGuildUpgrade& NotifyGuildUpgrade::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGuildUpgrade* NotifyGuildUpgrade::default_instance_ = NULL;

NotifyGuildUpgrade* NotifyGuildUpgrade::New() const {
  return new NotifyGuildUpgrade;
}

void NotifyGuildUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGuildUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGuildUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int NotifyGuildUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGuildUpgrade::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGuildUpgrade*>(&from));
}

void NotifyGuildUpgrade::MergeFrom(const NotifyGuildUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void NotifyGuildUpgrade::CopyFrom(const NotifyGuildUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGuildUpgrade::IsInitialized() const {

  return true;
}

void NotifyGuildUpgrade::Swap(NotifyGuildUpgrade* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGuildUpgrade::GetTypeName() const {
  return "Protocol.NotifyGuildUpgrade";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGuildDevelopSkill::kSkillIdFieldNumber;
const int RequestGuildDevelopSkill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

RequestGuildDevelopSkill::RequestGuildDevelopSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGuildDevelopSkill::InitAsDefaultInstance() {
}

RequestGuildDevelopSkill::RequestGuildDevelopSkill(const RequestGuildDevelopSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGuildDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGuildDevelopSkill::~RequestGuildDevelopSkill() {
  SharedDtor();
}

void RequestGuildDevelopSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGuildDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGuildDevelopSkill& RequestGuildDevelopSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGuildDevelopSkill* RequestGuildDevelopSkill::default_instance_ = NULL;

RequestGuildDevelopSkill* RequestGuildDevelopSkill::New() const {
  return new RequestGuildDevelopSkill;
}

void RequestGuildDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGuildDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGuildDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

}

int RequestGuildDevelopSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGuildDevelopSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGuildDevelopSkill*>(&from));
}

void RequestGuildDevelopSkill::MergeFrom(const RequestGuildDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
}

void RequestGuildDevelopSkill::CopyFrom(const RequestGuildDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGuildDevelopSkill::IsInitialized() const {

  return true;
}

void RequestGuildDevelopSkill::Swap(RequestGuildDevelopSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGuildDevelopSkill::GetTypeName() const {
  return "Protocol.RequestGuildDevelopSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGuildDevelopSkill::kResultFieldNumber;
const int NotifyGuildDevelopSkill::kSkillIdFieldNumber;
const int NotifyGuildDevelopSkill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

NotifyGuildDevelopSkill::NotifyGuildDevelopSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGuildDevelopSkill::InitAsDefaultInstance() {
}

NotifyGuildDevelopSkill::NotifyGuildDevelopSkill(const NotifyGuildDevelopSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGuildDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGuildDevelopSkill::~NotifyGuildDevelopSkill() {
  SharedDtor();
}

void NotifyGuildDevelopSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGuildDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGuildDevelopSkill& NotifyGuildDevelopSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGuildDevelopSkill* NotifyGuildDevelopSkill::default_instance_ = NULL;

NotifyGuildDevelopSkill* NotifyGuildDevelopSkill::New() const {
  return new NotifyGuildDevelopSkill;
}

void NotifyGuildDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGuildDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGuildDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // optional int32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_level(), output);
  }

}

int NotifyGuildDevelopSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGuildDevelopSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGuildDevelopSkill*>(&from));
}

void NotifyGuildDevelopSkill::MergeFrom(const NotifyGuildDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
}

void NotifyGuildDevelopSkill::CopyFrom(const NotifyGuildDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGuildDevelopSkill::IsInitialized() const {

  return true;
}

void NotifyGuildDevelopSkill::Swap(NotifyGuildDevelopSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGuildDevelopSkill::GetTypeName() const {
  return "Protocol.NotifyGuildDevelopSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGuildLearnSkill::kSkillIdFieldNumber;
const int RequestGuildLearnSkill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

RequestGuildLearnSkill::RequestGuildLearnSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGuildLearnSkill::InitAsDefaultInstance() {
}

RequestGuildLearnSkill::RequestGuildLearnSkill(const RequestGuildLearnSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGuildLearnSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGuildLearnSkill::~RequestGuildLearnSkill() {
  SharedDtor();
}

void RequestGuildLearnSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGuildLearnSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGuildLearnSkill& RequestGuildLearnSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGuildLearnSkill* RequestGuildLearnSkill::default_instance_ = NULL;

RequestGuildLearnSkill* RequestGuildLearnSkill::New() const {
  return new RequestGuildLearnSkill;
}

void RequestGuildLearnSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGuildLearnSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGuildLearnSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

}

int RequestGuildLearnSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGuildLearnSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGuildLearnSkill*>(&from));
}

void RequestGuildLearnSkill::MergeFrom(const RequestGuildLearnSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
}

void RequestGuildLearnSkill::CopyFrom(const RequestGuildLearnSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGuildLearnSkill::IsInitialized() const {

  return true;
}

void RequestGuildLearnSkill::Swap(RequestGuildLearnSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGuildLearnSkill::GetTypeName() const {
  return "Protocol.RequestGuildLearnSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGuildLearnSkill::kResultFieldNumber;
const int ResponseGuildLearnSkill::kSkillIdFieldNumber;
const int ResponseGuildLearnSkill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

ResponseGuildLearnSkill::ResponseGuildLearnSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGuildLearnSkill::InitAsDefaultInstance() {
}

ResponseGuildLearnSkill::ResponseGuildLearnSkill(const ResponseGuildLearnSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGuildLearnSkill::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGuildLearnSkill::~ResponseGuildLearnSkill() {
  SharedDtor();
}

void ResponseGuildLearnSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGuildLearnSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGuildLearnSkill& ResponseGuildLearnSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

ResponseGuildLearnSkill* ResponseGuildLearnSkill::default_instance_ = NULL;

ResponseGuildLearnSkill* ResponseGuildLearnSkill::New() const {
  return new ResponseGuildLearnSkill;
}

void ResponseGuildLearnSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGuildLearnSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGuildLearnSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // optional int32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_level(), output);
  }

}

int ResponseGuildLearnSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGuildLearnSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGuildLearnSkill*>(&from));
}

void ResponseGuildLearnSkill::MergeFrom(const ResponseGuildLearnSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
}

void ResponseGuildLearnSkill::CopyFrom(const ResponseGuildLearnSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGuildLearnSkill::IsInitialized() const {

  return true;
}

void ResponseGuildLearnSkill::Swap(ResponseGuildLearnSkill* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGuildLearnSkill::GetTypeName() const {
  return "Protocol.ResponseGuildLearnSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetGuildSkill::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGetGuildSkill::RequestGetGuildSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetGuildSkill::InitAsDefaultInstance() {
}

RequestGetGuildSkill::RequestGetGuildSkill(const RequestGetGuildSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetGuildSkill::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetGuildSkill::~RequestGetGuildSkill() {
  SharedDtor();
}

void RequestGetGuildSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetGuildSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetGuildSkill& RequestGetGuildSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

RequestGetGuildSkill* RequestGetGuildSkill::default_instance_ = NULL;

RequestGetGuildSkill* RequestGetGuildSkill::New() const {
  return new RequestGetGuildSkill;
}

void RequestGetGuildSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetGuildSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetGuildSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGetGuildSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetGuildSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetGuildSkill*>(&from));
}

void RequestGetGuildSkill::MergeFrom(const RequestGetGuildSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGetGuildSkill::CopyFrom(const RequestGetGuildSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetGuildSkill::IsInitialized() const {

  return true;
}

void RequestGetGuildSkill::Swap(RequestGetGuildSkill* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetGuildSkill::GetTypeName() const {
  return "Protocol.RequestGetGuildSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGetGuildSkill::kSkillListFieldNumber;
#endif  // !_MSC_VER

NotifyGetGuildSkill::NotifyGetGuildSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGetGuildSkill::InitAsDefaultInstance() {
}

NotifyGetGuildSkill::NotifyGetGuildSkill(const NotifyGetGuildSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGetGuildSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGetGuildSkill::~NotifyGetGuildSkill() {
  SharedDtor();
}

void NotifyGetGuildSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGetGuildSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGetGuildSkill& NotifyGetGuildSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGuild_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGuild_2eproto();
#endif
  return *default_instance_;
}

NotifyGetGuildSkill* NotifyGetGuildSkill::default_instance_ = NULL;

NotifyGetGuildSkill* NotifyGetGuildSkill::New() const {
  return new NotifyGetGuildSkill;
}

void NotifyGetGuildSkill::Clear() {
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGetGuildSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.GuildSkillData skill_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGetGuildSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.GuildSkillData skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->skill_list(i), output);
  }

}

int NotifyGetGuildSkill::ByteSize() const {
  int total_size = 0;

  // repeated .Protocol.GuildSkillData skill_list = 1;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGetGuildSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGetGuildSkill*>(&from));
}

void NotifyGetGuildSkill::MergeFrom(const NotifyGetGuildSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
}

void NotifyGetGuildSkill::CopyFrom(const NotifyGetGuildSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGetGuildSkill::IsInitialized() const {

  return true;
}

void NotifyGetGuildSkill::Swap(NotifyGetGuildSkill* other) {
  if (other != this) {
    skill_list_.Swap(&other->skill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGetGuildSkill::GetTypeName() const {
  return "Protocol.NotifyGetGuildSkill";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
