// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoScript.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoScript.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoScript_2eproto() {
  delete NpcDlgOption::default_instance_;
  delete RequestOpenNpcDialog::default_instance_;
  delete RequestChooseAnswer::default_instance_;
  delete NotifyUpdateNpcDialog::default_instance_;
  delete NotifyCloseNpcDialog::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoScript_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoScript_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  NpcDlgOption::default_instance_ = new NpcDlgOption();
  RequestOpenNpcDialog::default_instance_ = new RequestOpenNpcDialog();
  RequestChooseAnswer::default_instance_ = new RequestChooseAnswer();
  NotifyUpdateNpcDialog::default_instance_ = new NotifyUpdateNpcDialog();
  NotifyCloseNpcDialog::default_instance_ = new NotifyCloseNpcDialog();
  NpcDlgOption::default_instance_->InitAsDefaultInstance();
  RequestOpenNpcDialog::default_instance_->InitAsDefaultInstance();
  RequestChooseAnswer::default_instance_->InitAsDefaultInstance();
  NotifyUpdateNpcDialog::default_instance_->InitAsDefaultInstance();
  NotifyCloseNpcDialog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoScript_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoScript_2eproto_once_);
void protobuf_AddDesc_ProtoScript_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoScript_2eproto_once_,
                 &protobuf_AddDesc_ProtoScript_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoScript_2eproto {
  StaticDescriptorInitializer_ProtoScript_2eproto() {
    protobuf_AddDesc_ProtoScript_2eproto();
  }
} static_descriptor_initializer_ProtoScript_2eproto_;
#endif
bool ScriptOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDlgOption::kTextFieldNumber;
const int NpcDlgOption::kIconFieldNumber;
#endif  // !_MSC_VER

NpcDlgOption::NpcDlgOption()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NpcDlgOption::InitAsDefaultInstance() {
}

NpcDlgOption::NpcDlgOption(const NpcDlgOption& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NpcDlgOption::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDlgOption::~NpcDlgOption() {
  SharedDtor();
}

void NpcDlgOption::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NpcDlgOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NpcDlgOption& NpcDlgOption::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoScript_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScript_2eproto();
#endif
  return *default_instance_;
}

NpcDlgOption* NpcDlgOption::default_instance_ = NULL;

NpcDlgOption* NpcDlgOption::New() const {
  return new NpcDlgOption;
}

void NpcDlgOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NpcDlgOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcDlgOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }

}

int NpcDlgOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDlgOption::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NpcDlgOption*>(&from));
}

void NpcDlgOption::MergeFrom(const NpcDlgOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
}

void NpcDlgOption::CopyFrom(const NpcDlgOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcDlgOption::IsInitialized() const {

  return true;
}

void NpcDlgOption::Swap(NpcDlgOption* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NpcDlgOption::GetTypeName() const {
  return "Protocol.NpcDlgOption";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOpenNpcDialog::kNpcUidFieldNumber;
#endif  // !_MSC_VER

RequestOpenNpcDialog::RequestOpenNpcDialog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestOpenNpcDialog::InitAsDefaultInstance() {
}

RequestOpenNpcDialog::RequestOpenNpcDialog(const RequestOpenNpcDialog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestOpenNpcDialog::SharedCtor() {
  _cached_size_ = 0;
  npc_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOpenNpcDialog::~RequestOpenNpcDialog() {
  SharedDtor();
}

void RequestOpenNpcDialog::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestOpenNpcDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestOpenNpcDialog& RequestOpenNpcDialog::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoScript_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScript_2eproto();
#endif
  return *default_instance_;
}

RequestOpenNpcDialog* RequestOpenNpcDialog::default_instance_ = NULL;

RequestOpenNpcDialog* RequestOpenNpcDialog::New() const {
  return new RequestOpenNpcDialog;
}

void RequestOpenNpcDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestOpenNpcDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_uid_)));
          set_has_npc_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestOpenNpcDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_uid = 1;
  if (has_npc_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_uid(), output);
  }

}

int RequestOpenNpcDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_uid = 1;
    if (has_npc_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_uid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOpenNpcDialog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestOpenNpcDialog*>(&from));
}

void RequestOpenNpcDialog::MergeFrom(const RequestOpenNpcDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_uid()) {
      set_npc_uid(from.npc_uid());
    }
  }
}

void RequestOpenNpcDialog::CopyFrom(const RequestOpenNpcDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOpenNpcDialog::IsInitialized() const {

  return true;
}

void RequestOpenNpcDialog::Swap(RequestOpenNpcDialog* other) {
  if (other != this) {
    std::swap(npc_uid_, other->npc_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestOpenNpcDialog::GetTypeName() const {
  return "Protocol.RequestOpenNpcDialog";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChooseAnswer::kAnswerIndexFieldNumber;
#endif  // !_MSC_VER

RequestChooseAnswer::RequestChooseAnswer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestChooseAnswer::InitAsDefaultInstance() {
}

RequestChooseAnswer::RequestChooseAnswer(const RequestChooseAnswer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChooseAnswer::SharedCtor() {
  _cached_size_ = 0;
  answer_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChooseAnswer::~RequestChooseAnswer() {
  SharedDtor();
}

void RequestChooseAnswer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestChooseAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestChooseAnswer& RequestChooseAnswer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoScript_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScript_2eproto();
#endif
  return *default_instance_;
}

RequestChooseAnswer* RequestChooseAnswer::default_instance_ = NULL;

RequestChooseAnswer* RequestChooseAnswer::New() const {
  return new RequestChooseAnswer;
}

void RequestChooseAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestChooseAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 answer_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_index_)));
          set_has_answer_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChooseAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 answer_index = 1;
  if (has_answer_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->answer_index(), output);
  }

}

int RequestChooseAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 answer_index = 1;
    if (has_answer_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChooseAnswer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestChooseAnswer*>(&from));
}

void RequestChooseAnswer::MergeFrom(const RequestChooseAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer_index()) {
      set_answer_index(from.answer_index());
    }
  }
}

void RequestChooseAnswer::CopyFrom(const RequestChooseAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChooseAnswer::IsInitialized() const {

  return true;
}

void RequestChooseAnswer::Swap(RequestChooseAnswer* other) {
  if (other != this) {
    std::swap(answer_index_, other->answer_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestChooseAnswer::GetTypeName() const {
  return "Protocol.RequestChooseAnswer";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateNpcDialog::kContentFieldNumber;
const int NotifyUpdateNpcDialog::kOptionsFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateNpcDialog::NotifyUpdateNpcDialog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyUpdateNpcDialog::InitAsDefaultInstance() {
}

NotifyUpdateNpcDialog::NotifyUpdateNpcDialog(const NotifyUpdateNpcDialog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUpdateNpcDialog::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateNpcDialog::~NotifyUpdateNpcDialog() {
  SharedDtor();
}

void NotifyUpdateNpcDialog::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyUpdateNpcDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyUpdateNpcDialog& NotifyUpdateNpcDialog::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoScript_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScript_2eproto();
#endif
  return *default_instance_;
}

NotifyUpdateNpcDialog* NotifyUpdateNpcDialog::default_instance_ = NULL;

NotifyUpdateNpcDialog* NotifyUpdateNpcDialog::New() const {
  return new NotifyUpdateNpcDialog;
}

void NotifyUpdateNpcDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyUpdateNpcDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // repeated .Protocol.NpcDlgOption options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUpdateNpcDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // repeated .Protocol.NpcDlgOption options = 2;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->options(i), output);
  }

}

int NotifyUpdateNpcDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated .Protocol.NpcDlgOption options = 2;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateNpcDialog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyUpdateNpcDialog*>(&from));
}

void NotifyUpdateNpcDialog::MergeFrom(const NotifyUpdateNpcDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void NotifyUpdateNpcDialog::CopyFrom(const NotifyUpdateNpcDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateNpcDialog::IsInitialized() const {

  return true;
}

void NotifyUpdateNpcDialog::Swap(NotifyUpdateNpcDialog* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyUpdateNpcDialog::GetTypeName() const {
  return "Protocol.NotifyUpdateNpcDialog";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCloseNpcDialog::kNpcUidFieldNumber;
#endif  // !_MSC_VER

NotifyCloseNpcDialog::NotifyCloseNpcDialog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyCloseNpcDialog::InitAsDefaultInstance() {
}

NotifyCloseNpcDialog::NotifyCloseNpcDialog(const NotifyCloseNpcDialog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCloseNpcDialog::SharedCtor() {
  _cached_size_ = 0;
  npc_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCloseNpcDialog::~NotifyCloseNpcDialog() {
  SharedDtor();
}

void NotifyCloseNpcDialog::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyCloseNpcDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyCloseNpcDialog& NotifyCloseNpcDialog::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoScript_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScript_2eproto();
#endif
  return *default_instance_;
}

NotifyCloseNpcDialog* NotifyCloseNpcDialog::default_instance_ = NULL;

NotifyCloseNpcDialog* NotifyCloseNpcDialog::New() const {
  return new NotifyCloseNpcDialog;
}

void NotifyCloseNpcDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyCloseNpcDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_uid_)));
          set_has_npc_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCloseNpcDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_uid = 1;
  if (has_npc_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_uid(), output);
  }

}

int NotifyCloseNpcDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_uid = 1;
    if (has_npc_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_uid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCloseNpcDialog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyCloseNpcDialog*>(&from));
}

void NotifyCloseNpcDialog::MergeFrom(const NotifyCloseNpcDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_uid()) {
      set_npc_uid(from.npc_uid());
    }
  }
}

void NotifyCloseNpcDialog::CopyFrom(const NotifyCloseNpcDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCloseNpcDialog::IsInitialized() const {

  return true;
}

void NotifyCloseNpcDialog::Swap(NotifyCloseNpcDialog* other) {
  if (other != this) {
    std::swap(npc_uid_, other->npc_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyCloseNpcDialog::GetTypeName() const {
  return "Protocol.NotifyCloseNpcDialog";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
