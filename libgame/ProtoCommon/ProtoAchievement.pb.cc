// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAchievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAchievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoAchievement_2eproto() {
  delete RequestGetAchievementList::default_instance_;
  delete ResponseGetAchievementList::default_instance_;
  delete RequestTakeAchievementAward::default_instance_;
  delete ResponseTakeAchievementAward::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoAchievement_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoAchievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  RequestGetAchievementList::default_instance_ = new RequestGetAchievementList();
  ResponseGetAchievementList::default_instance_ = new ResponseGetAchievementList();
  RequestTakeAchievementAward::default_instance_ = new RequestTakeAchievementAward();
  ResponseTakeAchievementAward::default_instance_ = new ResponseTakeAchievementAward();
  RequestGetAchievementList::default_instance_->InitAsDefaultInstance();
  ResponseGetAchievementList::default_instance_->InitAsDefaultInstance();
  RequestTakeAchievementAward::default_instance_->InitAsDefaultInstance();
  ResponseTakeAchievementAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAchievement_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoAchievement_2eproto_once_);
void protobuf_AddDesc_ProtoAchievement_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoAchievement_2eproto_once_,
                 &protobuf_AddDesc_ProtoAchievement_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAchievement_2eproto {
  StaticDescriptorInitializer_ProtoAchievement_2eproto() {
    protobuf_AddDesc_ProtoAchievement_2eproto();
  }
} static_descriptor_initializer_ProtoAchievement_2eproto_;
#endif
bool AchievementOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetAchievementList::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGetAchievementList::RequestGetAchievementList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetAchievementList::InitAsDefaultInstance() {
}

RequestGetAchievementList::RequestGetAchievementList(const RequestGetAchievementList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetAchievementList::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetAchievementList::~RequestGetAchievementList() {
  SharedDtor();
}

void RequestGetAchievementList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetAchievementList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetAchievementList& RequestGetAchievementList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoAchievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
#endif
  return *default_instance_;
}

RequestGetAchievementList* RequestGetAchievementList::default_instance_ = NULL;

RequestGetAchievementList* RequestGetAchievementList::New() const {
  return new RequestGetAchievementList;
}

void RequestGetAchievementList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetAchievementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetAchievementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGetAchievementList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetAchievementList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetAchievementList*>(&from));
}

void RequestGetAchievementList::MergeFrom(const RequestGetAchievementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGetAchievementList::CopyFrom(const RequestGetAchievementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetAchievementList::IsInitialized() const {

  return true;
}

void RequestGetAchievementList::Swap(RequestGetAchievementList* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetAchievementList::GetTypeName() const {
  return "Protocol.RequestGetAchievementList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetAchievementList::kAchievementsFieldNumber;
#endif  // !_MSC_VER

ResponseGetAchievementList::ResponseGetAchievementList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetAchievementList::InitAsDefaultInstance() {
}

ResponseGetAchievementList::ResponseGetAchievementList(const ResponseGetAchievementList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetAchievementList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetAchievementList::~ResponseGetAchievementList() {
  SharedDtor();
}

void ResponseGetAchievementList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetAchievementList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetAchievementList& ResponseGetAchievementList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoAchievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
#endif
  return *default_instance_;
}

ResponseGetAchievementList* ResponseGetAchievementList::default_instance_ = NULL;

ResponseGetAchievementList* ResponseGetAchievementList::New() const {
  return new ResponseGetAchievementList;
}

void ResponseGetAchievementList::Clear() {
  achievements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetAchievementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AchievementData achievements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetAchievementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AchievementData achievements = 1;
  for (int i = 0; i < this->achievements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->achievements(i), output);
  }

}

int ResponseGetAchievementList::ByteSize() const {
  int total_size = 0;

  // repeated .AchievementData achievements = 1;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetAchievementList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetAchievementList*>(&from));
}

void ResponseGetAchievementList::MergeFrom(const ResponseGetAchievementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievements_.MergeFrom(from.achievements_);
}

void ResponseGetAchievementList::CopyFrom(const ResponseGetAchievementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetAchievementList::IsInitialized() const {

  return true;
}

void ResponseGetAchievementList::Swap(ResponseGetAchievementList* other) {
  if (other != this) {
    achievements_.Swap(&other->achievements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetAchievementList::GetTypeName() const {
  return "Protocol.ResponseGetAchievementList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTakeAchievementAward::kIdFieldNumber;
#endif  // !_MSC_VER

RequestTakeAchievementAward::RequestTakeAchievementAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTakeAchievementAward::InitAsDefaultInstance() {
}

RequestTakeAchievementAward::RequestTakeAchievementAward(const RequestTakeAchievementAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTakeAchievementAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTakeAchievementAward::~RequestTakeAchievementAward() {
  SharedDtor();
}

void RequestTakeAchievementAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTakeAchievementAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTakeAchievementAward& RequestTakeAchievementAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoAchievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
#endif
  return *default_instance_;
}

RequestTakeAchievementAward* RequestTakeAchievementAward::default_instance_ = NULL;

RequestTakeAchievementAward* RequestTakeAchievementAward::New() const {
  return new RequestTakeAchievementAward;
}

void RequestTakeAchievementAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTakeAchievementAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTakeAchievementAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

}

int RequestTakeAchievementAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTakeAchievementAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTakeAchievementAward*>(&from));
}

void RequestTakeAchievementAward::MergeFrom(const RequestTakeAchievementAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void RequestTakeAchievementAward::CopyFrom(const RequestTakeAchievementAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTakeAchievementAward::IsInitialized() const {

  return true;
}

void RequestTakeAchievementAward::Swap(RequestTakeAchievementAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTakeAchievementAward::GetTypeName() const {
  return "Protocol.RequestTakeAchievementAward";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTakeAchievementAward::kIdFieldNumber;
#endif  // !_MSC_VER

ResponseTakeAchievementAward::ResponseTakeAchievementAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseTakeAchievementAward::InitAsDefaultInstance() {
}

ResponseTakeAchievementAward::ResponseTakeAchievementAward(const ResponseTakeAchievementAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTakeAchievementAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTakeAchievementAward::~ResponseTakeAchievementAward() {
  SharedDtor();
}

void ResponseTakeAchievementAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseTakeAchievementAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseTakeAchievementAward& ResponseTakeAchievementAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoAchievement_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
#endif
  return *default_instance_;
}

ResponseTakeAchievementAward* ResponseTakeAchievementAward::default_instance_ = NULL;

ResponseTakeAchievementAward* ResponseTakeAchievementAward::New() const {
  return new ResponseTakeAchievementAward;
}

void ResponseTakeAchievementAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseTakeAchievementAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTakeAchievementAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

}

int ResponseTakeAchievementAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTakeAchievementAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseTakeAchievementAward*>(&from));
}

void ResponseTakeAchievementAward::MergeFrom(const ResponseTakeAchievementAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void ResponseTakeAchievementAward::CopyFrom(const ResponseTakeAchievementAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTakeAchievementAward::IsInitialized() const {

  return true;
}

void ResponseTakeAchievementAward::Swap(ResponseTakeAchievementAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseTakeAchievementAward::GetTypeName() const {
  return "Protocol.ResponseTakeAchievementAward";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
