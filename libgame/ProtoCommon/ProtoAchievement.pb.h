// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAchievement.proto

#ifndef PROTOBUF_ProtoAchievement_2eproto__INCLUDED
#define PROTOBUF_ProtoAchievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoGameData.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoAchievement_2eproto();
void protobuf_AssignDesc_ProtoAchievement_2eproto();
void protobuf_ShutdownFile_ProtoAchievement_2eproto();

class RequestGetAchievementList;
class ResponseGetAchievementList;
class RequestTakeAchievementAward;
class ResponseTakeAchievementAward;

enum AchievementOpCode {
  OP_ACHIEVE_GET_LIST = 1,
  OP_ACHIEVE_TAKE_AWARD = 2
};
bool AchievementOpCode_IsValid(int value);
const AchievementOpCode AchievementOpCode_MIN = OP_ACHIEVE_GET_LIST;
const AchievementOpCode AchievementOpCode_MAX = OP_ACHIEVE_TAKE_AWARD;
const int AchievementOpCode_ARRAYSIZE = AchievementOpCode_MAX + 1;

// ===================================================================

class RequestGetAchievementList : public ::google::protobuf::MessageLite {
 public:
  RequestGetAchievementList();
  virtual ~RequestGetAchievementList();

  RequestGetAchievementList(const RequestGetAchievementList& from);

  inline RequestGetAchievementList& operator=(const RequestGetAchievementList& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestGetAchievementList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestGetAchievementList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestGetAchievementList* other);

  // implements Message ----------------------------------------------

  RequestGetAchievementList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestGetAchievementList& from);
  void MergeFrom(const RequestGetAchievementList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestGetAchievementList)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();

  ::google::protobuf::int32 reserve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static RequestGetAchievementList* default_instance_;
};
// -------------------------------------------------------------------

class ResponseGetAchievementList : public ::google::protobuf::MessageLite {
 public:
  ResponseGetAchievementList();
  virtual ~ResponseGetAchievementList();

  ResponseGetAchievementList(const ResponseGetAchievementList& from);

  inline ResponseGetAchievementList& operator=(const ResponseGetAchievementList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseGetAchievementList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseGetAchievementList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseGetAchievementList* other);

  // implements Message ----------------------------------------------

  ResponseGetAchievementList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseGetAchievementList& from);
  void MergeFrom(const ResponseGetAchievementList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AchievementData achievements = 1;
  inline int achievements_size() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 1;
  inline const ::AchievementData& achievements(int index) const;
  inline ::AchievementData* mutable_achievements(int index);
  inline ::AchievementData* add_achievements();
  inline const ::google::protobuf::RepeatedPtrField< ::AchievementData >&
      achievements() const;
  inline ::google::protobuf::RepeatedPtrField< ::AchievementData >*
      mutable_achievements();

  // @@protoc_insertion_point(class_scope:Protocol.ResponseGetAchievementList)
 private:

  ::google::protobuf::RepeatedPtrField< ::AchievementData > achievements_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static ResponseGetAchievementList* default_instance_;
};
// -------------------------------------------------------------------

class RequestTakeAchievementAward : public ::google::protobuf::MessageLite {
 public:
  RequestTakeAchievementAward();
  virtual ~RequestTakeAchievementAward();

  RequestTakeAchievementAward(const RequestTakeAchievementAward& from);

  inline RequestTakeAchievementAward& operator=(const RequestTakeAchievementAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestTakeAchievementAward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestTakeAchievementAward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestTakeAchievementAward* other);

  // implements Message ----------------------------------------------

  RequestTakeAchievementAward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestTakeAchievementAward& from);
  void MergeFrom(const RequestTakeAchievementAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestTakeAchievementAward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static RequestTakeAchievementAward* default_instance_;
};
// -------------------------------------------------------------------

class ResponseTakeAchievementAward : public ::google::protobuf::MessageLite {
 public:
  ResponseTakeAchievementAward();
  virtual ~ResponseTakeAchievementAward();

  ResponseTakeAchievementAward(const ResponseTakeAchievementAward& from);

  inline ResponseTakeAchievementAward& operator=(const ResponseTakeAchievementAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseTakeAchievementAward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseTakeAchievementAward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseTakeAchievementAward* other);

  // implements Message ----------------------------------------------

  ResponseTakeAchievementAward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseTakeAchievementAward& from);
  void MergeFrom(const ResponseTakeAchievementAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseTakeAchievementAward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoAchievement_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoAchievement_2eproto();

  void InitAsDefaultInstance();
  static ResponseTakeAchievementAward* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestGetAchievementList

// optional int32 reserve = 1;
inline bool RequestGetAchievementList::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestGetAchievementList::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestGetAchievementList::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestGetAchievementList::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 RequestGetAchievementList::reserve() const {
  return reserve_;
}
inline void RequestGetAchievementList::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// ResponseGetAchievementList

// repeated .AchievementData achievements = 1;
inline int ResponseGetAchievementList::achievements_size() const {
  return achievements_.size();
}
inline void ResponseGetAchievementList::clear_achievements() {
  achievements_.Clear();
}
inline const ::AchievementData& ResponseGetAchievementList::achievements(int index) const {
  return achievements_.Get(index);
}
inline ::AchievementData* ResponseGetAchievementList::mutable_achievements(int index) {
  return achievements_.Mutable(index);
}
inline ::AchievementData* ResponseGetAchievementList::add_achievements() {
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AchievementData >&
ResponseGetAchievementList::achievements() const {
  return achievements_;
}
inline ::google::protobuf::RepeatedPtrField< ::AchievementData >*
ResponseGetAchievementList::mutable_achievements() {
  return &achievements_;
}

// -------------------------------------------------------------------

// RequestTakeAchievementAward

// optional int32 id = 1;
inline bool RequestTakeAchievementAward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestTakeAchievementAward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestTakeAchievementAward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestTakeAchievementAward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RequestTakeAchievementAward::id() const {
  return id_;
}
inline void RequestTakeAchievementAward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ResponseTakeAchievementAward

// optional int32 id = 1;
inline bool ResponseTakeAchievementAward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseTakeAchievementAward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseTakeAchievementAward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseTakeAchievementAward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ResponseTakeAchievementAward::id() const {
  return id_;
}
inline void ResponseTakeAchievementAward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoAchievement_2eproto__INCLUDED
