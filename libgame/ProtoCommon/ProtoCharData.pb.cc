// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCharData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCharData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoCharData_2eproto() {
  delete RequestCheckPing::default_instance_;
  delete ResponseCheckPing::default_instance_;
  delete RequestStartGame::default_instance_;
  delete ResponseStartGame::default_instance_;
  delete NotifyUpdateProperty::default_instance_;
  delete RequestUseLvupPoint::default_instance_;
  delete ResponseUseLvupPoint::default_instance_;
  delete RequestRecharge::default_instance_;
  delete RequestSetShortcutKey::default_instance_;
  delete RequestLookCharEquip::default_instance_;
  delete ResponseLookCharEquip::default_instance_;
  delete RequestTakeVipAward::default_instance_;
  delete ResponseTakeVipAward::default_instance_;
  delete RequestSaveSetting::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoCharData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoCharData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  RequestCheckPing::default_instance_ = new RequestCheckPing();
  ResponseCheckPing::default_instance_ = new ResponseCheckPing();
  RequestStartGame::default_instance_ = new RequestStartGame();
  ResponseStartGame::default_instance_ = new ResponseStartGame();
  NotifyUpdateProperty::default_instance_ = new NotifyUpdateProperty();
  RequestUseLvupPoint::default_instance_ = new RequestUseLvupPoint();
  ResponseUseLvupPoint::default_instance_ = new ResponseUseLvupPoint();
  RequestRecharge::default_instance_ = new RequestRecharge();
  RequestSetShortcutKey::default_instance_ = new RequestSetShortcutKey();
  RequestLookCharEquip::default_instance_ = new RequestLookCharEquip();
  ResponseLookCharEquip::default_instance_ = new ResponseLookCharEquip();
  RequestTakeVipAward::default_instance_ = new RequestTakeVipAward();
  ResponseTakeVipAward::default_instance_ = new ResponseTakeVipAward();
  RequestSaveSetting::default_instance_ = new RequestSaveSetting();
  RequestCheckPing::default_instance_->InitAsDefaultInstance();
  ResponseCheckPing::default_instance_->InitAsDefaultInstance();
  RequestStartGame::default_instance_->InitAsDefaultInstance();
  ResponseStartGame::default_instance_->InitAsDefaultInstance();
  NotifyUpdateProperty::default_instance_->InitAsDefaultInstance();
  RequestUseLvupPoint::default_instance_->InitAsDefaultInstance();
  ResponseUseLvupPoint::default_instance_->InitAsDefaultInstance();
  RequestRecharge::default_instance_->InitAsDefaultInstance();
  RequestSetShortcutKey::default_instance_->InitAsDefaultInstance();
  RequestLookCharEquip::default_instance_->InitAsDefaultInstance();
  ResponseLookCharEquip::default_instance_->InitAsDefaultInstance();
  RequestTakeVipAward::default_instance_->InitAsDefaultInstance();
  ResponseTakeVipAward::default_instance_->InitAsDefaultInstance();
  RequestSaveSetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCharData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoCharData_2eproto_once_);
void protobuf_AddDesc_ProtoCharData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoCharData_2eproto_once_,
                 &protobuf_AddDesc_ProtoCharData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCharData_2eproto {
  StaticDescriptorInitializer_ProtoCharData_2eproto() {
    protobuf_AddDesc_ProtoCharData_2eproto();
  }
} static_descriptor_initializer_ProtoCharData_2eproto_;
#endif
bool CharDataOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCheckPing::kTimestampFieldNumber;
#endif  // !_MSC_VER

RequestCheckPing::RequestCheckPing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestCheckPing::InitAsDefaultInstance() {
}

RequestCheckPing::RequestCheckPing(const RequestCheckPing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCheckPing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCheckPing::~RequestCheckPing() {
  SharedDtor();
}

void RequestCheckPing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestCheckPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestCheckPing& RequestCheckPing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestCheckPing* RequestCheckPing::default_instance_ = NULL;

RequestCheckPing* RequestCheckPing::New() const {
  return new RequestCheckPing;
}

void RequestCheckPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestCheckPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCheckPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

}

int RequestCheckPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckPing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCheckPing*>(&from));
}

void RequestCheckPing::MergeFrom(const RequestCheckPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void RequestCheckPing::CopyFrom(const RequestCheckPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckPing::IsInitialized() const {

  return true;
}

void RequestCheckPing::Swap(RequestCheckPing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestCheckPing::GetTypeName() const {
  return "Protocol.RequestCheckPing";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCheckPing::kTimestampFieldNumber;
#endif  // !_MSC_VER

ResponseCheckPing::ResponseCheckPing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseCheckPing::InitAsDefaultInstance() {
}

ResponseCheckPing::ResponseCheckPing(const ResponseCheckPing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCheckPing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCheckPing::~ResponseCheckPing() {
  SharedDtor();
}

void ResponseCheckPing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseCheckPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseCheckPing& ResponseCheckPing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

ResponseCheckPing* ResponseCheckPing::default_instance_ = NULL;

ResponseCheckPing* ResponseCheckPing::New() const {
  return new ResponseCheckPing;
}

void ResponseCheckPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseCheckPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCheckPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

}

int ResponseCheckPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCheckPing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCheckPing*>(&from));
}

void ResponseCheckPing::MergeFrom(const ResponseCheckPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void ResponseCheckPing::CopyFrom(const ResponseCheckPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckPing::IsInitialized() const {

  return true;
}

void ResponseCheckPing::Swap(ResponseCheckPing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseCheckPing::GetTypeName() const {
  return "Protocol.ResponseCheckPing";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStartGame::kTimestampFieldNumber;
#endif  // !_MSC_VER

RequestStartGame::RequestStartGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestStartGame::InitAsDefaultInstance() {
}

RequestStartGame::RequestStartGame(const RequestStartGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStartGame::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStartGame::~RequestStartGame() {
  SharedDtor();
}

void RequestStartGame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestStartGame& RequestStartGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestStartGame* RequestStartGame::default_instance_ = NULL;

RequestStartGame* RequestStartGame::New() const {
  return new RequestStartGame;
}

void RequestStartGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

}

int RequestStartGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestStartGame*>(&from));
}

void RequestStartGame::MergeFrom(const RequestStartGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void RequestStartGame::CopyFrom(const RequestStartGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartGame::IsInitialized() const {

  return true;
}

void RequestStartGame::Swap(RequestStartGame* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestStartGame::GetTypeName() const {
  return "Protocol.RequestStartGame";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseStartGame::kResultFieldNumber;
const int ResponseStartGame::kParam1FieldNumber;
const int ResponseStartGame::kParam2FieldNumber;
const int ResponseStartGame::kParam3FieldNumber;
#endif  // !_MSC_VER

ResponseStartGame::ResponseStartGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseStartGame::InitAsDefaultInstance() {
}

ResponseStartGame::ResponseStartGame(const ResponseStartGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseStartGame::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStartGame::~ResponseStartGame() {
  SharedDtor();
}

void ResponseStartGame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseStartGame& ResponseStartGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

ResponseStartGame* ResponseStartGame::default_instance_ = NULL;

ResponseStartGame* ResponseStartGame::New() const {
  return new ResponseStartGame;
}

void ResponseStartGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param3;
        break;
      }

      // optional int32 param3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param1(), output);
  }

  // optional int32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param2(), output);
  }

  // optional int32 param3 = 4;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param3(), output);
  }

}

int ResponseStartGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional int32 param3 = 4;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param3());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStartGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseStartGame*>(&from));
}

void ResponseStartGame::MergeFrom(const ResponseStartGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
  }
}

void ResponseStartGame::CopyFrom(const ResponseStartGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartGame::IsInitialized() const {

  return true;
}

void ResponseStartGame::Swap(ResponseStartGame* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseStartGame::GetTypeName() const {
  return "Protocol.ResponseStartGame";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateProperty::kCharlevelFieldNumber;
const int NotifyUpdateProperty::kCurExpFieldNumber;
const int NotifyUpdateProperty::kMaxExpFieldNumber;
const int NotifyUpdateProperty::kGoldFieldNumber;
const int NotifyUpdateProperty::kBindgoldFieldNumber;
const int NotifyUpdateProperty::kMoneyFieldNumber;
const int NotifyUpdateProperty::kSafemoneyFieldNumber;
const int NotifyUpdateProperty::kLvupPointFieldNumber;
const int NotifyUpdateProperty::kCurStrFieldNumber;
const int NotifyUpdateProperty::kCurDexFieldNumber;
const int NotifyUpdateProperty::kCurIntFieldNumber;
const int NotifyUpdateProperty::kCurConFieldNumber;
const int NotifyUpdateProperty::kCurWizFieldNumber;
const int NotifyUpdateProperty::kCurHpFieldNumber;
const int NotifyUpdateProperty::kCurMpFieldNumber;
const int NotifyUpdateProperty::kMaxHpFieldNumber;
const int NotifyUpdateProperty::kMaxMpFieldNumber;
const int NotifyUpdateProperty::kAttackFieldNumber;
const int NotifyUpdateProperty::kPhyDefenceFieldNumber;
const int NotifyUpdateProperty::kMagDefenceFieldNumber;
const int NotifyUpdateProperty::kMoveSpeedFieldNumber;
const int NotifyUpdateProperty::kPkCountFieldNumber;
const int NotifyUpdateProperty::kHitChanceFieldNumber;
const int NotifyUpdateProperty::kDodgeChanceFieldNumber;
const int NotifyUpdateProperty::kCriticalFieldNumber;
const int NotifyUpdateProperty::kCriticalDodgeFieldNumber;
const int NotifyUpdateProperty::kMatenameFieldNumber;
const int NotifyUpdateProperty::kGuildnameFieldNumber;
const int NotifyUpdateProperty::kGuildCreditsFieldNumber;
const int NotifyUpdateProperty::kTotalGoldFieldNumber;
const int NotifyUpdateProperty::kTotalGuildCreditsFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateProperty::NotifyUpdateProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyUpdateProperty::InitAsDefaultInstance() {
}

NotifyUpdateProperty::NotifyUpdateProperty(const NotifyUpdateProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUpdateProperty::SharedCtor() {
  _cached_size_ = 0;
  charlevel_ = 0;
  cur_exp_ = GOOGLE_ULONGLONG(0);
  max_exp_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  bindgold_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_ULONGLONG(0);
  safemoney_ = GOOGLE_ULONGLONG(0);
  lvup_point_ = 0;
  cur_str_ = 0;
  cur_dex_ = 0;
  cur_int_ = 0;
  cur_con_ = 0;
  cur_wiz_ = 0;
  cur_hp_ = 0;
  cur_mp_ = 0;
  max_hp_ = 0;
  max_mp_ = 0;
  attack_ = 0;
  phy_defence_ = 0;
  mag_defence_ = 0;
  move_speed_ = 0;
  pk_count_ = 0;
  hit_chance_ = 0;
  dodge_chance_ = 0;
  critical_ = 0;
  critical_dodge_ = 0;
  matename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_credits_ = 0;
  total_gold_ = GOOGLE_ULONGLONG(0);
  total_guild_credits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateProperty::~NotifyUpdateProperty() {
  SharedDtor();
}

void NotifyUpdateProperty::SharedDtor() {
  if (matename_ != &::google::protobuf::internal::kEmptyString) {
    delete matename_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyUpdateProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyUpdateProperty& NotifyUpdateProperty::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

NotifyUpdateProperty* NotifyUpdateProperty::default_instance_ = NULL;

NotifyUpdateProperty* NotifyUpdateProperty::New() const {
  return new NotifyUpdateProperty;
}

void NotifyUpdateProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charlevel_ = 0;
    cur_exp_ = GOOGLE_ULONGLONG(0);
    max_exp_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    bindgold_ = GOOGLE_ULONGLONG(0);
    money_ = GOOGLE_ULONGLONG(0);
    safemoney_ = GOOGLE_ULONGLONG(0);
    lvup_point_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_str_ = 0;
    cur_dex_ = 0;
    cur_int_ = 0;
    cur_con_ = 0;
    cur_wiz_ = 0;
    cur_hp_ = 0;
    cur_mp_ = 0;
    max_hp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_mp_ = 0;
    attack_ = 0;
    phy_defence_ = 0;
    mag_defence_ = 0;
    move_speed_ = 0;
    pk_count_ = 0;
    hit_chance_ = 0;
    dodge_chance_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    critical_ = 0;
    critical_dodge_ = 0;
    if (has_matename()) {
      if (matename_ != &::google::protobuf::internal::kEmptyString) {
        matename_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guild_credits_ = 0;
    total_gold_ = GOOGLE_ULONGLONG(0);
    total_guild_credits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyUpdateProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charlevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charlevel_)));
          set_has_charlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_exp;
        break;
      }

      // optional uint64 cur_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_exp;
        break;
      }

      // optional uint64 max_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_exp_)));
          set_has_max_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindgold;
        break;
      }

      // optional uint64 bindgold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional uint64 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_safemoney;
        break;
      }

      // optional uint64 safemoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safemoney_)));
          set_has_safemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lvup_point;
        break;
      }

      // optional int32 lvup_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvup_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvup_point_)));
          set_has_lvup_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_str;
        break;
      }

      // optional int32 cur_str = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_str_)));
          set_has_cur_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cur_dex;
        break;
      }

      // optional int32 cur_dex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_dex_)));
          set_has_cur_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cur_int;
        break;
      }

      // optional int32 cur_int = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_int_)));
          set_has_cur_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cur_con;
        break;
      }

      // optional int32 cur_con = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_con_)));
          set_has_cur_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_wiz;
        break;
      }

      // optional int32 cur_wiz = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_wiz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_wiz_)));
          set_has_cur_wiz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_cur_hp;
        break;
      }

      // optional int32 cur_hp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cur_mp;
        break;
      }

      // optional int32 cur_mp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_mp_)));
          set_has_cur_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_max_hp;
        break;
      }

      // optional int32 max_hp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_max_mp;
        break;
      }

      // optional int32 max_mp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_mp_)));
          set_has_max_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_attack;
        break;
      }

      // optional int32 attack = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_phy_defence;
        break;
      }

      // optional int32 phy_defence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_defence_)));
          set_has_phy_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_mag_defence;
        break;
      }

      // optional int32 mag_defence = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mag_defence_)));
          set_has_mag_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_pk_count;
        break;
      }

      // optional int32 pk_count = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_count_)));
          set_has_pk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_hit_chance;
        break;
      }

      // optional float hit_chance = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hit_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hit_chance_)));
          set_has_hit_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_dodge_chance;
        break;
      }

      // optional float dodge_chance = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dodge_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dodge_chance_)));
          set_has_dodge_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_critical;
        break;
      }

      // optional float critical = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_critical_dodge;
        break;
      }

      // optional float critical_dodge = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_critical_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &critical_dodge_)));
          set_has_critical_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_matename;
        break;
      }

      // optional string matename = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_guildname;
        break;
      }

      // optional string guildname = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_guild_credits;
        break;
      }

      // optional int32 guild_credits = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_credits_)));
          set_has_guild_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_total_gold;
        break;
      }

      // optional uint64 total_gold = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_gold_)));
          set_has_total_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_total_guild_credits;
        break;
      }

      // optional int32 total_guild_credits = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_guild_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_guild_credits_)));
          set_has_total_guild_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUpdateProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charlevel = 1;
  if (has_charlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charlevel(), output);
  }

  // optional uint64 cur_exp = 2;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_exp(), output);
  }

  // optional uint64 max_exp = 3;
  if (has_max_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_exp(), output);
  }

  // optional uint64 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gold(), output);
  }

  // optional uint64 bindgold = 5;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bindgold(), output);
  }

  // optional uint64 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->money(), output);
  }

  // optional uint64 safemoney = 7;
  if (has_safemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->safemoney(), output);
  }

  // optional int32 lvup_point = 10;
  if (has_lvup_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lvup_point(), output);
  }

  // optional int32 cur_str = 11;
  if (has_cur_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cur_str(), output);
  }

  // optional int32 cur_dex = 12;
  if (has_cur_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cur_dex(), output);
  }

  // optional int32 cur_int = 13;
  if (has_cur_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cur_int(), output);
  }

  // optional int32 cur_con = 14;
  if (has_cur_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cur_con(), output);
  }

  // optional int32 cur_wiz = 15;
  if (has_cur_wiz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cur_wiz(), output);
  }

  // optional int32 cur_hp = 16;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cur_hp(), output);
  }

  // optional int32 cur_mp = 17;
  if (has_cur_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cur_mp(), output);
  }

  // optional int32 max_hp = 18;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_hp(), output);
  }

  // optional int32 max_mp = 19;
  if (has_max_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->max_mp(), output);
  }

  // optional int32 attack = 20;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->attack(), output);
  }

  // optional int32 phy_defence = 21;
  if (has_phy_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->phy_defence(), output);
  }

  // optional int32 mag_defence = 22;
  if (has_mag_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->mag_defence(), output);
  }

  // optional int32 move_speed = 23;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->move_speed(), output);
  }

  // optional int32 pk_count = 24;
  if (has_pk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->pk_count(), output);
  }

  // optional float hit_chance = 25;
  if (has_hit_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->hit_chance(), output);
  }

  // optional float dodge_chance = 26;
  if (has_dodge_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->dodge_chance(), output);
  }

  // optional float critical = 27;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->critical(), output);
  }

  // optional float critical_dodge = 28;
  if (has_critical_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->critical_dodge(), output);
  }

  // optional string matename = 29;
  if (has_matename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->matename(), output);
  }

  // optional string guildname = 30;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->guildname(), output);
  }

  // optional int32 guild_credits = 31;
  if (has_guild_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->guild_credits(), output);
  }

  // optional uint64 total_gold = 32;
  if (has_total_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->total_gold(), output);
  }

  // optional int32 total_guild_credits = 33;
  if (has_total_guild_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->total_guild_credits(), output);
  }

}

int NotifyUpdateProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charlevel = 1;
    if (has_charlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charlevel());
    }

    // optional uint64 cur_exp = 2;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_exp());
    }

    // optional uint64 max_exp = 3;
    if (has_max_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_exp());
    }

    // optional uint64 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 bindgold = 5;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bindgold());
    }

    // optional uint64 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint64 safemoney = 7;
    if (has_safemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->safemoney());
    }

    // optional int32 lvup_point = 10;
    if (has_lvup_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvup_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_str = 11;
    if (has_cur_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_str());
    }

    // optional int32 cur_dex = 12;
    if (has_cur_dex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_dex());
    }

    // optional int32 cur_int = 13;
    if (has_cur_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_int());
    }

    // optional int32 cur_con = 14;
    if (has_cur_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_con());
    }

    // optional int32 cur_wiz = 15;
    if (has_cur_wiz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_wiz());
    }

    // optional int32 cur_hp = 16;
    if (has_cur_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_hp());
    }

    // optional int32 cur_mp = 17;
    if (has_cur_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_mp());
    }

    // optional int32 max_hp = 18;
    if (has_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 max_mp = 19;
    if (has_max_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_mp());
    }

    // optional int32 attack = 20;
    if (has_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 phy_defence = 21;
    if (has_phy_defence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_defence());
    }

    // optional int32 mag_defence = 22;
    if (has_mag_defence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mag_defence());
    }

    // optional int32 move_speed = 23;
    if (has_move_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional int32 pk_count = 24;
    if (has_pk_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_count());
    }

    // optional float hit_chance = 25;
    if (has_hit_chance()) {
      total_size += 2 + 4;
    }

    // optional float dodge_chance = 26;
    if (has_dodge_chance()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float critical = 27;
    if (has_critical()) {
      total_size += 2 + 4;
    }

    // optional float critical_dodge = 28;
    if (has_critical_dodge()) {
      total_size += 2 + 4;
    }

    // optional string matename = 29;
    if (has_matename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matename());
    }

    // optional string guildname = 30;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 guild_credits = 31;
    if (has_guild_credits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_credits());
    }

    // optional uint64 total_gold = 32;
    if (has_total_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_gold());
    }

    // optional int32 total_guild_credits = 33;
    if (has_total_guild_credits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_guild_credits());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyUpdateProperty*>(&from));
}

void NotifyUpdateProperty::MergeFrom(const NotifyUpdateProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charlevel()) {
      set_charlevel(from.charlevel());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_max_exp()) {
      set_max_exp(from.max_exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_safemoney()) {
      set_safemoney(from.safemoney());
    }
    if (from.has_lvup_point()) {
      set_lvup_point(from.lvup_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_str()) {
      set_cur_str(from.cur_str());
    }
    if (from.has_cur_dex()) {
      set_cur_dex(from.cur_dex());
    }
    if (from.has_cur_int()) {
      set_cur_int(from.cur_int());
    }
    if (from.has_cur_con()) {
      set_cur_con(from.cur_con());
    }
    if (from.has_cur_wiz()) {
      set_cur_wiz(from.cur_wiz());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_cur_mp()) {
      set_cur_mp(from.cur_mp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_mp()) {
      set_max_mp(from.max_mp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_phy_defence()) {
      set_phy_defence(from.phy_defence());
    }
    if (from.has_mag_defence()) {
      set_mag_defence(from.mag_defence());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_pk_count()) {
      set_pk_count(from.pk_count());
    }
    if (from.has_hit_chance()) {
      set_hit_chance(from.hit_chance());
    }
    if (from.has_dodge_chance()) {
      set_dodge_chance(from.dodge_chance());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_critical_dodge()) {
      set_critical_dodge(from.critical_dodge());
    }
    if (from.has_matename()) {
      set_matename(from.matename());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guild_credits()) {
      set_guild_credits(from.guild_credits());
    }
    if (from.has_total_gold()) {
      set_total_gold(from.total_gold());
    }
    if (from.has_total_guild_credits()) {
      set_total_guild_credits(from.total_guild_credits());
    }
  }
}

void NotifyUpdateProperty::CopyFrom(const NotifyUpdateProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateProperty::IsInitialized() const {

  return true;
}

void NotifyUpdateProperty::Swap(NotifyUpdateProperty* other) {
  if (other != this) {
    std::swap(charlevel_, other->charlevel_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(max_exp_, other->max_exp_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(money_, other->money_);
    std::swap(safemoney_, other->safemoney_);
    std::swap(lvup_point_, other->lvup_point_);
    std::swap(cur_str_, other->cur_str_);
    std::swap(cur_dex_, other->cur_dex_);
    std::swap(cur_int_, other->cur_int_);
    std::swap(cur_con_, other->cur_con_);
    std::swap(cur_wiz_, other->cur_wiz_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(cur_mp_, other->cur_mp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(max_mp_, other->max_mp_);
    std::swap(attack_, other->attack_);
    std::swap(phy_defence_, other->phy_defence_);
    std::swap(mag_defence_, other->mag_defence_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(pk_count_, other->pk_count_);
    std::swap(hit_chance_, other->hit_chance_);
    std::swap(dodge_chance_, other->dodge_chance_);
    std::swap(critical_, other->critical_);
    std::swap(critical_dodge_, other->critical_dodge_);
    std::swap(matename_, other->matename_);
    std::swap(guildname_, other->guildname_);
    std::swap(guild_credits_, other->guild_credits_);
    std::swap(total_gold_, other->total_gold_);
    std::swap(total_guild_credits_, other->total_guild_credits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyUpdateProperty::GetTypeName() const {
  return "Protocol.NotifyUpdateProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUseLvupPoint::kIncStrFieldNumber;
const int RequestUseLvupPoint::kIncDexFieldNumber;
const int RequestUseLvupPoint::kIncIntgentFieldNumber;
const int RequestUseLvupPoint::kIncConFieldNumber;
const int RequestUseLvupPoint::kIncWizFieldNumber;
#endif  // !_MSC_VER

RequestUseLvupPoint::RequestUseLvupPoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestUseLvupPoint::InitAsDefaultInstance() {
}

RequestUseLvupPoint::RequestUseLvupPoint(const RequestUseLvupPoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUseLvupPoint::SharedCtor() {
  _cached_size_ = 0;
  inc_str_ = 0u;
  inc_dex_ = 0u;
  inc_intgent_ = 0u;
  inc_con_ = 0u;
  inc_wiz_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUseLvupPoint::~RequestUseLvupPoint() {
  SharedDtor();
}

void RequestUseLvupPoint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestUseLvupPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUseLvupPoint& RequestUseLvupPoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestUseLvupPoint* RequestUseLvupPoint::default_instance_ = NULL;

RequestUseLvupPoint* RequestUseLvupPoint::New() const {
  return new RequestUseLvupPoint;
}

void RequestUseLvupPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inc_str_ = 0u;
    inc_dex_ = 0u;
    inc_intgent_ = 0u;
    inc_con_ = 0u;
    inc_wiz_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestUseLvupPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 inc_str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inc_str_)));
          set_has_inc_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inc_dex;
        break;
      }

      // optional uint32 inc_dex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inc_dex_)));
          set_has_inc_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inc_intgent;
        break;
      }

      // optional uint32 inc_intgent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_intgent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inc_intgent_)));
          set_has_inc_intgent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inc_con;
        break;
      }

      // optional uint32 inc_con = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inc_con_)));
          set_has_inc_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inc_wiz;
        break;
      }

      // optional uint32 inc_wiz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_wiz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inc_wiz_)));
          set_has_inc_wiz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUseLvupPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 inc_str = 1;
  if (has_inc_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inc_str(), output);
  }

  // optional uint32 inc_dex = 2;
  if (has_inc_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inc_dex(), output);
  }

  // optional uint32 inc_intgent = 3;
  if (has_inc_intgent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inc_intgent(), output);
  }

  // optional uint32 inc_con = 4;
  if (has_inc_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inc_con(), output);
  }

  // optional uint32 inc_wiz = 5;
  if (has_inc_wiz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inc_wiz(), output);
  }

}

int RequestUseLvupPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 inc_str = 1;
    if (has_inc_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inc_str());
    }

    // optional uint32 inc_dex = 2;
    if (has_inc_dex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inc_dex());
    }

    // optional uint32 inc_intgent = 3;
    if (has_inc_intgent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inc_intgent());
    }

    // optional uint32 inc_con = 4;
    if (has_inc_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inc_con());
    }

    // optional uint32 inc_wiz = 5;
    if (has_inc_wiz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inc_wiz());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUseLvupPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUseLvupPoint*>(&from));
}

void RequestUseLvupPoint::MergeFrom(const RequestUseLvupPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inc_str()) {
      set_inc_str(from.inc_str());
    }
    if (from.has_inc_dex()) {
      set_inc_dex(from.inc_dex());
    }
    if (from.has_inc_intgent()) {
      set_inc_intgent(from.inc_intgent());
    }
    if (from.has_inc_con()) {
      set_inc_con(from.inc_con());
    }
    if (from.has_inc_wiz()) {
      set_inc_wiz(from.inc_wiz());
    }
  }
}

void RequestUseLvupPoint::CopyFrom(const RequestUseLvupPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUseLvupPoint::IsInitialized() const {

  return true;
}

void RequestUseLvupPoint::Swap(RequestUseLvupPoint* other) {
  if (other != this) {
    std::swap(inc_str_, other->inc_str_);
    std::swap(inc_dex_, other->inc_dex_);
    std::swap(inc_intgent_, other->inc_intgent_);
    std::swap(inc_con_, other->inc_con_);
    std::swap(inc_wiz_, other->inc_wiz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUseLvupPoint::GetTypeName() const {
  return "Protocol.RequestUseLvupPoint";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUseLvupPoint::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseUseLvupPoint::ResponseUseLvupPoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseUseLvupPoint::InitAsDefaultInstance() {
}

ResponseUseLvupPoint::ResponseUseLvupPoint(const ResponseUseLvupPoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUseLvupPoint::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUseLvupPoint::~ResponseUseLvupPoint() {
  SharedDtor();
}

void ResponseUseLvupPoint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseUseLvupPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseUseLvupPoint& ResponseUseLvupPoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

ResponseUseLvupPoint* ResponseUseLvupPoint::default_instance_ = NULL;

ResponseUseLvupPoint* ResponseUseLvupPoint::New() const {
  return new ResponseUseLvupPoint;
}

void ResponseUseLvupPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseUseLvupPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUseLvupPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

}

int ResponseUseLvupPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUseLvupPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseUseLvupPoint*>(&from));
}

void ResponseUseLvupPoint::MergeFrom(const ResponseUseLvupPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseUseLvupPoint::CopyFrom(const ResponseUseLvupPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUseLvupPoint::IsInitialized() const {

  return true;
}

void ResponseUseLvupPoint::Swap(ResponseUseLvupPoint* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseUseLvupPoint::GetTypeName() const {
  return "Protocol.ResponseUseLvupPoint";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRecharge::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestRecharge::RequestRecharge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestRecharge::InitAsDefaultInstance() {
}

RequestRecharge::RequestRecharge(const RequestRecharge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRecharge::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRecharge::~RequestRecharge() {
  SharedDtor();
}

void RequestRecharge::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRecharge& RequestRecharge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestRecharge* RequestRecharge::default_instance_ = NULL;

RequestRecharge* RequestRecharge::New() const {
  return new RequestRecharge;
}

void RequestRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserve(), output);
  }

}

int RequestRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRecharge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRecharge*>(&from));
}

void RequestRecharge::MergeFrom(const RequestRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestRecharge::CopyFrom(const RequestRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRecharge::IsInitialized() const {

  return true;
}

void RequestRecharge::Swap(RequestRecharge* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRecharge::GetTypeName() const {
  return "Protocol.RequestRecharge";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSetShortcutKey::kDataFieldNumber;
#endif  // !_MSC_VER

RequestSetShortcutKey::RequestSetShortcutKey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestSetShortcutKey::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_ = const_cast< ::ShortcutKeyData*>(
      ::ShortcutKeyData::internal_default_instance());
#else
  data_ = const_cast< ::ShortcutKeyData*>(&::ShortcutKeyData::default_instance());
#endif
}

RequestSetShortcutKey::RequestSetShortcutKey(const RequestSetShortcutKey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSetShortcutKey::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSetShortcutKey::~RequestSetShortcutKey() {
  SharedDtor();
}

void RequestSetShortcutKey::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete data_;
  }
}

void RequestSetShortcutKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSetShortcutKey& RequestSetShortcutKey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestSetShortcutKey* RequestSetShortcutKey::default_instance_ = NULL;

RequestSetShortcutKey* RequestSetShortcutKey::New() const {
  return new RequestSetShortcutKey;
}

void RequestSetShortcutKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::ShortcutKeyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestSetShortcutKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShortcutKeyData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSetShortcutKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShortcutKeyData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data(), output);
  }

}

int RequestSetShortcutKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShortcutKeyData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetShortcutKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSetShortcutKey*>(&from));
}

void RequestSetShortcutKey::MergeFrom(const RequestSetShortcutKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::ShortcutKeyData::MergeFrom(from.data());
    }
  }
}

void RequestSetShortcutKey::CopyFrom(const RequestSetShortcutKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetShortcutKey::IsInitialized() const {

  return true;
}

void RequestSetShortcutKey::Swap(RequestSetShortcutKey* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSetShortcutKey::GetTypeName() const {
  return "Protocol.RequestSetShortcutKey";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLookCharEquip::kNameFieldNumber;
#endif  // !_MSC_VER

RequestLookCharEquip::RequestLookCharEquip()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestLookCharEquip::InitAsDefaultInstance() {
}

RequestLookCharEquip::RequestLookCharEquip(const RequestLookCharEquip& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLookCharEquip::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLookCharEquip::~RequestLookCharEquip() {
  SharedDtor();
}

void RequestLookCharEquip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestLookCharEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestLookCharEquip& RequestLookCharEquip::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestLookCharEquip* RequestLookCharEquip::default_instance_ = NULL;

RequestLookCharEquip* RequestLookCharEquip::New() const {
  return new RequestLookCharEquip;
}

void RequestLookCharEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestLookCharEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLookCharEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int RequestLookCharEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLookCharEquip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestLookCharEquip*>(&from));
}

void RequestLookCharEquip::MergeFrom(const RequestLookCharEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void RequestLookCharEquip::CopyFrom(const RequestLookCharEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLookCharEquip::IsInitialized() const {

  return true;
}

void RequestLookCharEquip::Swap(RequestLookCharEquip* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestLookCharEquip::GetTypeName() const {
  return "Protocol.RequestLookCharEquip";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLookCharEquip::kNameFieldNumber;
const int ResponseLookCharEquip::kLevelFieldNumber;
const int ResponseLookCharEquip::kRaceFieldNumber;
const int ResponseLookCharEquip::kGuildNameFieldNumber;
const int ResponseLookCharEquip::kEquipItemsFieldNumber;
const int ResponseLookCharEquip::kAvatarItemsFieldNumber;
#endif  // !_MSC_VER

ResponseLookCharEquip::ResponseLookCharEquip()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseLookCharEquip::InitAsDefaultInstance() {
}

ResponseLookCharEquip::ResponseLookCharEquip(const ResponseLookCharEquip& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLookCharEquip::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  race_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLookCharEquip::~ResponseLookCharEquip() {
  SharedDtor();
}

void ResponseLookCharEquip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseLookCharEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseLookCharEquip& ResponseLookCharEquip::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

ResponseLookCharEquip* ResponseLookCharEquip::default_instance_ = NULL;

ResponseLookCharEquip* ResponseLookCharEquip::New() const {
  return new ResponseLookCharEquip;
}

void ResponseLookCharEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    race_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  equip_items_.Clear();
  avatar_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseLookCharEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // optional int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equip_items;
        break;
      }

      // repeated .ItemData equip_items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equip_items;
        if (input->ExpectTag(90)) goto parse_avatar_items;
        break;
      }

      // repeated .ItemData avatar_items = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_avatar_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLookCharEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }

  // repeated .ItemData equip_items = 10;
  for (int i = 0; i < this->equip_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->equip_items(i), output);
  }

  // repeated .ItemData avatar_items = 11;
  for (int i = 0; i < this->avatar_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->avatar_items(i), output);
  }

}

int ResponseLookCharEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

  }
  // repeated .ItemData equip_items = 10;
  total_size += 1 * this->equip_items_size();
  for (int i = 0; i < this->equip_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_items(i));
  }

  // repeated .ItemData avatar_items = 11;
  total_size += 1 * this->avatar_items_size();
  for (int i = 0; i < this->avatar_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar_items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLookCharEquip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseLookCharEquip*>(&from));
}

void ResponseLookCharEquip::MergeFrom(const ResponseLookCharEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_items_.MergeFrom(from.equip_items_);
  avatar_items_.MergeFrom(from.avatar_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
}

void ResponseLookCharEquip::CopyFrom(const ResponseLookCharEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLookCharEquip::IsInitialized() const {

  return true;
}

void ResponseLookCharEquip::Swap(ResponseLookCharEquip* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(race_, other->race_);
    std::swap(guild_name_, other->guild_name_);
    equip_items_.Swap(&other->equip_items_);
    avatar_items_.Swap(&other->avatar_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseLookCharEquip::GetTypeName() const {
  return "Protocol.ResponseLookCharEquip";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTakeVipAward::kVipAwardIdFieldNumber;
#endif  // !_MSC_VER

RequestTakeVipAward::RequestTakeVipAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTakeVipAward::InitAsDefaultInstance() {
}

RequestTakeVipAward::RequestTakeVipAward(const RequestTakeVipAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTakeVipAward::SharedCtor() {
  _cached_size_ = 0;
  vip_award_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTakeVipAward::~RequestTakeVipAward() {
  SharedDtor();
}

void RequestTakeVipAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTakeVipAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTakeVipAward& RequestTakeVipAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestTakeVipAward* RequestTakeVipAward::default_instance_ = NULL;

RequestTakeVipAward* RequestTakeVipAward::New() const {
  return new RequestTakeVipAward;
}

void RequestTakeVipAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_award_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTakeVipAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vip_award_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_award_id_)));
          set_has_vip_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTakeVipAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vip_award_id = 1;
  if (has_vip_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vip_award_id(), output);
  }

}

int RequestTakeVipAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vip_award_id = 1;
    if (has_vip_award_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_award_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTakeVipAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTakeVipAward*>(&from));
}

void RequestTakeVipAward::MergeFrom(const RequestTakeVipAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_award_id()) {
      set_vip_award_id(from.vip_award_id());
    }
  }
}

void RequestTakeVipAward::CopyFrom(const RequestTakeVipAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTakeVipAward::IsInitialized() const {

  return true;
}

void RequestTakeVipAward::Swap(RequestTakeVipAward* other) {
  if (other != this) {
    std::swap(vip_award_id_, other->vip_award_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTakeVipAward::GetTypeName() const {
  return "Protocol.RequestTakeVipAward";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTakeVipAward::kVipAwardIdFieldNumber;
#endif  // !_MSC_VER

ResponseTakeVipAward::ResponseTakeVipAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseTakeVipAward::InitAsDefaultInstance() {
}

ResponseTakeVipAward::ResponseTakeVipAward(const ResponseTakeVipAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTakeVipAward::SharedCtor() {
  _cached_size_ = 0;
  vip_award_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTakeVipAward::~ResponseTakeVipAward() {
  SharedDtor();
}

void ResponseTakeVipAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseTakeVipAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseTakeVipAward& ResponseTakeVipAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

ResponseTakeVipAward* ResponseTakeVipAward::default_instance_ = NULL;

ResponseTakeVipAward* ResponseTakeVipAward::New() const {
  return new ResponseTakeVipAward;
}

void ResponseTakeVipAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_award_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseTakeVipAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vip_award_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_award_id_)));
          set_has_vip_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTakeVipAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vip_award_id = 1;
  if (has_vip_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip_award_id(), output);
  }

}

int ResponseTakeVipAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vip_award_id = 1;
    if (has_vip_award_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_award_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTakeVipAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseTakeVipAward*>(&from));
}

void ResponseTakeVipAward::MergeFrom(const ResponseTakeVipAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_award_id()) {
      set_vip_award_id(from.vip_award_id());
    }
  }
}

void ResponseTakeVipAward::CopyFrom(const ResponseTakeVipAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTakeVipAward::IsInitialized() const {

  return true;
}

void ResponseTakeVipAward::Swap(ResponseTakeVipAward* other) {
  if (other != this) {
    std::swap(vip_award_id_, other->vip_award_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseTakeVipAward::GetTypeName() const {
  return "Protocol.ResponseTakeVipAward";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSaveSetting::kSettingDataFieldNumber;
#endif  // !_MSC_VER

RequestSaveSetting::RequestSaveSetting()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestSaveSetting::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setting_data_ = const_cast< ::SettingData*>(
      ::SettingData::internal_default_instance());
#else
  setting_data_ = const_cast< ::SettingData*>(&::SettingData::default_instance());
#endif
}

RequestSaveSetting::RequestSaveSetting(const RequestSaveSetting& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSaveSetting::SharedCtor() {
  _cached_size_ = 0;
  setting_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSaveSetting::~RequestSaveSetting() {
  SharedDtor();
}

void RequestSaveSetting::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete setting_data_;
  }
}

void RequestSaveSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSaveSetting& RequestSaveSetting::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoCharData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCharData_2eproto();
#endif
  return *default_instance_;
}

RequestSaveSetting* RequestSaveSetting::default_instance_ = NULL;

RequestSaveSetting* RequestSaveSetting::New() const {
  return new RequestSaveSetting;
}

void RequestSaveSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_setting_data()) {
      if (setting_data_ != NULL) setting_data_->::SettingData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestSaveSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SettingData setting_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSaveSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SettingData setting_data = 1;
  if (has_setting_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->setting_data(), output);
  }

}

int RequestSaveSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SettingData setting_data = 1;
    if (has_setting_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSaveSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSaveSetting*>(&from));
}

void RequestSaveSetting::MergeFrom(const RequestSaveSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setting_data()) {
      mutable_setting_data()->::SettingData::MergeFrom(from.setting_data());
    }
  }
}

void RequestSaveSetting::CopyFrom(const RequestSaveSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveSetting::IsInitialized() const {

  return true;
}

void RequestSaveSetting::Swap(RequestSaveSetting* other) {
  if (other != this) {
    std::swap(setting_data_, other->setting_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSaveSetting::GetTypeName() const {
  return "Protocol.RequestSaveSetting";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
