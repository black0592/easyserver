// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoChatting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoChatting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoChatting_2eproto() {
  delete ChatSendAttachInfo::default_instance_;
  delete ChatReceiveAttachInfo::default_instance_;
  delete RequestSendChatContent::default_instance_;
  delete NotifySendChatContent::default_instance_;
  delete RequestGetChatAttachDetail::default_instance_;
  delete ResponseGetChatAttachDetail::default_instance_;
  delete RequestSetChatChannel::default_instance_;
  delete ResponseSetChatChannel::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoChatting_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoChatting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  ChatSendAttachInfo::default_instance_ = new ChatSendAttachInfo();
  ChatReceiveAttachInfo::default_instance_ = new ChatReceiveAttachInfo();
  RequestSendChatContent::default_instance_ = new RequestSendChatContent();
  NotifySendChatContent::default_instance_ = new NotifySendChatContent();
  RequestGetChatAttachDetail::default_instance_ = new RequestGetChatAttachDetail();
  ResponseGetChatAttachDetail::default_instance_ = new ResponseGetChatAttachDetail();
  RequestSetChatChannel::default_instance_ = new RequestSetChatChannel();
  ResponseSetChatChannel::default_instance_ = new ResponseSetChatChannel();
  ChatSendAttachInfo::default_instance_->InitAsDefaultInstance();
  ChatReceiveAttachInfo::default_instance_->InitAsDefaultInstance();
  RequestSendChatContent::default_instance_->InitAsDefaultInstance();
  NotifySendChatContent::default_instance_->InitAsDefaultInstance();
  RequestGetChatAttachDetail::default_instance_->InitAsDefaultInstance();
  ResponseGetChatAttachDetail::default_instance_->InitAsDefaultInstance();
  RequestSetChatChannel::default_instance_->InitAsDefaultInstance();
  ResponseSetChatChannel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoChatting_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoChatting_2eproto_once_);
void protobuf_AddDesc_ProtoChatting_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoChatting_2eproto_once_,
                 &protobuf_AddDesc_ProtoChatting_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoChatting_2eproto {
  StaticDescriptorInitializer_ProtoChatting_2eproto() {
    protobuf_AddDesc_ProtoChatting_2eproto();
  }
} static_descriptor_initializer_ProtoChatting_2eproto_;
#endif
bool ChattingOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ChatChannel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

bool ChatAttachType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSendAttachInfo::kTypeFieldNumber;
const int ChatSendAttachInfo::kLocFieldNumber;
#endif  // !_MSC_VER

ChatSendAttachInfo::ChatSendAttachInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChatSendAttachInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

ChatSendAttachInfo::ChatSendAttachInfo(const ChatSendAttachInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChatSendAttachInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSendAttachInfo::~ChatSendAttachInfo() {
  SharedDtor();
}

void ChatSendAttachInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
  }
}

void ChatSendAttachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatSendAttachInfo& ChatSendAttachInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

ChatSendAttachInfo* ChatSendAttachInfo::default_instance_ = NULL;

ChatSendAttachInfo* ChatSendAttachInfo::New() const {
  return new ChatSendAttachInfo;
}

void ChatSendAttachInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_loc()) {
      if (loc_ != NULL) loc_->::ItemLoc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChatSendAttachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.ChatAttachType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::ChatAttachType_IsValid(value)) {
            set_type(static_cast< ::Protocol::ChatAttachType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loc;
        break;
      }

      // optional .ItemLoc loc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatSendAttachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.ChatAttachType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ItemLoc loc = 5;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->loc(), output);
  }

}

int ChatSendAttachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.ChatAttachType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ItemLoc loc = 5;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSendAttachInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatSendAttachInfo*>(&from));
}

void ChatSendAttachInfo::MergeFrom(const ChatSendAttachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_loc()) {
      mutable_loc()->::ItemLoc::MergeFrom(from.loc());
    }
  }
}

void ChatSendAttachInfo::CopyFrom(const ChatSendAttachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSendAttachInfo::IsInitialized() const {

  return true;
}

void ChatSendAttachInfo::Swap(ChatSendAttachInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(loc_, other->loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChatSendAttachInfo::GetTypeName() const {
  return "Protocol.ChatSendAttachInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReceiveAttachInfo::kTypeFieldNumber;
const int ChatReceiveAttachInfo::kUuidFieldNumber;
const int ChatReceiveAttachInfo::kIdFieldNumber;
const int ChatReceiveAttachInfo::kStarFieldNumber;
#endif  // !_MSC_VER

ChatReceiveAttachInfo::ChatReceiveAttachInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChatReceiveAttachInfo::InitAsDefaultInstance() {
}

ChatReceiveAttachInfo::ChatReceiveAttachInfo(const ChatReceiveAttachInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChatReceiveAttachInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  uuid_ = 0;
  id_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReceiveAttachInfo::~ChatReceiveAttachInfo() {
  SharedDtor();
}

void ChatReceiveAttachInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatReceiveAttachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatReceiveAttachInfo& ChatReceiveAttachInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

ChatReceiveAttachInfo* ChatReceiveAttachInfo::default_instance_ = NULL;

ChatReceiveAttachInfo* ChatReceiveAttachInfo::New() const {
  return new ChatReceiveAttachInfo;
}

void ChatReceiveAttachInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    uuid_ = 0;
    id_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChatReceiveAttachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.ChatAttachType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::ChatAttachType_IsValid(value)) {
            set_type(static_cast< ::Protocol::ChatAttachType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int32 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatReceiveAttachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.ChatAttachType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uuid(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

}

int ChatReceiveAttachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.ChatAttachType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReceiveAttachInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatReceiveAttachInfo*>(&from));
}

void ChatReceiveAttachInfo::MergeFrom(const ChatReceiveAttachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
}

void ChatReceiveAttachInfo::CopyFrom(const ChatReceiveAttachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReceiveAttachInfo::IsInitialized() const {

  return true;
}

void ChatReceiveAttachInfo::Swap(ChatReceiveAttachInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChatReceiveAttachInfo::GetTypeName() const {
  return "Protocol.ChatReceiveAttachInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSendChatContent::kChannelFieldNumber;
const int RequestSendChatContent::kReceiverFieldNumber;
const int RequestSendChatContent::kContentFieldNumber;
const int RequestSendChatContent::kSendAttachsFieldNumber;
#endif  // !_MSC_VER

RequestSendChatContent::RequestSendChatContent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestSendChatContent::InitAsDefaultInstance() {
}

RequestSendChatContent::RequestSendChatContent(const RequestSendChatContent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSendChatContent::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendChatContent::~RequestSendChatContent() {
  SharedDtor();
}

void RequestSendChatContent::SharedDtor() {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSendChatContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSendChatContent& RequestSendChatContent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

RequestSendChatContent* RequestSendChatContent::default_instance_ = NULL;

RequestSendChatContent* RequestSendChatContent::New() const {
  return new RequestSendChatContent;
}

void RequestSendChatContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  send_attachs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestSendChatContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.ChatChannel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::ChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Protocol::ChatChannel >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receiver;
        break;
      }

      // optional string receiver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send_attachs;
        break;
      }

      // repeated .Protocol.ChatSendAttachInfo send_attachs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_attachs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send_attachs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send_attachs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSendChatContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.ChatChannel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string receiver = 2;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->receiver(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // repeated .Protocol.ChatSendAttachInfo send_attachs = 4;
  for (int i = 0; i < this->send_attachs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->send_attachs(i), output);
  }

}

int RequestSendChatContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.ChatChannel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional string receiver = 2;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated .Protocol.ChatSendAttachInfo send_attachs = 4;
  total_size += 1 * this->send_attachs_size();
  for (int i = 0; i < this->send_attachs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send_attachs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendChatContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSendChatContent*>(&from));
}

void RequestSendChatContent::MergeFrom(const RequestSendChatContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  send_attachs_.MergeFrom(from.send_attachs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void RequestSendChatContent::CopyFrom(const RequestSendChatContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendChatContent::IsInitialized() const {

  return true;
}

void RequestSendChatContent::Swap(RequestSendChatContent* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(receiver_, other->receiver_);
    std::swap(content_, other->content_);
    send_attachs_.Swap(&other->send_attachs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSendChatContent::GetTypeName() const {
  return "Protocol.RequestSendChatContent";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySendChatContent::kChannelFieldNumber;
const int NotifySendChatContent::kContentFieldNumber;
const int NotifySendChatContent::kSenderFieldNumber;
const int NotifySendChatContent::kReceiverFieldNumber;
const int NotifySendChatContent::kReceiveAttachsFieldNumber;
#endif  // !_MSC_VER

NotifySendChatContent::NotifySendChatContent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifySendChatContent::InitAsDefaultInstance() {
}

NotifySendChatContent::NotifySendChatContent(const NotifySendChatContent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySendChatContent::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySendChatContent::~NotifySendChatContent() {
  SharedDtor();
}

void NotifySendChatContent::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifySendChatContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifySendChatContent& NotifySendChatContent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

NotifySendChatContent* NotifySendChatContent::default_instance_ = NULL;

NotifySendChatContent* NotifySendChatContent::New() const {
  return new NotifySendChatContent;
}

void NotifySendChatContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
  }
  receive_attachs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifySendChatContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.ChatChannel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::ChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Protocol::ChatChannel >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional string sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_receiver;
        break;
      }

      // optional string receiver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_receive_attachs;
        break;
      }

      // repeated .Protocol.ChatReceiveAttachInfo receive_attachs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receive_attachs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receive_attachs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_receive_attachs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySendChatContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.ChatChannel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender(), output);
  }

  // optional string receiver = 4;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->receiver(), output);
  }

  // repeated .Protocol.ChatReceiveAttachInfo receive_attachs = 5;
  for (int i = 0; i < this->receive_attachs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->receive_attachs(i), output);
  }

}

int NotifySendChatContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.ChatChannel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string receiver = 4;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

  }
  // repeated .Protocol.ChatReceiveAttachInfo receive_attachs = 5;
  total_size += 1 * this->receive_attachs_size();
  for (int i = 0; i < this->receive_attachs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receive_attachs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySendChatContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifySendChatContent*>(&from));
}

void NotifySendChatContent::MergeFrom(const NotifySendChatContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  receive_attachs_.MergeFrom(from.receive_attachs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
  }
}

void NotifySendChatContent::CopyFrom(const NotifySendChatContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySendChatContent::IsInitialized() const {

  return true;
}

void NotifySendChatContent::Swap(NotifySendChatContent* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(sender_, other->sender_);
    std::swap(receiver_, other->receiver_);
    receive_attachs_.Swap(&other->receive_attachs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifySendChatContent::GetTypeName() const {
  return "Protocol.NotifySendChatContent";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetChatAttachDetail::kUuidFieldNumber;
#endif  // !_MSC_VER

RequestGetChatAttachDetail::RequestGetChatAttachDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetChatAttachDetail::InitAsDefaultInstance() {
}

RequestGetChatAttachDetail::RequestGetChatAttachDetail(const RequestGetChatAttachDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetChatAttachDetail::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetChatAttachDetail::~RequestGetChatAttachDetail() {
  SharedDtor();
}

void RequestGetChatAttachDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetChatAttachDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetChatAttachDetail& RequestGetChatAttachDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

RequestGetChatAttachDetail* RequestGetChatAttachDetail::default_instance_ = NULL;

RequestGetChatAttachDetail* RequestGetChatAttachDetail::New() const {
  return new RequestGetChatAttachDetail;
}

void RequestGetChatAttachDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetChatAttachDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetChatAttachDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uuid(), output);
  }

}

int RequestGetChatAttachDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetChatAttachDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetChatAttachDetail*>(&from));
}

void RequestGetChatAttachDetail::MergeFrom(const RequestGetChatAttachDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
}

void RequestGetChatAttachDetail::CopyFrom(const RequestGetChatAttachDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetChatAttachDetail::IsInitialized() const {

  return true;
}

void RequestGetChatAttachDetail::Swap(RequestGetChatAttachDetail* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetChatAttachDetail::GetTypeName() const {
  return "Protocol.RequestGetChatAttachDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetChatAttachDetail::kItemFieldNumber;
#endif  // !_MSC_VER

ResponseGetChatAttachDetail::ResponseGetChatAttachDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetChatAttachDetail::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::ItemData*>(
      ::ItemData::internal_default_instance());
#else
  item_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
#endif
}

ResponseGetChatAttachDetail::ResponseGetChatAttachDetail(const ResponseGetChatAttachDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetChatAttachDetail::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetChatAttachDetail::~ResponseGetChatAttachDetail() {
  SharedDtor();
}

void ResponseGetChatAttachDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete item_;
  }
}

void ResponseGetChatAttachDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetChatAttachDetail& ResponseGetChatAttachDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

ResponseGetChatAttachDetail* ResponseGetChatAttachDetail::default_instance_ = NULL;

ResponseGetChatAttachDetail* ResponseGetChatAttachDetail::New() const {
  return new ResponseGetChatAttachDetail;
}

void ResponseGetChatAttachDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetChatAttachDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemData item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetChatAttachDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemData item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(), output);
  }

}

int ResponseGetChatAttachDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemData item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetChatAttachDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetChatAttachDetail*>(&from));
}

void ResponseGetChatAttachDetail::MergeFrom(const ResponseGetChatAttachDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ItemData::MergeFrom(from.item());
    }
  }
}

void ResponseGetChatAttachDetail::CopyFrom(const ResponseGetChatAttachDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetChatAttachDetail::IsInitialized() const {

  return true;
}

void ResponseGetChatAttachDetail::Swap(ResponseGetChatAttachDetail* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetChatAttachDetail::GetTypeName() const {
  return "Protocol.ResponseGetChatAttachDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSetChatChannel::kChannelFieldNumber;
#endif  // !_MSC_VER

RequestSetChatChannel::RequestSetChatChannel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestSetChatChannel::InitAsDefaultInstance() {
}

RequestSetChatChannel::RequestSetChatChannel(const RequestSetChatChannel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSetChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSetChatChannel::~RequestSetChatChannel() {
  SharedDtor();
}

void RequestSetChatChannel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestSetChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestSetChatChannel& RequestSetChatChannel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

RequestSetChatChannel* RequestSetChatChannel::default_instance_ = NULL;

RequestSetChatChannel* RequestSetChatChannel::New() const {
  return new RequestSetChatChannel;
}

void RequestSetChatChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestSetChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSetChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

}

int RequestSetChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetChatChannel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSetChatChannel*>(&from));
}

void RequestSetChatChannel::MergeFrom(const RequestSetChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
}

void RequestSetChatChannel::CopyFrom(const RequestSetChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetChatChannel::IsInitialized() const {

  return true;
}

void RequestSetChatChannel::Swap(RequestSetChatChannel* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestSetChatChannel::GetTypeName() const {
  return "Protocol.RequestSetChatChannel";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSetChatChannel::kResultFieldNumber;
const int ResponseSetChatChannel::kChannelFieldNumber;
#endif  // !_MSC_VER

ResponseSetChatChannel::ResponseSetChatChannel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseSetChatChannel::InitAsDefaultInstance() {
}

ResponseSetChatChannel::ResponseSetChatChannel(const ResponseSetChatChannel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSetChatChannel::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSetChatChannel::~ResponseSetChatChannel() {
  SharedDtor();
}

void ResponseSetChatChannel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseSetChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseSetChatChannel& ResponseSetChatChannel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoChatting_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChatting_2eproto();
#endif
  return *default_instance_;
}

ResponseSetChatChannel* ResponseSetChatChannel::default_instance_ = NULL;

ResponseSetChatChannel* ResponseSetChatChannel::New() const {
  return new ResponseSetChatChannel;
}

void ResponseSetChatChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseSetChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSetChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

}

int ResponseSetChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSetChatChannel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseSetChatChannel*>(&from));
}

void ResponseSetChatChannel::MergeFrom(const ResponseSetChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
}

void ResponseSetChatChannel::CopyFrom(const ResponseSetChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetChatChannel::IsInitialized() const {

  return true;
}

void ResponseSetChatChannel::Swap(ResponseSetChatChannel* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseSetChatChannel::GetTypeName() const {
  return "Protocol.ResponseSetChatChannel";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
