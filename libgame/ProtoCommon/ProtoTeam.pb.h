// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTeam.proto

#ifndef PROTOBUF_ProtoTeam_2eproto__INCLUDED
#define PROTOBUF_ProtoTeam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoGameData.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoTeam_2eproto();
void protobuf_AssignDesc_ProtoTeam_2eproto();
void protobuf_ShutdownFile_ProtoTeam_2eproto();

class TeamMemberInfo;
class RequestTeamInvite;
class NotifyTeamAskInvite;
class RequestTeamAskInvite;
class NotifyTeamReplaceMember;
class RequestLeaveTeam;
class RequestTeamKickMember;
class NotifyLeaveTeam;
class RequestChangeTeamMaster;
class NotifyChangeTeamMaster;

enum TeamOpCode {
  OP_TEAM_INVITE = 1,
  OP_TEAM_ASK_INVITE = 2,
  OP_TEAM_REPLACE_MEMBER = 3,
  OP_TEAM_LEAVE = 4,
  OP_TEAM_KICK_MEMBER = 5,
  OP_TEAM_CHANGE_MASTER = 6
};
bool TeamOpCode_IsValid(int value);
const TeamOpCode TeamOpCode_MIN = OP_TEAM_INVITE;
const TeamOpCode TeamOpCode_MAX = OP_TEAM_CHANGE_MASTER;
const int TeamOpCode_ARRAYSIZE = TeamOpCode_MAX + 1;

// ===================================================================

class TeamMemberInfo : public ::google::protobuf::MessageLite {
 public:
  TeamMemberInfo();
  virtual ~TeamMemberInfo();

  TeamMemberInfo(const TeamMemberInfo& from);

  inline TeamMemberInfo& operator=(const TeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const TeamMemberInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TeamMemberInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TeamMemberInfo* other);

  // implements Message ----------------------------------------------

  TeamMemberInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TeamMemberInfo& from);
  void MergeFrom(const TeamMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline bool master() const;
  inline void set_master(bool value);

  // optional int32 race = 4;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 4;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 hp = 6;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 mapid = 7;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 7;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional bool online = 8;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 8;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.TeamMemberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_online();
  inline void clear_has_online();

  ::std::string* name_;
  ::google::protobuf::int32 charid_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 level_;
  bool master_;
  bool online_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static TeamMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestTeamInvite : public ::google::protobuf::MessageLite {
 public:
  RequestTeamInvite();
  virtual ~RequestTeamInvite();

  RequestTeamInvite(const RequestTeamInvite& from);

  inline RequestTeamInvite& operator=(const RequestTeamInvite& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestTeamInvite& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestTeamInvite* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestTeamInvite* other);

  // implements Message ----------------------------------------------

  RequestTeamInvite* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestTeamInvite& from);
  void MergeFrom(const RequestTeamInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Protocol.RequestTeamInvite)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static RequestTeamInvite* default_instance_;
};
// -------------------------------------------------------------------

class NotifyTeamAskInvite : public ::google::protobuf::MessageLite {
 public:
  NotifyTeamAskInvite();
  virtual ~NotifyTeamAskInvite();

  NotifyTeamAskInvite(const NotifyTeamAskInvite& from);

  inline NotifyTeamAskInvite& operator=(const NotifyTeamAskInvite& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyTeamAskInvite& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyTeamAskInvite* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyTeamAskInvite* other);

  // implements Message ----------------------------------------------

  NotifyTeamAskInvite* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyTeamAskInvite& from);
  void MergeFrom(const NotifyTeamAskInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyTeamAskInvite)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static NotifyTeamAskInvite* default_instance_;
};
// -------------------------------------------------------------------

class RequestTeamAskInvite : public ::google::protobuf::MessageLite {
 public:
  RequestTeamAskInvite();
  virtual ~RequestTeamAskInvite();

  RequestTeamAskInvite(const RequestTeamAskInvite& from);

  inline RequestTeamAskInvite& operator=(const RequestTeamAskInvite& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestTeamAskInvite& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestTeamAskInvite* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestTeamAskInvite* other);

  // implements Message ----------------------------------------------

  RequestTeamAskInvite* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestTeamAskInvite& from);
  void MergeFrom(const RequestTeamAskInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestTeamAskInvite)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::std::string* name_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static RequestTeamAskInvite* default_instance_;
};
// -------------------------------------------------------------------

class NotifyTeamReplaceMember : public ::google::protobuf::MessageLite {
 public:
  NotifyTeamReplaceMember();
  virtual ~NotifyTeamReplaceMember();

  NotifyTeamReplaceMember(const NotifyTeamReplaceMember& from);

  inline NotifyTeamReplaceMember& operator=(const NotifyTeamReplaceMember& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyTeamReplaceMember& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyTeamReplaceMember* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyTeamReplaceMember* other);

  // implements Message ----------------------------------------------

  NotifyTeamReplaceMember* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyTeamReplaceMember& from);
  void MergeFrom(const NotifyTeamReplaceMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Protocol.TeamMemberInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Protocol::TeamMemberInfo& list(int index) const;
  inline ::Protocol::TeamMemberInfo* mutable_list(int index);
  inline ::Protocol::TeamMemberInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::TeamMemberInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::TeamMemberInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Protocol.NotifyTeamReplaceMember)
 private:

  ::google::protobuf::RepeatedPtrField< ::Protocol::TeamMemberInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static NotifyTeamReplaceMember* default_instance_;
};
// -------------------------------------------------------------------

class RequestLeaveTeam : public ::google::protobuf::MessageLite {
 public:
  RequestLeaveTeam();
  virtual ~RequestLeaveTeam();

  RequestLeaveTeam(const RequestLeaveTeam& from);

  inline RequestLeaveTeam& operator=(const RequestLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestLeaveTeam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestLeaveTeam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestLeaveTeam* other);

  // implements Message ----------------------------------------------

  RequestLeaveTeam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestLeaveTeam& from);
  void MergeFrom(const RequestLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestLeaveTeam)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();

  ::google::protobuf::int32 reserve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static RequestLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class RequestTeamKickMember : public ::google::protobuf::MessageLite {
 public:
  RequestTeamKickMember();
  virtual ~RequestTeamKickMember();

  RequestTeamKickMember(const RequestTeamKickMember& from);

  inline RequestTeamKickMember& operator=(const RequestTeamKickMember& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestTeamKickMember& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestTeamKickMember* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestTeamKickMember* other);

  // implements Message ----------------------------------------------

  RequestTeamKickMember* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestTeamKickMember& from);
  void MergeFrom(const RequestTeamKickMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestTeamKickMember)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static RequestTeamKickMember* default_instance_;
};
// -------------------------------------------------------------------

class NotifyLeaveTeam : public ::google::protobuf::MessageLite {
 public:
  NotifyLeaveTeam();
  virtual ~NotifyLeaveTeam();

  NotifyLeaveTeam(const NotifyLeaveTeam& from);

  inline NotifyLeaveTeam& operator=(const NotifyLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyLeaveTeam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyLeaveTeam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyLeaveTeam* other);

  // implements Message ----------------------------------------------

  NotifyLeaveTeam* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyLeaveTeam& from);
  void MergeFrom(const NotifyLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyLeaveTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static NotifyLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class RequestChangeTeamMaster : public ::google::protobuf::MessageLite {
 public:
  RequestChangeTeamMaster();
  virtual ~RequestChangeTeamMaster();

  RequestChangeTeamMaster(const RequestChangeTeamMaster& from);

  inline RequestChangeTeamMaster& operator=(const RequestChangeTeamMaster& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestChangeTeamMaster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestChangeTeamMaster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestChangeTeamMaster* other);

  // implements Message ----------------------------------------------

  RequestChangeTeamMaster* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestChangeTeamMaster& from);
  void MergeFrom(const RequestChangeTeamMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestChangeTeamMaster)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static RequestChangeTeamMaster* default_instance_;
};
// -------------------------------------------------------------------

class NotifyChangeTeamMaster : public ::google::protobuf::MessageLite {
 public:
  NotifyChangeTeamMaster();
  virtual ~NotifyChangeTeamMaster();

  NotifyChangeTeamMaster(const NotifyChangeTeamMaster& from);

  inline NotifyChangeTeamMaster& operator=(const NotifyChangeTeamMaster& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotifyChangeTeamMaster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotifyChangeTeamMaster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotifyChangeTeamMaster* other);

  // implements Message ----------------------------------------------

  NotifyChangeTeamMaster* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotifyChangeTeamMaster& from);
  void MergeFrom(const NotifyChangeTeamMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.NotifyChangeTeamMaster)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoTeam_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoTeam_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoTeam_2eproto();
  friend void protobuf_ShutdownFile_ProtoTeam_2eproto();

  void InitAsDefaultInstance();
  static NotifyChangeTeamMaster* default_instance_;
};
// ===================================================================


// ===================================================================

// TeamMemberInfo

// optional int32 charid = 1;
inline bool TeamMemberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMemberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMemberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMemberInfo::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 TeamMemberInfo::charid() const {
  return charid_;
}
inline void TeamMemberInfo::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool TeamMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamMemberInfo::name() const {
  return *name_;
}
inline void TeamMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TeamMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamMemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool master = 3;
inline bool TeamMemberInfo::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMemberInfo::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMemberInfo::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMemberInfo::clear_master() {
  master_ = false;
  clear_has_master();
}
inline bool TeamMemberInfo::master() const {
  return master_;
}
inline void TeamMemberInfo::set_master(bool value) {
  set_has_master();
  master_ = value;
}

// optional int32 race = 4;
inline bool TeamMemberInfo::has_race() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamMemberInfo::set_has_race() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamMemberInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamMemberInfo::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 TeamMemberInfo::race() const {
  return race_;
}
inline void TeamMemberInfo::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 level = 5;
inline bool TeamMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamMemberInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamMemberInfo::level() const {
  return level_;
}
inline void TeamMemberInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 hp = 6;
inline bool TeamMemberInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamMemberInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamMemberInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamMemberInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 TeamMemberInfo::hp() const {
  return hp_;
}
inline void TeamMemberInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 mapid = 7;
inline bool TeamMemberInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamMemberInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamMemberInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamMemberInfo::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 TeamMemberInfo::mapid() const {
  return mapid_;
}
inline void TeamMemberInfo::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional bool online = 8;
inline bool TeamMemberInfo::has_online() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamMemberInfo::set_has_online() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamMemberInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamMemberInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool TeamMemberInfo::online() const {
  return online_;
}
inline void TeamMemberInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// RequestTeamInvite

// optional string name = 1;
inline bool RequestTeamInvite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestTeamInvite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestTeamInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestTeamInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestTeamInvite::name() const {
  return *name_;
}
inline void RequestTeamInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestTeamInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestTeamInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestTeamInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestTeamInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestTeamInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NotifyTeamAskInvite

// optional string name = 1;
inline bool NotifyTeamAskInvite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyTeamAskInvite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyTeamAskInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyTeamAskInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NotifyTeamAskInvite::name() const {
  return *name_;
}
inline void NotifyTeamAskInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyTeamAskInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyTeamAskInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyTeamAskInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NotifyTeamAskInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifyTeamAskInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestTeamAskInvite

// optional string name = 1;
inline bool RequestTeamAskInvite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestTeamAskInvite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestTeamAskInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestTeamAskInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestTeamAskInvite::name() const {
  return *name_;
}
inline void RequestTeamAskInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestTeamAskInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestTeamAskInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestTeamAskInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestTeamAskInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestTeamAskInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool agree = 2;
inline bool RequestTeamAskInvite::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestTeamAskInvite::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestTeamAskInvite::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestTeamAskInvite::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool RequestTeamAskInvite::agree() const {
  return agree_;
}
inline void RequestTeamAskInvite::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// NotifyTeamReplaceMember

// repeated .Protocol.TeamMemberInfo list = 1;
inline int NotifyTeamReplaceMember::list_size() const {
  return list_.size();
}
inline void NotifyTeamReplaceMember::clear_list() {
  list_.Clear();
}
inline const ::Protocol::TeamMemberInfo& NotifyTeamReplaceMember::list(int index) const {
  return list_.Get(index);
}
inline ::Protocol::TeamMemberInfo* NotifyTeamReplaceMember::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::Protocol::TeamMemberInfo* NotifyTeamReplaceMember::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::TeamMemberInfo >&
NotifyTeamReplaceMember::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::TeamMemberInfo >*
NotifyTeamReplaceMember::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// RequestLeaveTeam

// optional int32 reserve = 1;
inline bool RequestLeaveTeam::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestLeaveTeam::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestLeaveTeam::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestLeaveTeam::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 RequestLeaveTeam::reserve() const {
  return reserve_;
}
inline void RequestLeaveTeam::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// RequestTeamKickMember

// optional int32 charid = 1;
inline bool RequestTeamKickMember::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestTeamKickMember::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestTeamKickMember::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestTeamKickMember::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 RequestTeamKickMember::charid() const {
  return charid_;
}
inline void RequestTeamKickMember::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// NotifyLeaveTeam

// optional int32 charid = 1;
inline bool NotifyLeaveTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyLeaveTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyLeaveTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyLeaveTeam::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 NotifyLeaveTeam::charid() const {
  return charid_;
}
inline void NotifyLeaveTeam::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// RequestChangeTeamMaster

// optional int32 charid = 1;
inline bool RequestChangeTeamMaster::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestChangeTeamMaster::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestChangeTeamMaster::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestChangeTeamMaster::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 RequestChangeTeamMaster::charid() const {
  return charid_;
}
inline void RequestChangeTeamMaster::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// NotifyChangeTeamMaster

// optional int32 charid = 1;
inline bool NotifyChangeTeamMaster::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyChangeTeamMaster::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyChangeTeamMaster::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyChangeTeamMaster::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 NotifyChangeTeamMaster::charid() const {
  return charid_;
}
inline void NotifyChangeTeamMaster::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoTeam_2eproto__INCLUDED
