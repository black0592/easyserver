// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoTeam_2eproto() {
  delete TeamMemberInfo::default_instance_;
  delete RequestTeamInvite::default_instance_;
  delete NotifyTeamAskInvite::default_instance_;
  delete RequestTeamAskInvite::default_instance_;
  delete NotifyTeamReplaceMember::default_instance_;
  delete RequestLeaveTeam::default_instance_;
  delete RequestTeamKickMember::default_instance_;
  delete NotifyLeaveTeam::default_instance_;
  delete RequestChangeTeamMaster::default_instance_;
  delete NotifyChangeTeamMaster::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoTeam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  RequestTeamInvite::default_instance_ = new RequestTeamInvite();
  NotifyTeamAskInvite::default_instance_ = new NotifyTeamAskInvite();
  RequestTeamAskInvite::default_instance_ = new RequestTeamAskInvite();
  NotifyTeamReplaceMember::default_instance_ = new NotifyTeamReplaceMember();
  RequestLeaveTeam::default_instance_ = new RequestLeaveTeam();
  RequestTeamKickMember::default_instance_ = new RequestTeamKickMember();
  NotifyLeaveTeam::default_instance_ = new NotifyLeaveTeam();
  RequestChangeTeamMaster::default_instance_ = new RequestChangeTeamMaster();
  NotifyChangeTeamMaster::default_instance_ = new NotifyChangeTeamMaster();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  RequestTeamInvite::default_instance_->InitAsDefaultInstance();
  NotifyTeamAskInvite::default_instance_->InitAsDefaultInstance();
  RequestTeamAskInvite::default_instance_->InitAsDefaultInstance();
  NotifyTeamReplaceMember::default_instance_->InitAsDefaultInstance();
  RequestLeaveTeam::default_instance_->InitAsDefaultInstance();
  RequestTeamKickMember::default_instance_->InitAsDefaultInstance();
  NotifyLeaveTeam::default_instance_->InitAsDefaultInstance();
  RequestChangeTeamMaster::default_instance_->InitAsDefaultInstance();
  NotifyChangeTeamMaster::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoTeam_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoTeam_2eproto_once_);
void protobuf_AddDesc_ProtoTeam_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoTeam_2eproto_once_,
                 &protobuf_AddDesc_ProtoTeam_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoTeam_2eproto {
  StaticDescriptorInitializer_ProtoTeam_2eproto() {
    protobuf_AddDesc_ProtoTeam_2eproto();
  }
} static_descriptor_initializer_ProtoTeam_2eproto_;
#endif
bool TeamOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kCharidFieldNumber;
const int TeamMemberInfo::kNameFieldNumber;
const int TeamMemberInfo::kMasterFieldNumber;
const int TeamMemberInfo::kRaceFieldNumber;
const int TeamMemberInfo::kLevelFieldNumber;
const int TeamMemberInfo::kHpFieldNumber;
const int TeamMemberInfo::kMapidFieldNumber;
const int TeamMemberInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TeamMemberInfo::InitAsDefaultInstance() {
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_ = false;
  race_ = 0;
  level_ = 0;
  hp_ = 0;
  mapid_ = 0;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TeamMemberInfo& TeamMemberInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    master_ = false;
    race_ = 0;
    level_ = 0;
    hp_ = 0;
    mapid_ = 0;
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_race;
        break;
      }

      // optional int32 race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online;
        break;
      }

      // optional bool online = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bool master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // optional int32 race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 mapid = 7;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapid(), output);
  }

  // optional bool online = 8;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->online(), output);
  }

}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool master = 3;
    if (has_master()) {
      total_size += 1 + 1;
    }

    // optional int32 race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mapid = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional bool online = 8;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TeamMemberInfo*>(&from));
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {

  return true;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(master_, other->master_);
    std::swap(race_, other->race_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(mapid_, other->mapid_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TeamMemberInfo::GetTypeName() const {
  return "Protocol.TeamMemberInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTeamInvite::kNameFieldNumber;
#endif  // !_MSC_VER

RequestTeamInvite::RequestTeamInvite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTeamInvite::InitAsDefaultInstance() {
}

RequestTeamInvite::RequestTeamInvite(const RequestTeamInvite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTeamInvite::~RequestTeamInvite() {
  SharedDtor();
}

void RequestTeamInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTeamInvite& RequestTeamInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

RequestTeamInvite* RequestTeamInvite::default_instance_ = NULL;

RequestTeamInvite* RequestTeamInvite::New() const {
  return new RequestTeamInvite;
}

void RequestTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int RequestTeamInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTeamInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTeamInvite*>(&from));
}

void RequestTeamInvite::MergeFrom(const RequestTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void RequestTeamInvite::CopyFrom(const RequestTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTeamInvite::IsInitialized() const {

  return true;
}

void RequestTeamInvite::Swap(RequestTeamInvite* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTeamInvite::GetTypeName() const {
  return "Protocol.RequestTeamInvite";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTeamAskInvite::kNameFieldNumber;
#endif  // !_MSC_VER

NotifyTeamAskInvite::NotifyTeamAskInvite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyTeamAskInvite::InitAsDefaultInstance() {
}

NotifyTeamAskInvite::NotifyTeamAskInvite(const NotifyTeamAskInvite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTeamAskInvite::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTeamAskInvite::~NotifyTeamAskInvite() {
  SharedDtor();
}

void NotifyTeamAskInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyTeamAskInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyTeamAskInvite& NotifyTeamAskInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

NotifyTeamAskInvite* NotifyTeamAskInvite::default_instance_ = NULL;

NotifyTeamAskInvite* NotifyTeamAskInvite::New() const {
  return new NotifyTeamAskInvite;
}

void NotifyTeamAskInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyTeamAskInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTeamAskInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int NotifyTeamAskInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTeamAskInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyTeamAskInvite*>(&from));
}

void NotifyTeamAskInvite::MergeFrom(const NotifyTeamAskInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void NotifyTeamAskInvite::CopyFrom(const NotifyTeamAskInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTeamAskInvite::IsInitialized() const {

  return true;
}

void NotifyTeamAskInvite::Swap(NotifyTeamAskInvite* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyTeamAskInvite::GetTypeName() const {
  return "Protocol.NotifyTeamAskInvite";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTeamAskInvite::kNameFieldNumber;
const int RequestTeamAskInvite::kAgreeFieldNumber;
#endif  // !_MSC_VER

RequestTeamAskInvite::RequestTeamAskInvite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTeamAskInvite::InitAsDefaultInstance() {
}

RequestTeamAskInvite::RequestTeamAskInvite(const RequestTeamAskInvite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTeamAskInvite::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTeamAskInvite::~RequestTeamAskInvite() {
  SharedDtor();
}

void RequestTeamAskInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTeamAskInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTeamAskInvite& RequestTeamAskInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

RequestTeamAskInvite* RequestTeamAskInvite::default_instance_ = NULL;

RequestTeamAskInvite* RequestTeamAskInvite::New() const {
  return new RequestTeamAskInvite;
}

void RequestTeamAskInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTeamAskInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTeamAskInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

}

int RequestTeamAskInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTeamAskInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTeamAskInvite*>(&from));
}

void RequestTeamAskInvite::MergeFrom(const RequestTeamAskInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
}

void RequestTeamAskInvite::CopyFrom(const RequestTeamAskInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTeamAskInvite::IsInitialized() const {

  return true;
}

void RequestTeamAskInvite::Swap(RequestTeamAskInvite* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTeamAskInvite::GetTypeName() const {
  return "Protocol.RequestTeamAskInvite";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTeamReplaceMember::kListFieldNumber;
#endif  // !_MSC_VER

NotifyTeamReplaceMember::NotifyTeamReplaceMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyTeamReplaceMember::InitAsDefaultInstance() {
}

NotifyTeamReplaceMember::NotifyTeamReplaceMember(const NotifyTeamReplaceMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTeamReplaceMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTeamReplaceMember::~NotifyTeamReplaceMember() {
  SharedDtor();
}

void NotifyTeamReplaceMember::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyTeamReplaceMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyTeamReplaceMember& NotifyTeamReplaceMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

NotifyTeamReplaceMember* NotifyTeamReplaceMember::default_instance_ = NULL;

NotifyTeamReplaceMember* NotifyTeamReplaceMember::New() const {
  return new NotifyTeamReplaceMember;
}

void NotifyTeamReplaceMember::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyTeamReplaceMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.TeamMemberInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTeamReplaceMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.TeamMemberInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

}

int NotifyTeamReplaceMember::ByteSize() const {
  int total_size = 0;

  // repeated .Protocol.TeamMemberInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTeamReplaceMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyTeamReplaceMember*>(&from));
}

void NotifyTeamReplaceMember::MergeFrom(const NotifyTeamReplaceMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
}

void NotifyTeamReplaceMember::CopyFrom(const NotifyTeamReplaceMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTeamReplaceMember::IsInitialized() const {

  return true;
}

void NotifyTeamReplaceMember::Swap(NotifyTeamReplaceMember* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyTeamReplaceMember::GetTypeName() const {
  return "Protocol.NotifyTeamReplaceMember";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLeaveTeam::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestLeaveTeam::RequestLeaveTeam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestLeaveTeam::InitAsDefaultInstance() {
}

RequestLeaveTeam::RequestLeaveTeam(const RequestLeaveTeam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLeaveTeam::~RequestLeaveTeam() {
  SharedDtor();
}

void RequestLeaveTeam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestLeaveTeam& RequestLeaveTeam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

RequestLeaveTeam* RequestLeaveTeam::default_instance_ = NULL;

RequestLeaveTeam* RequestLeaveTeam::New() const {
  return new RequestLeaveTeam;
}

void RequestLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLeaveTeam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestLeaveTeam*>(&from));
}

void RequestLeaveTeam::MergeFrom(const RequestLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestLeaveTeam::CopyFrom(const RequestLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaveTeam::IsInitialized() const {

  return true;
}

void RequestLeaveTeam::Swap(RequestLeaveTeam* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestLeaveTeam::GetTypeName() const {
  return "Protocol.RequestLeaveTeam";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTeamKickMember::kCharidFieldNumber;
#endif  // !_MSC_VER

RequestTeamKickMember::RequestTeamKickMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTeamKickMember::InitAsDefaultInstance() {
}

RequestTeamKickMember::RequestTeamKickMember(const RequestTeamKickMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTeamKickMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTeamKickMember::~RequestTeamKickMember() {
  SharedDtor();
}

void RequestTeamKickMember::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTeamKickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTeamKickMember& RequestTeamKickMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

RequestTeamKickMember* RequestTeamKickMember::default_instance_ = NULL;

RequestTeamKickMember* RequestTeamKickMember::New() const {
  return new RequestTeamKickMember;
}

void RequestTeamKickMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTeamKickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTeamKickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int RequestTeamKickMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTeamKickMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTeamKickMember*>(&from));
}

void RequestTeamKickMember::MergeFrom(const RequestTeamKickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void RequestTeamKickMember::CopyFrom(const RequestTeamKickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTeamKickMember::IsInitialized() const {

  return true;
}

void RequestTeamKickMember::Swap(RequestTeamKickMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTeamKickMember::GetTypeName() const {
  return "Protocol.RequestTeamKickMember";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLeaveTeam::kCharidFieldNumber;
#endif  // !_MSC_VER

NotifyLeaveTeam::NotifyLeaveTeam()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyLeaveTeam::InitAsDefaultInstance() {
}

NotifyLeaveTeam::NotifyLeaveTeam(const NotifyLeaveTeam& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLeaveTeam::~NotifyLeaveTeam() {
  SharedDtor();
}

void NotifyLeaveTeam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyLeaveTeam& NotifyLeaveTeam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

NotifyLeaveTeam* NotifyLeaveTeam::default_instance_ = NULL;

NotifyLeaveTeam* NotifyLeaveTeam::New() const {
  return new NotifyLeaveTeam;
}

void NotifyLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int NotifyLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLeaveTeam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyLeaveTeam*>(&from));
}

void NotifyLeaveTeam::MergeFrom(const NotifyLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void NotifyLeaveTeam::CopyFrom(const NotifyLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLeaveTeam::IsInitialized() const {

  return true;
}

void NotifyLeaveTeam::Swap(NotifyLeaveTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyLeaveTeam::GetTypeName() const {
  return "Protocol.NotifyLeaveTeam";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChangeTeamMaster::kCharidFieldNumber;
#endif  // !_MSC_VER

RequestChangeTeamMaster::RequestChangeTeamMaster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestChangeTeamMaster::InitAsDefaultInstance() {
}

RequestChangeTeamMaster::RequestChangeTeamMaster(const RequestChangeTeamMaster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChangeTeamMaster::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChangeTeamMaster::~RequestChangeTeamMaster() {
  SharedDtor();
}

void RequestChangeTeamMaster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestChangeTeamMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestChangeTeamMaster& RequestChangeTeamMaster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

RequestChangeTeamMaster* RequestChangeTeamMaster::default_instance_ = NULL;

RequestChangeTeamMaster* RequestChangeTeamMaster::New() const {
  return new RequestChangeTeamMaster;
}

void RequestChangeTeamMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestChangeTeamMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChangeTeamMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int RequestChangeTeamMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChangeTeamMaster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestChangeTeamMaster*>(&from));
}

void RequestChangeTeamMaster::MergeFrom(const RequestChangeTeamMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void RequestChangeTeamMaster::CopyFrom(const RequestChangeTeamMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeTeamMaster::IsInitialized() const {

  return true;
}

void RequestChangeTeamMaster::Swap(RequestChangeTeamMaster* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestChangeTeamMaster::GetTypeName() const {
  return "Protocol.RequestChangeTeamMaster";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyChangeTeamMaster::kCharidFieldNumber;
#endif  // !_MSC_VER

NotifyChangeTeamMaster::NotifyChangeTeamMaster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyChangeTeamMaster::InitAsDefaultInstance() {
}

NotifyChangeTeamMaster::NotifyChangeTeamMaster(const NotifyChangeTeamMaster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyChangeTeamMaster::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyChangeTeamMaster::~NotifyChangeTeamMaster() {
  SharedDtor();
}

void NotifyChangeTeamMaster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyChangeTeamMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyChangeTeamMaster& NotifyChangeTeamMaster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoTeam_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTeam_2eproto();
#endif
  return *default_instance_;
}

NotifyChangeTeamMaster* NotifyChangeTeamMaster::default_instance_ = NULL;

NotifyChangeTeamMaster* NotifyChangeTeamMaster::New() const {
  return new NotifyChangeTeamMaster;
}

void NotifyChangeTeamMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyChangeTeamMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyChangeTeamMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

}

int NotifyChangeTeamMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyChangeTeamMaster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyChangeTeamMaster*>(&from));
}

void NotifyChangeTeamMaster::MergeFrom(const NotifyChangeTeamMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
}

void NotifyChangeTeamMaster::CopyFrom(const NotifyChangeTeamMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyChangeTeamMaster::IsInitialized() const {

  return true;
}

void NotifyChangeTeamMaster::Swap(NotifyChangeTeamMaster* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyChangeTeamMaster::GetTypeName() const {
  return "Protocol.NotifyChangeTeamMaster";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
