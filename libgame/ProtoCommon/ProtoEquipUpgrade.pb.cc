// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoEquipUpgrade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoEquipUpgrade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoEquipUpgrade_2eproto() {
  delete RequestUpgradeEquip::default_instance_;
  delete ResponseUpgradeEquip::default_instance_;
  delete RequestAddEquipGroove::default_instance_;
  delete ResponseAddEquipGroove::default_instance_;
  delete RequestFillEquipGroove::default_instance_;
  delete ResponseFillEquipGroove::default_instance_;
  delete RequestRemoveEquipJewel::default_instance_;
  delete ResponseRemoveEquipJewel::default_instance_;
  delete RequestUpgradeJewel::default_instance_;
  delete ResponseUpgradeJewel::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoEquipUpgrade_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoEquipUpgrade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  RequestUpgradeEquip::default_instance_ = new RequestUpgradeEquip();
  ResponseUpgradeEquip::default_instance_ = new ResponseUpgradeEquip();
  RequestAddEquipGroove::default_instance_ = new RequestAddEquipGroove();
  ResponseAddEquipGroove::default_instance_ = new ResponseAddEquipGroove();
  RequestFillEquipGroove::default_instance_ = new RequestFillEquipGroove();
  ResponseFillEquipGroove::default_instance_ = new ResponseFillEquipGroove();
  RequestRemoveEquipJewel::default_instance_ = new RequestRemoveEquipJewel();
  ResponseRemoveEquipJewel::default_instance_ = new ResponseRemoveEquipJewel();
  RequestUpgradeJewel::default_instance_ = new RequestUpgradeJewel();
  ResponseUpgradeJewel::default_instance_ = new ResponseUpgradeJewel();
  RequestUpgradeEquip::default_instance_->InitAsDefaultInstance();
  ResponseUpgradeEquip::default_instance_->InitAsDefaultInstance();
  RequestAddEquipGroove::default_instance_->InitAsDefaultInstance();
  ResponseAddEquipGroove::default_instance_->InitAsDefaultInstance();
  RequestFillEquipGroove::default_instance_->InitAsDefaultInstance();
  ResponseFillEquipGroove::default_instance_->InitAsDefaultInstance();
  RequestRemoveEquipJewel::default_instance_->InitAsDefaultInstance();
  ResponseRemoveEquipJewel::default_instance_->InitAsDefaultInstance();
  RequestUpgradeJewel::default_instance_->InitAsDefaultInstance();
  ResponseUpgradeJewel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoEquipUpgrade_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoEquipUpgrade_2eproto_once_);
void protobuf_AddDesc_ProtoEquipUpgrade_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoEquipUpgrade_2eproto_once_,
                 &protobuf_AddDesc_ProtoEquipUpgrade_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoEquipUpgrade_2eproto {
  StaticDescriptorInitializer_ProtoEquipUpgrade_2eproto() {
    protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
  }
} static_descriptor_initializer_ProtoEquipUpgrade_2eproto_;
#endif
bool EquipUpgradeOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpgradeEquip::kEquipLocFieldNumber;
#endif  // !_MSC_VER

RequestUpgradeEquip::RequestUpgradeEquip()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestUpgradeEquip::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  equip_loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

RequestUpgradeEquip::RequestUpgradeEquip(const RequestUpgradeEquip& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpgradeEquip::SharedCtor() {
  _cached_size_ = 0;
  equip_loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpgradeEquip::~RequestUpgradeEquip() {
  SharedDtor();
}

void RequestUpgradeEquip::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equip_loc_;
  }
}

void RequestUpgradeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpgradeEquip& RequestUpgradeEquip::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

RequestUpgradeEquip* RequestUpgradeEquip::default_instance_ = NULL;

RequestUpgradeEquip* RequestUpgradeEquip::New() const {
  return new RequestUpgradeEquip;
}

void RequestUpgradeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equip_loc()) {
      if (equip_loc_ != NULL) equip_loc_->::ItemLoc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestUpgradeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc equip_loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpgradeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc equip_loc = 1;
  if (has_equip_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip_loc(), output);
  }

}

int RequestUpgradeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc equip_loc = 1;
    if (has_equip_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_loc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpgradeEquip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpgradeEquip*>(&from));
}

void RequestUpgradeEquip::MergeFrom(const RequestUpgradeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_loc()) {
      mutable_equip_loc()->::ItemLoc::MergeFrom(from.equip_loc());
    }
  }
}

void RequestUpgradeEquip::CopyFrom(const RequestUpgradeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpgradeEquip::IsInitialized() const {

  return true;
}

void RequestUpgradeEquip::Swap(RequestUpgradeEquip* other) {
  if (other != this) {
    std::swap(equip_loc_, other->equip_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpgradeEquip::GetTypeName() const {
  return "Protocol.RequestUpgradeEquip";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUpgradeEquip::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseUpgradeEquip::ResponseUpgradeEquip()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseUpgradeEquip::InitAsDefaultInstance() {
}

ResponseUpgradeEquip::ResponseUpgradeEquip(const ResponseUpgradeEquip& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUpgradeEquip::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpgradeEquip::~ResponseUpgradeEquip() {
  SharedDtor();
}

void ResponseUpgradeEquip::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseUpgradeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseUpgradeEquip& ResponseUpgradeEquip::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

ResponseUpgradeEquip* ResponseUpgradeEquip::default_instance_ = NULL;

ResponseUpgradeEquip* ResponseUpgradeEquip::New() const {
  return new ResponseUpgradeEquip;
}

void ResponseUpgradeEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseUpgradeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUpgradeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseUpgradeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpgradeEquip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseUpgradeEquip*>(&from));
}

void ResponseUpgradeEquip::MergeFrom(const ResponseUpgradeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseUpgradeEquip::CopyFrom(const ResponseUpgradeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpgradeEquip::IsInitialized() const {

  return true;
}

void ResponseUpgradeEquip::Swap(ResponseUpgradeEquip* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseUpgradeEquip::GetTypeName() const {
  return "Protocol.ResponseUpgradeEquip";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAddEquipGroove::kEquipLocFieldNumber;
#endif  // !_MSC_VER

RequestAddEquipGroove::RequestAddEquipGroove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestAddEquipGroove::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  equip_loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

RequestAddEquipGroove::RequestAddEquipGroove(const RequestAddEquipGroove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestAddEquipGroove::SharedCtor() {
  _cached_size_ = 0;
  equip_loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAddEquipGroove::~RequestAddEquipGroove() {
  SharedDtor();
}

void RequestAddEquipGroove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equip_loc_;
  }
}

void RequestAddEquipGroove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestAddEquipGroove& RequestAddEquipGroove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

RequestAddEquipGroove* RequestAddEquipGroove::default_instance_ = NULL;

RequestAddEquipGroove* RequestAddEquipGroove::New() const {
  return new RequestAddEquipGroove;
}

void RequestAddEquipGroove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equip_loc()) {
      if (equip_loc_ != NULL) equip_loc_->::ItemLoc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestAddEquipGroove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc equip_loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestAddEquipGroove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc equip_loc = 1;
  if (has_equip_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip_loc(), output);
  }

}

int RequestAddEquipGroove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc equip_loc = 1;
    if (has_equip_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_loc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAddEquipGroove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestAddEquipGroove*>(&from));
}

void RequestAddEquipGroove::MergeFrom(const RequestAddEquipGroove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_loc()) {
      mutable_equip_loc()->::ItemLoc::MergeFrom(from.equip_loc());
    }
  }
}

void RequestAddEquipGroove::CopyFrom(const RequestAddEquipGroove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddEquipGroove::IsInitialized() const {

  return true;
}

void RequestAddEquipGroove::Swap(RequestAddEquipGroove* other) {
  if (other != this) {
    std::swap(equip_loc_, other->equip_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestAddEquipGroove::GetTypeName() const {
  return "Protocol.RequestAddEquipGroove";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseAddEquipGroove::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseAddEquipGroove::ResponseAddEquipGroove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseAddEquipGroove::InitAsDefaultInstance() {
}

ResponseAddEquipGroove::ResponseAddEquipGroove(const ResponseAddEquipGroove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseAddEquipGroove::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseAddEquipGroove::~ResponseAddEquipGroove() {
  SharedDtor();
}

void ResponseAddEquipGroove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseAddEquipGroove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseAddEquipGroove& ResponseAddEquipGroove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

ResponseAddEquipGroove* ResponseAddEquipGroove::default_instance_ = NULL;

ResponseAddEquipGroove* ResponseAddEquipGroove::New() const {
  return new ResponseAddEquipGroove;
}

void ResponseAddEquipGroove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseAddEquipGroove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseAddEquipGroove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseAddEquipGroove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAddEquipGroove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseAddEquipGroove*>(&from));
}

void ResponseAddEquipGroove::MergeFrom(const ResponseAddEquipGroove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseAddEquipGroove::CopyFrom(const ResponseAddEquipGroove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddEquipGroove::IsInitialized() const {

  return true;
}

void ResponseAddEquipGroove::Swap(ResponseAddEquipGroove* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseAddEquipGroove::GetTypeName() const {
  return "Protocol.ResponseAddEquipGroove";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFillEquipGroove::kEquipLocFieldNumber;
const int RequestFillEquipGroove::kStuffLocFieldNumber;
#endif  // !_MSC_VER

RequestFillEquipGroove::RequestFillEquipGroove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestFillEquipGroove::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  equip_loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stuff_loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  stuff_loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

RequestFillEquipGroove::RequestFillEquipGroove(const RequestFillEquipGroove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFillEquipGroove::SharedCtor() {
  _cached_size_ = 0;
  equip_loc_ = NULL;
  stuff_loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFillEquipGroove::~RequestFillEquipGroove() {
  SharedDtor();
}

void RequestFillEquipGroove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equip_loc_;
    delete stuff_loc_;
  }
}

void RequestFillEquipGroove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestFillEquipGroove& RequestFillEquipGroove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

RequestFillEquipGroove* RequestFillEquipGroove::default_instance_ = NULL;

RequestFillEquipGroove* RequestFillEquipGroove::New() const {
  return new RequestFillEquipGroove;
}

void RequestFillEquipGroove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equip_loc()) {
      if (equip_loc_ != NULL) equip_loc_->::ItemLoc::Clear();
    }
    if (has_stuff_loc()) {
      if (stuff_loc_ != NULL) stuff_loc_->::ItemLoc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestFillEquipGroove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc equip_loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stuff_loc;
        break;
      }

      // optional .ItemLoc stuff_loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stuff_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuff_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFillEquipGroove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc equip_loc = 1;
  if (has_equip_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip_loc(), output);
  }

  // optional .ItemLoc stuff_loc = 2;
  if (has_stuff_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stuff_loc(), output);
  }

}

int RequestFillEquipGroove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc equip_loc = 1;
    if (has_equip_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_loc());
    }

    // optional .ItemLoc stuff_loc = 2;
    if (has_stuff_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuff_loc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFillEquipGroove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestFillEquipGroove*>(&from));
}

void RequestFillEquipGroove::MergeFrom(const RequestFillEquipGroove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_loc()) {
      mutable_equip_loc()->::ItemLoc::MergeFrom(from.equip_loc());
    }
    if (from.has_stuff_loc()) {
      mutable_stuff_loc()->::ItemLoc::MergeFrom(from.stuff_loc());
    }
  }
}

void RequestFillEquipGroove::CopyFrom(const RequestFillEquipGroove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFillEquipGroove::IsInitialized() const {

  return true;
}

void RequestFillEquipGroove::Swap(RequestFillEquipGroove* other) {
  if (other != this) {
    std::swap(equip_loc_, other->equip_loc_);
    std::swap(stuff_loc_, other->stuff_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestFillEquipGroove::GetTypeName() const {
  return "Protocol.RequestFillEquipGroove";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFillEquipGroove::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseFillEquipGroove::ResponseFillEquipGroove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseFillEquipGroove::InitAsDefaultInstance() {
}

ResponseFillEquipGroove::ResponseFillEquipGroove(const ResponseFillEquipGroove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFillEquipGroove::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFillEquipGroove::~ResponseFillEquipGroove() {
  SharedDtor();
}

void ResponseFillEquipGroove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseFillEquipGroove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseFillEquipGroove& ResponseFillEquipGroove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

ResponseFillEquipGroove* ResponseFillEquipGroove::default_instance_ = NULL;

ResponseFillEquipGroove* ResponseFillEquipGroove::New() const {
  return new ResponseFillEquipGroove;
}

void ResponseFillEquipGroove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseFillEquipGroove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFillEquipGroove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseFillEquipGroove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFillEquipGroove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseFillEquipGroove*>(&from));
}

void ResponseFillEquipGroove::MergeFrom(const ResponseFillEquipGroove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseFillEquipGroove::CopyFrom(const ResponseFillEquipGroove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFillEquipGroove::IsInitialized() const {

  return true;
}

void ResponseFillEquipGroove::Swap(ResponseFillEquipGroove* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseFillEquipGroove::GetTypeName() const {
  return "Protocol.ResponseFillEquipGroove";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRemoveEquipJewel::kEquipLocFieldNumber;
const int RequestRemoveEquipJewel::kIndexFieldNumber;
const int RequestRemoveEquipJewel::kDestroyFieldNumber;
#endif  // !_MSC_VER

RequestRemoveEquipJewel::RequestRemoveEquipJewel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestRemoveEquipJewel::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  equip_loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

RequestRemoveEquipJewel::RequestRemoveEquipJewel(const RequestRemoveEquipJewel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRemoveEquipJewel::SharedCtor() {
  _cached_size_ = 0;
  equip_loc_ = NULL;
  index_ = 0;
  destroy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRemoveEquipJewel::~RequestRemoveEquipJewel() {
  SharedDtor();
}

void RequestRemoveEquipJewel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equip_loc_;
  }
}

void RequestRemoveEquipJewel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestRemoveEquipJewel& RequestRemoveEquipJewel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

RequestRemoveEquipJewel* RequestRemoveEquipJewel::default_instance_ = NULL;

RequestRemoveEquipJewel* RequestRemoveEquipJewel::New() const {
  return new RequestRemoveEquipJewel;
}

void RequestRemoveEquipJewel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equip_loc()) {
      if (equip_loc_ != NULL) equip_loc_->::ItemLoc::Clear();
    }
    index_ = 0;
    destroy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestRemoveEquipJewel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc equip_loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destroy;
        break;
      }

      // optional bool destroy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_)));
          set_has_destroy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRemoveEquipJewel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc equip_loc = 1;
  if (has_equip_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equip_loc(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional bool destroy = 3;
  if (has_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->destroy(), output);
  }

}

int RequestRemoveEquipJewel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc equip_loc = 1;
    if (has_equip_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_loc());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional bool destroy = 3;
    if (has_destroy()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRemoveEquipJewel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestRemoveEquipJewel*>(&from));
}

void RequestRemoveEquipJewel::MergeFrom(const RequestRemoveEquipJewel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_loc()) {
      mutable_equip_loc()->::ItemLoc::MergeFrom(from.equip_loc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_destroy()) {
      set_destroy(from.destroy());
    }
  }
}

void RequestRemoveEquipJewel::CopyFrom(const RequestRemoveEquipJewel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRemoveEquipJewel::IsInitialized() const {

  return true;
}

void RequestRemoveEquipJewel::Swap(RequestRemoveEquipJewel* other) {
  if (other != this) {
    std::swap(equip_loc_, other->equip_loc_);
    std::swap(index_, other->index_);
    std::swap(destroy_, other->destroy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestRemoveEquipJewel::GetTypeName() const {
  return "Protocol.RequestRemoveEquipJewel";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRemoveEquipJewel::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseRemoveEquipJewel::ResponseRemoveEquipJewel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseRemoveEquipJewel::InitAsDefaultInstance() {
}

ResponseRemoveEquipJewel::ResponseRemoveEquipJewel(const ResponseRemoveEquipJewel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRemoveEquipJewel::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRemoveEquipJewel::~ResponseRemoveEquipJewel() {
  SharedDtor();
}

void ResponseRemoveEquipJewel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseRemoveEquipJewel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseRemoveEquipJewel& ResponseRemoveEquipJewel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

ResponseRemoveEquipJewel* ResponseRemoveEquipJewel::default_instance_ = NULL;

ResponseRemoveEquipJewel* ResponseRemoveEquipJewel::New() const {
  return new ResponseRemoveEquipJewel;
}

void ResponseRemoveEquipJewel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseRemoveEquipJewel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRemoveEquipJewel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseRemoveEquipJewel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRemoveEquipJewel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseRemoveEquipJewel*>(&from));
}

void ResponseRemoveEquipJewel::MergeFrom(const ResponseRemoveEquipJewel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseRemoveEquipJewel::CopyFrom(const ResponseRemoveEquipJewel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRemoveEquipJewel::IsInitialized() const {

  return true;
}

void ResponseRemoveEquipJewel::Swap(ResponseRemoveEquipJewel* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseRemoveEquipJewel::GetTypeName() const {
  return "Protocol.ResponseRemoveEquipJewel";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpgradeJewel::kLocFieldNumber;
#endif  // !_MSC_VER

RequestUpgradeJewel::RequestUpgradeJewel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestUpgradeJewel::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

RequestUpgradeJewel::RequestUpgradeJewel(const RequestUpgradeJewel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpgradeJewel::SharedCtor() {
  _cached_size_ = 0;
  loc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpgradeJewel::~RequestUpgradeJewel() {
  SharedDtor();
}

void RequestUpgradeJewel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
  }
}

void RequestUpgradeJewel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestUpgradeJewel& RequestUpgradeJewel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

RequestUpgradeJewel* RequestUpgradeJewel::default_instance_ = NULL;

RequestUpgradeJewel* RequestUpgradeJewel::New() const {
  return new RequestUpgradeJewel;
}

void RequestUpgradeJewel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loc()) {
      if (loc_ != NULL) loc_->::ItemLoc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestUpgradeJewel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpgradeJewel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc loc = 1;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->loc(), output);
  }

}

int RequestUpgradeJewel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc loc = 1;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpgradeJewel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestUpgradeJewel*>(&from));
}

void RequestUpgradeJewel::MergeFrom(const RequestUpgradeJewel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loc()) {
      mutable_loc()->::ItemLoc::MergeFrom(from.loc());
    }
  }
}

void RequestUpgradeJewel::CopyFrom(const RequestUpgradeJewel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpgradeJewel::IsInitialized() const {

  return true;
}

void RequestUpgradeJewel::Swap(RequestUpgradeJewel* other) {
  if (other != this) {
    std::swap(loc_, other->loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestUpgradeJewel::GetTypeName() const {
  return "Protocol.RequestUpgradeJewel";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUpgradeJewel::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseUpgradeJewel::ResponseUpgradeJewel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseUpgradeJewel::InitAsDefaultInstance() {
}

ResponseUpgradeJewel::ResponseUpgradeJewel(const ResponseUpgradeJewel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUpgradeJewel::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpgradeJewel::~ResponseUpgradeJewel() {
  SharedDtor();
}

void ResponseUpgradeJewel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseUpgradeJewel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseUpgradeJewel& ResponseUpgradeJewel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquipUpgrade_2eproto();
#endif
  return *default_instance_;
}

ResponseUpgradeJewel* ResponseUpgradeJewel::default_instance_ = NULL;

ResponseUpgradeJewel* ResponseUpgradeJewel::New() const {
  return new ResponseUpgradeJewel;
}

void ResponseUpgradeJewel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseUpgradeJewel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUpgradeJewel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

}

int ResponseUpgradeJewel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpgradeJewel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseUpgradeJewel*>(&from));
}

void ResponseUpgradeJewel::MergeFrom(const ResponseUpgradeJewel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void ResponseUpgradeJewel::CopyFrom(const ResponseUpgradeJewel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpgradeJewel::IsInitialized() const {

  return true;
}

void ResponseUpgradeJewel::Swap(ResponseUpgradeJewel* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseUpgradeJewel::GetTypeName() const {
  return "Protocol.ResponseUpgradeJewel";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
