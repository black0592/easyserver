// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoLogin.proto

#ifndef PROTOBUF_ProtoLogin_2eproto__INCLUDED
#define PROTOBUF_ProtoLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoGameData.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoLogin_2eproto();
void protobuf_AssignDesc_ProtoLogin_2eproto();
void protobuf_ShutdownFile_ProtoLogin_2eproto();

class ZoneInfo;
class ZoneCharInfo;
class RequestRegister;
class ResponseRegister;
class RequestLogin;
class ResponseLogin;
class RequestEnterServer;
class ResponseEnterServer;

enum ZoneInfo_ZoneState {
  ZoneInfo_ZoneState_ZS_NORMAL = 0,
  ZoneInfo_ZoneState_ZS_BUSY = 1,
  ZoneInfo_ZoneState_ZS_FULL = 2,
  ZoneInfo_ZoneState_ZS_STOPED = 3
};
bool ZoneInfo_ZoneState_IsValid(int value);
const ZoneInfo_ZoneState ZoneInfo_ZoneState_ZoneState_MIN = ZoneInfo_ZoneState_ZS_NORMAL;
const ZoneInfo_ZoneState ZoneInfo_ZoneState_ZoneState_MAX = ZoneInfo_ZoneState_ZS_STOPED;
const int ZoneInfo_ZoneState_ZoneState_ARRAYSIZE = ZoneInfo_ZoneState_ZoneState_MAX + 1;

enum ZoneInfo_ZoneFlag {
  ZoneInfo_ZoneFlag_ZF_NORMAL = 0,
  ZoneInfo_ZoneFlag_ZF_NEWER = 1,
  ZoneInfo_ZoneFlag_ZF_RECOMMEND = 2
};
bool ZoneInfo_ZoneFlag_IsValid(int value);
const ZoneInfo_ZoneFlag ZoneInfo_ZoneFlag_ZoneFlag_MIN = ZoneInfo_ZoneFlag_ZF_NORMAL;
const ZoneInfo_ZoneFlag ZoneInfo_ZoneFlag_ZoneFlag_MAX = ZoneInfo_ZoneFlag_ZF_RECOMMEND;
const int ZoneInfo_ZoneFlag_ZoneFlag_ARRAYSIZE = ZoneInfo_ZoneFlag_ZoneFlag_MAX + 1;

enum LoginOpCode {
  OP_LOGIN_REGISTER = 1,
  OP_LOGIN_LOGIN = 2,
  OP_LOGIN_ENTER_SERVER = 3
};
bool LoginOpCode_IsValid(int value);
const LoginOpCode LoginOpCode_MIN = OP_LOGIN_REGISTER;
const LoginOpCode LoginOpCode_MAX = OP_LOGIN_ENTER_SERVER;
const int LoginOpCode_ARRAYSIZE = LoginOpCode_MAX + 1;

enum RegisterError {
  REGISTER_ERROR_SUCCESS = 0,
  REGISTER_ERROR_ALREADY_EXIST_ACCOUNT = 1
};
bool RegisterError_IsValid(int value);
const RegisterError RegisterError_MIN = REGISTER_ERROR_SUCCESS;
const RegisterError RegisterError_MAX = REGISTER_ERROR_ALREADY_EXIST_ACCOUNT;
const int RegisterError_ARRAYSIZE = RegisterError_MAX + 1;

enum LoginError {
  LOGIN_ERROR_SUCCESS = 0,
  LOGIN_ERROR_VERSION_ERROR = 1,
  LOGIN_ERROR_INVALID_PASSWORD = 2,
  LOGIN_ERROR_ALREADY_EXIST_ACCOUNT = 3,
  LOGIN_ERROR_ALREADY_LOGIN = 4
};
bool LoginError_IsValid(int value);
const LoginError LoginError_MIN = LOGIN_ERROR_SUCCESS;
const LoginError LoginError_MAX = LOGIN_ERROR_ALREADY_LOGIN;
const int LoginError_ARRAYSIZE = LoginError_MAX + 1;

enum EnterZoneError {
  ENTER_ZONE_ERROR_SUCCESS = 0,
  ENTER_ZONE_ERROR_GATEWAY_CLOSED = 1,
  ENTER_ZONE_ERROR_ALREADY_ONLINE = 2
};
bool EnterZoneError_IsValid(int value);
const EnterZoneError EnterZoneError_MIN = ENTER_ZONE_ERROR_SUCCESS;
const EnterZoneError EnterZoneError_MAX = ENTER_ZONE_ERROR_ALREADY_ONLINE;
const int EnterZoneError_ARRAYSIZE = EnterZoneError_MAX + 1;

// ===================================================================

class ZoneInfo : public ::google::protobuf::MessageLite {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ZoneInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ZoneInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ZoneInfo* other);

  // implements Message ----------------------------------------------

  ZoneInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ZoneInfo_ZoneState ZoneState;
  static const ZoneState ZS_NORMAL = ZoneInfo_ZoneState_ZS_NORMAL;
  static const ZoneState ZS_BUSY = ZoneInfo_ZoneState_ZS_BUSY;
  static const ZoneState ZS_FULL = ZoneInfo_ZoneState_ZS_FULL;
  static const ZoneState ZS_STOPED = ZoneInfo_ZoneState_ZS_STOPED;
  static inline bool ZoneState_IsValid(int value) {
    return ZoneInfo_ZoneState_IsValid(value);
  }
  static const ZoneState ZoneState_MIN =
    ZoneInfo_ZoneState_ZoneState_MIN;
  static const ZoneState ZoneState_MAX =
    ZoneInfo_ZoneState_ZoneState_MAX;
  static const int ZoneState_ARRAYSIZE =
    ZoneInfo_ZoneState_ZoneState_ARRAYSIZE;

  typedef ZoneInfo_ZoneFlag ZoneFlag;
  static const ZoneFlag ZF_NORMAL = ZoneInfo_ZoneFlag_ZF_NORMAL;
  static const ZoneFlag ZF_NEWER = ZoneInfo_ZoneFlag_ZF_NEWER;
  static const ZoneFlag ZF_RECOMMEND = ZoneInfo_ZoneFlag_ZF_RECOMMEND;
  static inline bool ZoneFlag_IsValid(int value) {
    return ZoneInfo_ZoneFlag_IsValid(value);
  }
  static const ZoneFlag ZoneFlag_MIN =
    ZoneInfo_ZoneFlag_ZoneFlag_MIN;
  static const ZoneFlag ZoneFlag_MAX =
    ZoneInfo_ZoneFlag_ZoneFlag_MAX;
  static const int ZoneFlag_ARRAYSIZE =
    ZoneInfo_ZoneFlag_ZoneFlag_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional .Protocol.ZoneInfo.ZoneState state = 4 [default = ZS_NORMAL];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::Protocol::ZoneInfo_ZoneState state() const;
  inline void set_state(::Protocol::ZoneInfo_ZoneState value);

  // optional .Protocol.ZoneInfo.ZoneFlag flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::Protocol::ZoneInfo_ZoneFlag flag() const;
  inline void set_flag(::Protocol::ZoneInfo_ZoneFlag value);

  // @@protoc_insertion_point(class_scope:Protocol.ZoneInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 group_;
  int state_;
  int flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZoneCharInfo : public ::google::protobuf::MessageLite {
 public:
  ZoneCharInfo();
  virtual ~ZoneCharInfo();

  ZoneCharInfo(const ZoneCharInfo& from);

  inline ZoneCharInfo& operator=(const ZoneCharInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ZoneCharInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ZoneCharInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ZoneCharInfo* other);

  // implements Message ----------------------------------------------

  ZoneCharInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ZoneCharInfo& from);
  void MergeFrom(const ZoneCharInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 charlevel = 3;
  inline bool has_charlevel() const;
  inline void clear_charlevel();
  static const int kCharlevelFieldNumber = 3;
  inline ::google::protobuf::int32 charlevel() const;
  inline void set_charlevel(::google::protobuf::int32 value);

  // optional int32 charrace = 4;
  inline bool has_charrace() const;
  inline void clear_charrace();
  static const int kCharraceFieldNumber = 4;
  inline ::google::protobuf::int32 charrace() const;
  inline void set_charrace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ZoneCharInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_charlevel();
  inline void clear_has_charlevel();
  inline void set_has_charrace();
  inline void clear_has_charrace();

  ::std::string* charname_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 charlevel_;
  ::google::protobuf::int32 charrace_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static ZoneCharInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestRegister : public ::google::protobuf::MessageLite {
 public:
  RequestRegister();
  virtual ~RequestRegister();

  RequestRegister(const RequestRegister& from);

  inline RequestRegister& operator=(const RequestRegister& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestRegister& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestRegister* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestRegister* other);

  // implements Message ----------------------------------------------

  RequestRegister* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestRegister& from);
  void MergeFrom(const RequestRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:Protocol.RequestRegister)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_email();
  inline void clear_has_email();

  ::std::string* account_;
  ::std::string* password_;
  ::std::string* email_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static RequestRegister* default_instance_;
};
// -------------------------------------------------------------------

class ResponseRegister : public ::google::protobuf::MessageLite {
 public:
  ResponseRegister();
  virtual ~ResponseRegister();

  ResponseRegister(const ResponseRegister& from);

  inline ResponseRegister& operator=(const ResponseRegister& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseRegister& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseRegister* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseRegister* other);

  // implements Message ----------------------------------------------

  ResponseRegister* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseRegister& from);
  void MergeFrom(const ResponseRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.RegisterError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Protocol::RegisterError result() const;
  inline void set_result(::Protocol::RegisterError value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseRegister)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static ResponseRegister* default_instance_;
};
// -------------------------------------------------------------------

class RequestLogin : public ::google::protobuf::MessageLite {
 public:
  RequestLogin();
  virtual ~RequestLogin();

  RequestLogin(const RequestLogin& from);

  inline RequestLogin& operator=(const RequestLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestLogin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestLogin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestLogin* other);

  // implements Message ----------------------------------------------

  RequestLogin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestLogin& from);
  void MergeFrom(const RequestLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Protocol.RequestLogin)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::std::string* account_;
  ::std::string* password_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static RequestLogin* default_instance_;
};
// -------------------------------------------------------------------

class ResponseLogin : public ::google::protobuf::MessageLite {
 public:
  ResponseLogin();
  virtual ~ResponseLogin();

  ResponseLogin(const ResponseLogin& from);

  inline ResponseLogin& operator=(const ResponseLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseLogin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseLogin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseLogin* other);

  // implements Message ----------------------------------------------

  ResponseLogin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseLogin& from);
  void MergeFrom(const ResponseLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.LoginError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Protocol::LoginError result() const;
  inline void set_result(::Protocol::LoginError value);

  // optional uint32 login_key = 2;
  inline bool has_login_key() const;
  inline void clear_login_key();
  static const int kLoginKeyFieldNumber = 2;
  inline ::google::protobuf::uint32 login_key() const;
  inline void set_login_key(::google::protobuf::uint32 value);

  // repeated .Protocol.ZoneInfo zone_list = 3;
  inline int zone_list_size() const;
  inline void clear_zone_list();
  static const int kZoneListFieldNumber = 3;
  inline const ::Protocol::ZoneInfo& zone_list(int index) const;
  inline ::Protocol::ZoneInfo* mutable_zone_list(int index);
  inline ::Protocol::ZoneInfo* add_zone_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneInfo >&
      zone_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneInfo >*
      mutable_zone_list();

  // repeated .Protocol.ZoneCharInfo char_list = 4;
  inline int char_list_size() const;
  inline void clear_char_list();
  static const int kCharListFieldNumber = 4;
  inline const ::Protocol::ZoneCharInfo& char_list(int index) const;
  inline ::Protocol::ZoneCharInfo* mutable_char_list(int index);
  inline ::Protocol::ZoneCharInfo* add_char_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneCharInfo >&
      char_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneCharInfo >*
      mutable_char_list();

  // optional int32 last_zoneid = 5;
  inline bool has_last_zoneid() const;
  inline void clear_last_zoneid();
  static const int kLastZoneidFieldNumber = 5;
  inline ::google::protobuf::int32 last_zoneid() const;
  inline void set_last_zoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseLogin)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_login_key();
  inline void clear_has_login_key();
  inline void set_has_last_zoneid();
  inline void clear_has_last_zoneid();

  int result_;
  ::google::protobuf::uint32 login_key_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneInfo > zone_list_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneCharInfo > char_list_;
  ::google::protobuf::int32 last_zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static ResponseLogin* default_instance_;
};
// -------------------------------------------------------------------

class RequestEnterServer : public ::google::protobuf::MessageLite {
 public:
  RequestEnterServer();
  virtual ~RequestEnterServer();

  RequestEnterServer(const RequestEnterServer& from);

  inline RequestEnterServer& operator=(const RequestEnterServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestEnterServer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestEnterServer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestEnterServer* other);

  // implements Message ----------------------------------------------

  RequestEnterServer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestEnterServer& from);
  void MergeFrom(const RequestEnterServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 login_key = 2;
  inline bool has_login_key() const;
  inline void clear_login_key();
  static const int kLoginKeyFieldNumber = 2;
  inline ::google::protobuf::uint32 login_key() const;
  inline void set_login_key(::google::protobuf::uint32 value);

  // optional int32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.RequestEnterServer)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_login_key();
  inline void clear_has_login_key();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::std::string* account_;
  ::google::protobuf::uint32 login_key_;
  ::google::protobuf::int32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static RequestEnterServer* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEnterServer : public ::google::protobuf::MessageLite {
 public:
  ResponseEnterServer();
  virtual ~ResponseEnterServer();

  ResponseEnterServer(const ResponseEnterServer& from);

  inline ResponseEnterServer& operator=(const ResponseEnterServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseEnterServer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseEnterServer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseEnterServer* other);

  // implements Message ----------------------------------------------

  ResponseEnterServer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseEnterServer& from);
  void MergeFrom(const ResponseEnterServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.EnterZoneError result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Protocol::EnterZoneError result() const;
  inline void set_result(::Protocol::EnterZoneError value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protocol.ResponseEnterServer)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::std::string* ip_;
  int result_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoLogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoLogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoLogin_2eproto();
  friend void protobuf_ShutdownFile_ProtoLogin_2eproto();

  void InitAsDefaultInstance();
  static ResponseEnterServer* default_instance_;
};
// ===================================================================


// ===================================================================

// ZoneInfo

// optional int32 id = 1;
inline bool ZoneInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ZoneInfo::id() const {
  return id_;
}
inline void ZoneInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ZoneInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZoneInfo::name() const {
  return *name_;
}
inline void ZoneInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZoneInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ZoneInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ZoneInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 group = 3;
inline bool ZoneInfo::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneInfo::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneInfo::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 ZoneInfo::group() const {
  return group_;
}
inline void ZoneInfo::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional .Protocol.ZoneInfo.ZoneState state = 4 [default = ZS_NORMAL];
inline bool ZoneInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Protocol::ZoneInfo_ZoneState ZoneInfo::state() const {
  return static_cast< ::Protocol::ZoneInfo_ZoneState >(state_);
}
inline void ZoneInfo::set_state(::Protocol::ZoneInfo_ZoneState value) {
  assert(::Protocol::ZoneInfo_ZoneState_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional .Protocol.ZoneInfo.ZoneFlag flag = 5;
inline bool ZoneInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZoneInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZoneInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZoneInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::Protocol::ZoneInfo_ZoneFlag ZoneInfo::flag() const {
  return static_cast< ::Protocol::ZoneInfo_ZoneFlag >(flag_);
}
inline void ZoneInfo::set_flag(::Protocol::ZoneInfo_ZoneFlag value) {
  assert(::Protocol::ZoneInfo_ZoneFlag_IsValid(value));
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// ZoneCharInfo

// optional int32 zoneid = 1;
inline bool ZoneCharInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneCharInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneCharInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneCharInfo::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 ZoneCharInfo::zoneid() const {
  return zoneid_;
}
inline void ZoneCharInfo::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional string charname = 2;
inline bool ZoneCharInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneCharInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneCharInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneCharInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& ZoneCharInfo::charname() const {
  return *charname_;
}
inline void ZoneCharInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void ZoneCharInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void ZoneCharInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneCharInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* ZoneCharInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneCharInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 charlevel = 3;
inline bool ZoneCharInfo::has_charlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneCharInfo::set_has_charlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneCharInfo::clear_has_charlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneCharInfo::clear_charlevel() {
  charlevel_ = 0;
  clear_has_charlevel();
}
inline ::google::protobuf::int32 ZoneCharInfo::charlevel() const {
  return charlevel_;
}
inline void ZoneCharInfo::set_charlevel(::google::protobuf::int32 value) {
  set_has_charlevel();
  charlevel_ = value;
}

// optional int32 charrace = 4;
inline bool ZoneCharInfo::has_charrace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneCharInfo::set_has_charrace() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneCharInfo::clear_has_charrace() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneCharInfo::clear_charrace() {
  charrace_ = 0;
  clear_has_charrace();
}
inline ::google::protobuf::int32 ZoneCharInfo::charrace() const {
  return charrace_;
}
inline void ZoneCharInfo::set_charrace(::google::protobuf::int32 value) {
  set_has_charrace();
  charrace_ = value;
}

// -------------------------------------------------------------------

// RequestRegister

// optional string account = 1;
inline bool RequestRegister::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRegister::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRegister::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRegister::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestRegister::account() const {
  return *account_;
}
inline void RequestRegister::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestRegister::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestRegister::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RequestRegister::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool RequestRegister::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestRegister::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestRegister::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestRegister::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RequestRegister::password() const {
  return *password_;
}
inline void RequestRegister::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RequestRegister::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RequestRegister::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RequestRegister::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 3;
inline bool RequestRegister::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestRegister::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestRegister::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestRegister::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& RequestRegister::email() const {
  return *email_;
}
inline void RequestRegister::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void RequestRegister::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void RequestRegister::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* RequestRegister::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseRegister

// optional .Protocol.RegisterError result = 1;
inline bool ResponseRegister::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRegister::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRegister::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRegister::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Protocol::RegisterError ResponseRegister::result() const {
  return static_cast< ::Protocol::RegisterError >(result_);
}
inline void ResponseRegister::set_result(::Protocol::RegisterError value) {
  assert(::Protocol::RegisterError_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// RequestLogin

// optional int32 version = 1;
inline bool RequestLogin::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestLogin::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestLogin::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 RequestLogin::version() const {
  return version_;
}
inline void RequestLogin::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string account = 2;
inline bool RequestLogin::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestLogin::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestLogin::account() const {
  return *account_;
}
inline void RequestLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RequestLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool RequestLogin::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestLogin::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RequestLogin::password() const {
  return *password_;
}
inline void RequestLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RequestLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RequestLogin::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RequestLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseLogin

// optional .Protocol.LoginError result = 1;
inline bool ResponseLogin::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLogin::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLogin::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLogin::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Protocol::LoginError ResponseLogin::result() const {
  return static_cast< ::Protocol::LoginError >(result_);
}
inline void ResponseLogin::set_result(::Protocol::LoginError value) {
  assert(::Protocol::LoginError_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 login_key = 2;
inline bool ResponseLogin::has_login_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLogin::set_has_login_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLogin::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLogin::clear_login_key() {
  login_key_ = 0u;
  clear_has_login_key();
}
inline ::google::protobuf::uint32 ResponseLogin::login_key() const {
  return login_key_;
}
inline void ResponseLogin::set_login_key(::google::protobuf::uint32 value) {
  set_has_login_key();
  login_key_ = value;
}

// repeated .Protocol.ZoneInfo zone_list = 3;
inline int ResponseLogin::zone_list_size() const {
  return zone_list_.size();
}
inline void ResponseLogin::clear_zone_list() {
  zone_list_.Clear();
}
inline const ::Protocol::ZoneInfo& ResponseLogin::zone_list(int index) const {
  return zone_list_.Get(index);
}
inline ::Protocol::ZoneInfo* ResponseLogin::mutable_zone_list(int index) {
  return zone_list_.Mutable(index);
}
inline ::Protocol::ZoneInfo* ResponseLogin::add_zone_list() {
  return zone_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneInfo >&
ResponseLogin::zone_list() const {
  return zone_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneInfo >*
ResponseLogin::mutable_zone_list() {
  return &zone_list_;
}

// repeated .Protocol.ZoneCharInfo char_list = 4;
inline int ResponseLogin::char_list_size() const {
  return char_list_.size();
}
inline void ResponseLogin::clear_char_list() {
  char_list_.Clear();
}
inline const ::Protocol::ZoneCharInfo& ResponseLogin::char_list(int index) const {
  return char_list_.Get(index);
}
inline ::Protocol::ZoneCharInfo* ResponseLogin::mutable_char_list(int index) {
  return char_list_.Mutable(index);
}
inline ::Protocol::ZoneCharInfo* ResponseLogin::add_char_list() {
  return char_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneCharInfo >&
ResponseLogin::char_list() const {
  return char_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::ZoneCharInfo >*
ResponseLogin::mutable_char_list() {
  return &char_list_;
}

// optional int32 last_zoneid = 5;
inline bool ResponseLogin::has_last_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseLogin::set_has_last_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseLogin::clear_has_last_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseLogin::clear_last_zoneid() {
  last_zoneid_ = 0;
  clear_has_last_zoneid();
}
inline ::google::protobuf::int32 ResponseLogin::last_zoneid() const {
  return last_zoneid_;
}
inline void ResponseLogin::set_last_zoneid(::google::protobuf::int32 value) {
  set_has_last_zoneid();
  last_zoneid_ = value;
}

// -------------------------------------------------------------------

// RequestEnterServer

// optional string account = 1;
inline bool RequestEnterServer::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestEnterServer::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestEnterServer::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestEnterServer::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestEnterServer::account() const {
  return *account_;
}
inline void RequestEnterServer::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestEnterServer::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestEnterServer::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestEnterServer::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RequestEnterServer::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestEnterServer::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 login_key = 2;
inline bool RequestEnterServer::has_login_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestEnterServer::set_has_login_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestEnterServer::clear_has_login_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestEnterServer::clear_login_key() {
  login_key_ = 0u;
  clear_has_login_key();
}
inline ::google::protobuf::uint32 RequestEnterServer::login_key() const {
  return login_key_;
}
inline void RequestEnterServer::set_login_key(::google::protobuf::uint32 value) {
  set_has_login_key();
  login_key_ = value;
}

// optional int32 zoneid = 3;
inline bool RequestEnterServer::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestEnterServer::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestEnterServer::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestEnterServer::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 RequestEnterServer::zoneid() const {
  return zoneid_;
}
inline void RequestEnterServer::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// ResponseEnterServer

// optional .Protocol.EnterZoneError result = 1;
inline bool ResponseEnterServer::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseEnterServer::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseEnterServer::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseEnterServer::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Protocol::EnterZoneError ResponseEnterServer::result() const {
  return static_cast< ::Protocol::EnterZoneError >(result_);
}
inline void ResponseEnterServer::set_result(::Protocol::EnterZoneError value) {
  assert(::Protocol::EnterZoneError_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string ip = 2;
inline bool ResponseEnterServer::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseEnterServer::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseEnterServer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseEnterServer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ResponseEnterServer::ip() const {
  return *ip_;
}
inline void ResponseEnterServer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ResponseEnterServer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ResponseEnterServer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseEnterServer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ResponseEnterServer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseEnterServer::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool ResponseEnterServer::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseEnterServer::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseEnterServer::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseEnterServer::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ResponseEnterServer::port() const {
  return port_;
}
inline void ResponseEnterServer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoLogin_2eproto__INCLUDED
