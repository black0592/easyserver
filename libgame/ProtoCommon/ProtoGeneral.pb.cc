// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGeneral.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoGeneral.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoGeneral_2eproto() {
  delete NotifyGeneralError::default_instance_;
  delete NotifyGameConfig::default_instance_;
  delete NotifyOpenGUI::default_instance_;
  delete NotifyCloseGUI::default_instance_;
  delete NotifyServerTime::default_instance_;
  delete NotifyShowGamePrompt::default_instance_;
  delete NotifyHideGamePrompt::default_instance_;
  delete RollingNoticeInfo::default_instance_;
  delete NotifyRollingNotice::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoGeneral_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoGeneral_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  NotifyGeneralError::default_instance_ = new NotifyGeneralError();
  NotifyGameConfig::default_instance_ = new NotifyGameConfig();
  NotifyOpenGUI::default_instance_ = new NotifyOpenGUI();
  NotifyCloseGUI::default_instance_ = new NotifyCloseGUI();
  NotifyServerTime::default_instance_ = new NotifyServerTime();
  NotifyShowGamePrompt::default_instance_ = new NotifyShowGamePrompt();
  NotifyHideGamePrompt::default_instance_ = new NotifyHideGamePrompt();
  RollingNoticeInfo::default_instance_ = new RollingNoticeInfo();
  NotifyRollingNotice::default_instance_ = new NotifyRollingNotice();
  NotifyGeneralError::default_instance_->InitAsDefaultInstance();
  NotifyGameConfig::default_instance_->InitAsDefaultInstance();
  NotifyOpenGUI::default_instance_->InitAsDefaultInstance();
  NotifyCloseGUI::default_instance_->InitAsDefaultInstance();
  NotifyServerTime::default_instance_->InitAsDefaultInstance();
  NotifyShowGamePrompt::default_instance_->InitAsDefaultInstance();
  NotifyHideGamePrompt::default_instance_->InitAsDefaultInstance();
  RollingNoticeInfo::default_instance_->InitAsDefaultInstance();
  NotifyRollingNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoGeneral_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoGeneral_2eproto_once_);
void protobuf_AddDesc_ProtoGeneral_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoGeneral_2eproto_once_,
                 &protobuf_AddDesc_ProtoGeneral_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoGeneral_2eproto {
  StaticDescriptorInitializer_ProtoGeneral_2eproto() {
    protobuf_AddDesc_ProtoGeneral_2eproto();
  }
} static_descriptor_initializer_ProtoGeneral_2eproto_;
#endif
bool GeneralOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

bool GamePromptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGeneralError::kCodeFieldNumber;
const int NotifyGeneralError::kContentFieldNumber;
#endif  // !_MSC_VER

NotifyGeneralError::NotifyGeneralError()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGeneralError::InitAsDefaultInstance() {
}

NotifyGeneralError::NotifyGeneralError(const NotifyGeneralError& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGeneralError::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGeneralError::~NotifyGeneralError() {
  SharedDtor();
}

void NotifyGeneralError::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGeneralError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGeneralError& NotifyGeneralError::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyGeneralError* NotifyGeneralError::default_instance_ = NULL;

NotifyGeneralError* NotifyGeneralError::New() const {
  return new NotifyGeneralError;
}

void NotifyGeneralError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGeneralError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.ErrorCode code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::ErrorCode_IsValid(value)) {
            set_code(static_cast< ::Protocol::ErrorCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGeneralError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

}

int NotifyGeneralError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.ErrorCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGeneralError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGeneralError*>(&from));
}

void NotifyGeneralError::MergeFrom(const NotifyGeneralError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void NotifyGeneralError::CopyFrom(const NotifyGeneralError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGeneralError::IsInitialized() const {

  return true;
}

void NotifyGeneralError::Swap(NotifyGeneralError* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGeneralError::GetTypeName() const {
  return "Protocol.NotifyGeneralError";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGameConfig::kMaxBagSizeFieldNumber;
const int NotifyGameConfig::kMaxSafeSizeFieldNumber;
const int NotifyGameConfig::kUnmarryGoldFieldNumber;
const int NotifyGameConfig::kCreateGuildMoneyFieldNumber;
const int NotifyGameConfig::kJoinGuildLevelFieldNumber;
const int NotifyGameConfig::kGuildRes1ItemidFieldNumber;
const int NotifyGameConfig::kGuildRes2ItemidFieldNumber;
const int NotifyGameConfig::kGuildRes1RateFieldNumber;
const int NotifyGameConfig::kGuildRes2RateFieldNumber;
const int NotifyGameConfig::kReviveItemFieldNumber;
const int NotifyGameConfig::kBagExtendcardFieldNumber;
const int NotifyGameConfig::kSafeExtendcardFieldNumber;
#endif  // !_MSC_VER

NotifyGameConfig::NotifyGameConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyGameConfig::InitAsDefaultInstance() {
}

NotifyGameConfig::NotifyGameConfig(const NotifyGameConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGameConfig::SharedCtor() {
  _cached_size_ = 0;
  max_bag_size_ = 0;
  max_safe_size_ = 0;
  unmarry_gold_ = 0;
  create_guild_money_ = 0;
  join_guild_level_ = 0;
  guild_res1_itemid_ = 0;
  guild_res2_itemid_ = 0;
  guild_res1_rate_ = 0;
  guild_res2_rate_ = 0;
  revive_item_ = 0;
  bag_extendcard_ = 0;
  safe_extendcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGameConfig::~NotifyGameConfig() {
  SharedDtor();
}

void NotifyGameConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyGameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyGameConfig& NotifyGameConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyGameConfig* NotifyGameConfig::default_instance_ = NULL;

NotifyGameConfig* NotifyGameConfig::New() const {
  return new NotifyGameConfig;
}

void NotifyGameConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_bag_size_ = 0;
    max_safe_size_ = 0;
    unmarry_gold_ = 0;
    create_guild_money_ = 0;
    join_guild_level_ = 0;
    guild_res1_itemid_ = 0;
    guild_res2_itemid_ = 0;
    guild_res1_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    guild_res2_rate_ = 0;
    revive_item_ = 0;
    bag_extendcard_ = 0;
    safe_extendcard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyGameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_bag_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bag_size_)));
          set_has_max_bag_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_safe_size;
        break;
      }

      // optional int32 max_safe_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_safe_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_safe_size_)));
          set_has_max_safe_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unmarry_gold;
        break;
      }

      // optional int32 unmarry_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unmarry_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unmarry_gold_)));
          set_has_unmarry_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_guild_money;
        break;
      }

      // optional int32 create_guild_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_guild_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_guild_money_)));
          set_has_create_guild_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_join_guild_level;
        break;
      }

      // optional int32 join_guild_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_guild_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_guild_level_)));
          set_has_join_guild_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guild_res1_itemid;
        break;
      }

      // optional int32 guild_res1_itemid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_res1_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_res1_itemid_)));
          set_has_guild_res1_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guild_res2_itemid;
        break;
      }

      // optional int32 guild_res2_itemid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_res2_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_res2_itemid_)));
          set_has_guild_res2_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guild_res1_rate;
        break;
      }

      // optional int32 guild_res1_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_res1_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_res1_rate_)));
          set_has_guild_res1_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_guild_res2_rate;
        break;
      }

      // optional int32 guild_res2_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_res2_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_res2_rate_)));
          set_has_guild_res2_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_revive_item;
        break;
      }

      // optional int32 revive_item = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revive_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revive_item_)));
          set_has_revive_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bag_extendcard;
        break;
      }

      // optional int32 bag_extendcard = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_extendcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_extendcard_)));
          set_has_bag_extendcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_safe_extendcard;
        break;
      }

      // optional int32 safe_extendcard = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_extendcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safe_extendcard_)));
          set_has_safe_extendcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_bag_size = 1;
  if (has_max_bag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_bag_size(), output);
  }

  // optional int32 max_safe_size = 2;
  if (has_max_safe_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_safe_size(), output);
  }

  // optional int32 unmarry_gold = 3;
  if (has_unmarry_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unmarry_gold(), output);
  }

  // optional int32 create_guild_money = 4;
  if (has_create_guild_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->create_guild_money(), output);
  }

  // optional int32 join_guild_level = 5;
  if (has_join_guild_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->join_guild_level(), output);
  }

  // optional int32 guild_res1_itemid = 6;
  if (has_guild_res1_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_res1_itemid(), output);
  }

  // optional int32 guild_res2_itemid = 7;
  if (has_guild_res2_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_res2_itemid(), output);
  }

  // optional int32 guild_res1_rate = 8;
  if (has_guild_res1_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guild_res1_rate(), output);
  }

  // optional int32 guild_res2_rate = 9;
  if (has_guild_res2_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guild_res2_rate(), output);
  }

  // optional int32 revive_item = 10;
  if (has_revive_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->revive_item(), output);
  }

  // optional int32 bag_extendcard = 11;
  if (has_bag_extendcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bag_extendcard(), output);
  }

  // optional int32 safe_extendcard = 12;
  if (has_safe_extendcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->safe_extendcard(), output);
  }

}

int NotifyGameConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_bag_size = 1;
    if (has_max_bag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bag_size());
    }

    // optional int32 max_safe_size = 2;
    if (has_max_safe_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_safe_size());
    }

    // optional int32 unmarry_gold = 3;
    if (has_unmarry_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unmarry_gold());
    }

    // optional int32 create_guild_money = 4;
    if (has_create_guild_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_guild_money());
    }

    // optional int32 join_guild_level = 5;
    if (has_join_guild_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_guild_level());
    }

    // optional int32 guild_res1_itemid = 6;
    if (has_guild_res1_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_res1_itemid());
    }

    // optional int32 guild_res2_itemid = 7;
    if (has_guild_res2_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_res2_itemid());
    }

    // optional int32 guild_res1_rate = 8;
    if (has_guild_res1_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_res1_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 guild_res2_rate = 9;
    if (has_guild_res2_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_res2_rate());
    }

    // optional int32 revive_item = 10;
    if (has_revive_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revive_item());
    }

    // optional int32 bag_extendcard = 11;
    if (has_bag_extendcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_extendcard());
    }

    // optional int32 safe_extendcard = 12;
    if (has_safe_extendcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safe_extendcard());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGameConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyGameConfig*>(&from));
}

void NotifyGameConfig::MergeFrom(const NotifyGameConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_bag_size()) {
      set_max_bag_size(from.max_bag_size());
    }
    if (from.has_max_safe_size()) {
      set_max_safe_size(from.max_safe_size());
    }
    if (from.has_unmarry_gold()) {
      set_unmarry_gold(from.unmarry_gold());
    }
    if (from.has_create_guild_money()) {
      set_create_guild_money(from.create_guild_money());
    }
    if (from.has_join_guild_level()) {
      set_join_guild_level(from.join_guild_level());
    }
    if (from.has_guild_res1_itemid()) {
      set_guild_res1_itemid(from.guild_res1_itemid());
    }
    if (from.has_guild_res2_itemid()) {
      set_guild_res2_itemid(from.guild_res2_itemid());
    }
    if (from.has_guild_res1_rate()) {
      set_guild_res1_rate(from.guild_res1_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guild_res2_rate()) {
      set_guild_res2_rate(from.guild_res2_rate());
    }
    if (from.has_revive_item()) {
      set_revive_item(from.revive_item());
    }
    if (from.has_bag_extendcard()) {
      set_bag_extendcard(from.bag_extendcard());
    }
    if (from.has_safe_extendcard()) {
      set_safe_extendcard(from.safe_extendcard());
    }
  }
}

void NotifyGameConfig::CopyFrom(const NotifyGameConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGameConfig::IsInitialized() const {

  return true;
}

void NotifyGameConfig::Swap(NotifyGameConfig* other) {
  if (other != this) {
    std::swap(max_bag_size_, other->max_bag_size_);
    std::swap(max_safe_size_, other->max_safe_size_);
    std::swap(unmarry_gold_, other->unmarry_gold_);
    std::swap(create_guild_money_, other->create_guild_money_);
    std::swap(join_guild_level_, other->join_guild_level_);
    std::swap(guild_res1_itemid_, other->guild_res1_itemid_);
    std::swap(guild_res2_itemid_, other->guild_res2_itemid_);
    std::swap(guild_res1_rate_, other->guild_res1_rate_);
    std::swap(guild_res2_rate_, other->guild_res2_rate_);
    std::swap(revive_item_, other->revive_item_);
    std::swap(bag_extendcard_, other->bag_extendcard_);
    std::swap(safe_extendcard_, other->safe_extendcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyGameConfig::GetTypeName() const {
  return "Protocol.NotifyGameConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOpenGUI::kGuiNameFieldNumber;
#endif  // !_MSC_VER

NotifyOpenGUI::NotifyOpenGUI()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyOpenGUI::InitAsDefaultInstance() {
}

NotifyOpenGUI::NotifyOpenGUI(const NotifyOpenGUI& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyOpenGUI::SharedCtor() {
  _cached_size_ = 0;
  gui_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOpenGUI::~NotifyOpenGUI() {
  SharedDtor();
}

void NotifyOpenGUI::SharedDtor() {
  if (gui_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyOpenGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyOpenGUI& NotifyOpenGUI::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyOpenGUI* NotifyOpenGUI::default_instance_ = NULL;

NotifyOpenGUI* NotifyOpenGUI::New() const {
  return new NotifyOpenGUI;
}

void NotifyOpenGUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_name()) {
      if (gui_name_ != &::google::protobuf::internal::kEmptyString) {
        gui_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyOpenGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyOpenGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_name = 1;
  if (has_gui_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_name(), output);
  }

}

int NotifyOpenGUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_name = 1;
    if (has_gui_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOpenGUI::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyOpenGUI*>(&from));
}

void NotifyOpenGUI::MergeFrom(const NotifyOpenGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_name()) {
      set_gui_name(from.gui_name());
    }
  }
}

void NotifyOpenGUI::CopyFrom(const NotifyOpenGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOpenGUI::IsInitialized() const {

  return true;
}

void NotifyOpenGUI::Swap(NotifyOpenGUI* other) {
  if (other != this) {
    std::swap(gui_name_, other->gui_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyOpenGUI::GetTypeName() const {
  return "Protocol.NotifyOpenGUI";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCloseGUI::kGuiNameFieldNumber;
#endif  // !_MSC_VER

NotifyCloseGUI::NotifyCloseGUI()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyCloseGUI::InitAsDefaultInstance() {
}

NotifyCloseGUI::NotifyCloseGUI(const NotifyCloseGUI& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCloseGUI::SharedCtor() {
  _cached_size_ = 0;
  gui_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCloseGUI::~NotifyCloseGUI() {
  SharedDtor();
}

void NotifyCloseGUI::SharedDtor() {
  if (gui_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyCloseGUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyCloseGUI& NotifyCloseGUI::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyCloseGUI* NotifyCloseGUI::default_instance_ = NULL;

NotifyCloseGUI* NotifyCloseGUI::New() const {
  return new NotifyCloseGUI;
}

void NotifyCloseGUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_name()) {
      if (gui_name_ != &::google::protobuf::internal::kEmptyString) {
        gui_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyCloseGUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCloseGUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_name = 1;
  if (has_gui_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_name(), output);
  }

}

int NotifyCloseGUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_name = 1;
    if (has_gui_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCloseGUI::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyCloseGUI*>(&from));
}

void NotifyCloseGUI::MergeFrom(const NotifyCloseGUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_name()) {
      set_gui_name(from.gui_name());
    }
  }
}

void NotifyCloseGUI::CopyFrom(const NotifyCloseGUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCloseGUI::IsInitialized() const {

  return true;
}

void NotifyCloseGUI::Swap(NotifyCloseGUI* other) {
  if (other != this) {
    std::swap(gui_name_, other->gui_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyCloseGUI::GetTypeName() const {
  return "Protocol.NotifyCloseGUI";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyServerTime::kTimeFieldNumber;
#endif  // !_MSC_VER

NotifyServerTime::NotifyServerTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyServerTime::InitAsDefaultInstance() {
}

NotifyServerTime::NotifyServerTime(const NotifyServerTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyServerTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyServerTime::~NotifyServerTime() {
  SharedDtor();
}

void NotifyServerTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyServerTime& NotifyServerTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyServerTime* NotifyServerTime::default_instance_ = NULL;

NotifyServerTime* NotifyServerTime::New() const {
  return new NotifyServerTime;
}

void NotifyServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

}

int NotifyServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyServerTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyServerTime*>(&from));
}

void NotifyServerTime::MergeFrom(const NotifyServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void NotifyServerTime::CopyFrom(const NotifyServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyServerTime::IsInitialized() const {

  return true;
}

void NotifyServerTime::Swap(NotifyServerTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyServerTime::GetTypeName() const {
  return "Protocol.NotifyServerTime";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyShowGamePrompt::kTypeFieldNumber;
const int NotifyShowGamePrompt::kCountFieldNumber;
#endif  // !_MSC_VER

NotifyShowGamePrompt::NotifyShowGamePrompt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyShowGamePrompt::InitAsDefaultInstance() {
}

NotifyShowGamePrompt::NotifyShowGamePrompt(const NotifyShowGamePrompt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyShowGamePrompt::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyShowGamePrompt::~NotifyShowGamePrompt() {
  SharedDtor();
}

void NotifyShowGamePrompt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyShowGamePrompt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyShowGamePrompt& NotifyShowGamePrompt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyShowGamePrompt* NotifyShowGamePrompt::default_instance_ = NULL;

NotifyShowGamePrompt* NotifyShowGamePrompt::New() const {
  return new NotifyShowGamePrompt;
}

void NotifyShowGamePrompt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyShowGamePrompt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.GamePromptType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::GamePromptType_IsValid(value)) {
            set_type(static_cast< ::Protocol::GamePromptType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyShowGamePrompt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.GamePromptType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

}

int NotifyShowGamePrompt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.GamePromptType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyShowGamePrompt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyShowGamePrompt*>(&from));
}

void NotifyShowGamePrompt::MergeFrom(const NotifyShowGamePrompt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void NotifyShowGamePrompt::CopyFrom(const NotifyShowGamePrompt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyShowGamePrompt::IsInitialized() const {

  return true;
}

void NotifyShowGamePrompt::Swap(NotifyShowGamePrompt* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyShowGamePrompt::GetTypeName() const {
  return "Protocol.NotifyShowGamePrompt";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHideGamePrompt::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyHideGamePrompt::NotifyHideGamePrompt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyHideGamePrompt::InitAsDefaultInstance() {
}

NotifyHideGamePrompt::NotifyHideGamePrompt(const NotifyHideGamePrompt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHideGamePrompt::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHideGamePrompt::~NotifyHideGamePrompt() {
  SharedDtor();
}

void NotifyHideGamePrompt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyHideGamePrompt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyHideGamePrompt& NotifyHideGamePrompt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyHideGamePrompt* NotifyHideGamePrompt::default_instance_ = NULL;

NotifyHideGamePrompt* NotifyHideGamePrompt::New() const {
  return new NotifyHideGamePrompt;
}

void NotifyHideGamePrompt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyHideGamePrompt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.GamePromptType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::GamePromptType_IsValid(value)) {
            set_type(static_cast< ::Protocol::GamePromptType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHideGamePrompt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.GamePromptType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

}

int NotifyHideGamePrompt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.GamePromptType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHideGamePrompt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyHideGamePrompt*>(&from));
}

void NotifyHideGamePrompt::MergeFrom(const NotifyHideGamePrompt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void NotifyHideGamePrompt::CopyFrom(const NotifyHideGamePrompt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHideGamePrompt::IsInitialized() const {

  return true;
}

void NotifyHideGamePrompt::Swap(NotifyHideGamePrompt* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyHideGamePrompt::GetTypeName() const {
  return "Protocol.NotifyHideGamePrompt";
}


// ===================================================================

#ifndef _MSC_VER
const int RollingNoticeInfo::kContentFieldNumber;
const int RollingNoticeInfo::kColorFieldNumber;
#endif  // !_MSC_VER

RollingNoticeInfo::RollingNoticeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RollingNoticeInfo::InitAsDefaultInstance() {
}

RollingNoticeInfo::RollingNoticeInfo(const RollingNoticeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RollingNoticeInfo::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollingNoticeInfo::~RollingNoticeInfo() {
  SharedDtor();
}

void RollingNoticeInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RollingNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RollingNoticeInfo& RollingNoticeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

RollingNoticeInfo* RollingNoticeInfo::default_instance_ = NULL;

RollingNoticeInfo* RollingNoticeInfo::New() const {
  return new RollingNoticeInfo;
}

void RollingNoticeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RollingNoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // required int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RollingNoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

}

int RollingNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollingNoticeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RollingNoticeInfo*>(&from));
}

void RollingNoticeInfo::MergeFrom(const RollingNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
}

void RollingNoticeInfo::CopyFrom(const RollingNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollingNoticeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RollingNoticeInfo::Swap(RollingNoticeInfo* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RollingNoticeInfo::GetTypeName() const {
  return "Protocol.RollingNoticeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRollingNotice::kContentsFieldNumber;
const int NotifyRollingNotice::kTimesFieldNumber;
#endif  // !_MSC_VER

NotifyRollingNotice::NotifyRollingNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyRollingNotice::InitAsDefaultInstance() {
}

NotifyRollingNotice::NotifyRollingNotice(const NotifyRollingNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRollingNotice::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRollingNotice::~NotifyRollingNotice() {
  SharedDtor();
}

void NotifyRollingNotice::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotifyRollingNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyRollingNotice& NotifyRollingNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGeneral_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGeneral_2eproto();
#endif
  return *default_instance_;
}

NotifyRollingNotice* NotifyRollingNotice::default_instance_ = NULL;

NotifyRollingNotice* NotifyRollingNotice::New() const {
  return new NotifyRollingNotice;
}

void NotifyRollingNotice::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    times_ = 0;
  }
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyRollingNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.RollingNoticeInfo contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contents;
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRollingNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.RollingNoticeInfo contents = 1;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->contents(i), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

}

int NotifyRollingNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .Protocol.RollingNoticeInfo contents = 1;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRollingNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyRollingNotice*>(&from));
}

void NotifyRollingNotice::MergeFrom(const NotifyRollingNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
}

void NotifyRollingNotice::CopyFrom(const NotifyRollingNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRollingNotice::IsInitialized() const {

  for (int i = 0; i < contents_size(); i++) {
    if (!this->contents(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyRollingNotice::Swap(NotifyRollingNotice* other) {
  if (other != this) {
    contents_.Swap(&other->contents_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyRollingNotice::GetTypeName() const {
  return "Protocol.NotifyRollingNotice";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
