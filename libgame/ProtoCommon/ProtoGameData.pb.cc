// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGameData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoGameData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_ProtoGameData_2eproto() {
  delete CharBase::default_instance_;
  delete CharData::default_instance_;
  delete EquipInfo::default_instance_;
  delete PetInfo::default_instance_;
  delete WingInfo::default_instance_;
  delete EquipAddInfo::default_instance_;
  delete ItemData::default_instance_;
  delete ShortcutKeyData::default_instance_;
  delete JobSkillData::default_instance_;
  delete SkillData::default_instance_;
  delete SkillBuffData::default_instance_;
  delete MissionData::default_instance_;
  delete AchievementData::default_instance_;
  delete ActivityData::default_instance_;
  delete SettingData::default_instance_;
  delete OnlineRewardsData::default_instance_;
  delete CounterData::default_instance_;
  delete CharBinaryData::default_instance_;
  delete MapCell::default_instance_;
  delete TileMapData::default_instance_;
  delete MapCharInfo::default_instance_;
  delete MapMonsterInfo::default_instance_;
  delete MapNpcInfo::default_instance_;
  delete ItemLoc::default_instance_;
  delete ItemLocData::default_instance_;
  delete ItemLocNum::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoGameData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoGameData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CharBase::default_instance_ = new CharBase();
  CharData::default_instance_ = new CharData();
  EquipInfo::default_instance_ = new EquipInfo();
  PetInfo::default_instance_ = new PetInfo();
  WingInfo::default_instance_ = new WingInfo();
  EquipAddInfo::default_instance_ = new EquipAddInfo();
  ItemData::default_instance_ = new ItemData();
  ShortcutKeyData::default_instance_ = new ShortcutKeyData();
  JobSkillData::default_instance_ = new JobSkillData();
  SkillData::default_instance_ = new SkillData();
  SkillBuffData::default_instance_ = new SkillBuffData();
  MissionData::default_instance_ = new MissionData();
  AchievementData::default_instance_ = new AchievementData();
  ActivityData::default_instance_ = new ActivityData();
  SettingData::default_instance_ = new SettingData();
  OnlineRewardsData::default_instance_ = new OnlineRewardsData();
  CounterData::default_instance_ = new CounterData();
  CharBinaryData::default_instance_ = new CharBinaryData();
  MapCell::default_instance_ = new MapCell();
  TileMapData::default_instance_ = new TileMapData();
  MapCharInfo::default_instance_ = new MapCharInfo();
  MapMonsterInfo::default_instance_ = new MapMonsterInfo();
  MapNpcInfo::default_instance_ = new MapNpcInfo();
  ItemLoc::default_instance_ = new ItemLoc();
  ItemLocData::default_instance_ = new ItemLocData();
  ItemLocNum::default_instance_ = new ItemLocNum();
  CharBase::default_instance_->InitAsDefaultInstance();
  CharData::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  PetInfo::default_instance_->InitAsDefaultInstance();
  WingInfo::default_instance_->InitAsDefaultInstance();
  EquipAddInfo::default_instance_->InitAsDefaultInstance();
  ItemData::default_instance_->InitAsDefaultInstance();
  ShortcutKeyData::default_instance_->InitAsDefaultInstance();
  JobSkillData::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  SkillBuffData::default_instance_->InitAsDefaultInstance();
  MissionData::default_instance_->InitAsDefaultInstance();
  AchievementData::default_instance_->InitAsDefaultInstance();
  ActivityData::default_instance_->InitAsDefaultInstance();
  SettingData::default_instance_->InitAsDefaultInstance();
  OnlineRewardsData::default_instance_->InitAsDefaultInstance();
  CounterData::default_instance_->InitAsDefaultInstance();
  CharBinaryData::default_instance_->InitAsDefaultInstance();
  MapCell::default_instance_->InitAsDefaultInstance();
  TileMapData::default_instance_->InitAsDefaultInstance();
  MapCharInfo::default_instance_->InitAsDefaultInstance();
  MapMonsterInfo::default_instance_->InitAsDefaultInstance();
  MapNpcInfo::default_instance_->InitAsDefaultInstance();
  ItemLoc::default_instance_->InitAsDefaultInstance();
  ItemLocData::default_instance_->InitAsDefaultInstance();
  ItemLocNum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoGameData_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoGameData_2eproto_once_);
void protobuf_AddDesc_ProtoGameData_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoGameData_2eproto_once_,
                 &protobuf_AddDesc_ProtoGameData_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoGameData_2eproto {
  StaticDescriptorInitializer_ProtoGameData_2eproto() {
    protobuf_AddDesc_ProtoGameData_2eproto();
  }
} static_descriptor_initializer_ProtoGameData_2eproto_;
#endif
bool MapCellFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool ObjectState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CharBase::kCharnameFieldNumber;
const int CharBase::kCountryFieldNumber;
const int CharBase::kRaceFieldNumber;
const int CharBase::kLevelFieldNumber;
const int CharBase::kExpFieldNumber;
const int CharBase::kGoldFieldNumber;
const int CharBase::kBindgoldFieldNumber;
const int CharBase::kMoneyFieldNumber;
const int CharBase::kSafemoneyFieldNumber;
const int CharBase::kMapidFieldNumber;
const int CharBase::kXFieldNumber;
const int CharBase::kYFieldNumber;
const int CharBase::kTotalScoreFieldNumber;
const int CharBase::kOfflineTimeFieldNumber;
#endif  // !_MSC_VER

CharBase::CharBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CharBase::InitAsDefaultInstance() {
}

CharBase::CharBase(const CharBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CharBase::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = 0;
  race_ = 0;
  level_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  bindgold_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_ULONGLONG(0);
  safemoney_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0;
  x_ = 0;
  y_ = 0;
  total_score_ = 0;
  offline_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharBase::~CharBase() {
  SharedDtor();
}

void CharBase::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CharBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CharBase& CharBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

CharBase* CharBase::default_instance_ = NULL;

CharBase* CharBase::New() const {
  return new CharBase;
}

void CharBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    country_ = 0;
    race_ = 0;
    level_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    bindgold_ = GOOGLE_ULONGLONG(0);
    money_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    safemoney_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0;
    x_ = 0;
    y_ = 0;
    total_score_ = 0;
    offline_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CharBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // optional int32 country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // optional int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindgold;
        break;
      }

      // optional uint64 bindgold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // optional uint64 money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_safemoney;
        break;
      }

      // optional uint64 safemoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safemoney_)));
          set_has_safemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_x;
        break;
      }

      // optional int32 x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_y;
        break;
      }

      // optional int32 y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_score;
        break;
      }

      // optional int32 total_score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_offline_time;
        break;
      }

      // optional int64 offline_time = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->country(), output);
  }

  // optional int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional uint64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // optional uint64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }

  // optional uint64 bindgold = 7;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bindgold(), output);
  }

  // optional uint64 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->money(), output);
  }

  // optional uint64 safemoney = 9;
  if (has_safemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->safemoney(), output);
  }

  // optional int32 mapid = 10;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mapid(), output);
  }

  // optional int32 x = 11;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->x(), output);
  }

  // optional int32 y = 12;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->y(), output);
  }

  // optional int32 total_score = 13;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->total_score(), output);
  }

  // optional int64 offline_time = 50;
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->offline_time(), output);
  }

}

int CharBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 bindgold = 7;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bindgold());
    }

    // optional uint64 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 safemoney = 9;
    if (has_safemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->safemoney());
    }

    // optional int32 mapid = 10;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 x = 11;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 12;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 total_score = 13;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // optional int64 offline_time = 50;
    if (has_offline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offline_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CharBase*>(&from));
}

void CharBase::MergeFrom(const CharBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_safemoney()) {
      set_safemoney(from.safemoney());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
  }
}

void CharBase::CopyFrom(const CharBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharBase::IsInitialized() const {

  return true;
}

void CharBase::Swap(CharBase* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(country_, other->country_);
    std::swap(race_, other->race_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(money_, other->money_);
    std::swap(safemoney_, other->safemoney_);
    std::swap(mapid_, other->mapid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(total_score_, other->total_score_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CharBase::GetTypeName() const {
  return "CharBase";
}


// ===================================================================

#ifndef _MSC_VER
const int CharData::kInitedFieldNumber;
const int CharData::kNicknameFieldNumber;
const int CharData::kNickcolorFieldNumber;
const int CharData::kJobFieldNumber;
const int CharData::kLevelupPointFieldNumber;
const int CharData::kHealthFieldNumber;
const int CharData::kHpFieldNumber;
const int CharData::kMpFieldNumber;
const int CharData::kSpFieldNumber;
const int CharData::kJpFieldNumber;
const int CharData::kHungryFieldNumber;
const int CharData::kStrFieldNumber;
const int CharData::kDexFieldNumber;
const int CharData::kIntgentFieldNumber;
const int CharData::kConFieldNumber;
const int CharData::kWizFieldNumber;
const int CharData::kPkcountFieldNumber;
const int CharData::kBattlePropFieldNumber;
const int CharData::kReincarnateFieldNumber;
const int CharData::kRenpinFieldNumber;
const int CharData::kBagsizeFieldNumber;
const int CharData::kSafesizeFieldNumber;
const int CharData::kChatChannelFieldNumber;
const int CharData::kTotalGoldFieldNumber;
const int CharData::kVipAwardIdFieldNumber;
const int CharData::kKillEnemyFieldNumber;
const int CharData::kSerialLoginDayFieldNumber;
const int CharData::kCopiesMapFieldNumber;
const int CharData::kTotalGuildCreditsFieldNumber;
const int CharData::kFieldMapidFieldNumber;
const int CharData::kFieldMapxFieldNumber;
const int CharData::kFieldMapyFieldNumber;
#endif  // !_MSC_VER

CharData::CharData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CharData::InitAsDefaultInstance() {
}

CharData::CharData(const CharData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CharData::SharedCtor() {
  _cached_size_ = 0;
  inited_ = false;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickcolor_ = 0;
  job_ = 0;
  levelup_point_ = 0;
  health_ = 0;
  hp_ = 0;
  mp_ = 0;
  sp_ = 0;
  jp_ = 0;
  hungry_ = 100;
  str_ = 0;
  dex_ = 0;
  intgent_ = 0;
  con_ = 0;
  wiz_ = 0;
  pkcount_ = 0;
  battle_prop_ = 0;
  reincarnate_ = 0;
  renpin_ = 0;
  bagsize_ = 0;
  safesize_ = 0;
  chat_channel_ = 0;
  total_gold_ = GOOGLE_ULONGLONG(0);
  vip_award_id_ = 0;
  kill_enemy_ = 0;
  serial_login_day_ = 1;
  copies_map_ = 0;
  total_guild_credits_ = 0;
  field_mapid_ = 0;
  field_mapx_ = 0;
  field_mapy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharData::~CharData() {
  SharedDtor();
}

void CharData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CharData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CharData& CharData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

CharData* CharData::default_instance_ = NULL;

CharData* CharData::New() const {
  return new CharData;
}

void CharData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inited_ = false;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    nickcolor_ = 0;
    job_ = 0;
    levelup_point_ = 0;
    health_ = 0;
    hp_ = 0;
    mp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sp_ = 0;
    jp_ = 0;
    hungry_ = 100;
    str_ = 0;
    dex_ = 0;
    intgent_ = 0;
    con_ = 0;
    wiz_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pkcount_ = 0;
    battle_prop_ = 0;
    reincarnate_ = 0;
    renpin_ = 0;
    bagsize_ = 0;
    safesize_ = 0;
    chat_channel_ = 0;
    total_gold_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    vip_award_id_ = 0;
    kill_enemy_ = 0;
    serial_login_day_ = 1;
    copies_map_ = 0;
    total_guild_credits_ = 0;
    field_mapid_ = 0;
    field_mapx_ = 0;
    field_mapy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CharData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool inited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inited_)));
          set_has_inited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nickcolor;
        break;
      }

      // optional int32 nickcolor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nickcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nickcolor_)));
          set_has_nickcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional int32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_levelup_point;
        break;
      }

      // optional int32 levelup_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelup_point_)));
          set_has_levelup_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_health;
        break;
      }

      // optional int32 health = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hp;
        break;
      }

      // optional int32 hp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mp;
        break;
      }

      // optional int32 mp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sp;
        break;
      }

      // optional int32 sp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jp;
        break;
      }

      // optional int32 jp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jp_)));
          set_has_jp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hungry;
        break;
      }

      // optional int32 hungry = 18 [default = 100];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hungry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hungry_)));
          set_has_hungry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_str;
        break;
      }

      // optional int32 str = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_)));
          set_has_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_dex;
        break;
      }

      // optional int32 dex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_intgent;
        break;
      }

      // optional int32 intgent = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intgent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intgent_)));
          set_has_intgent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_con;
        break;
      }

      // optional int32 con = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_wiz;
        break;
      }

      // optional int32 wiz = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wiz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiz_)));
          set_has_wiz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_pkcount;
        break;
      }

      // optional int32 pkcount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_battle_prop;
        break;
      }

      // optional int32 battle_prop = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_prop_)));
          set_has_battle_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_reincarnate;
        break;
      }

      // optional int32 reincarnate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reincarnate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reincarnate_)));
          set_has_reincarnate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_renpin;
        break;
      }

      // optional int32 renpin = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renpin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renpin_)));
          set_has_renpin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_bagsize;
        break;
      }

      // optional int32 bagsize = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagsize_)));
          set_has_bagsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_safesize;
        break;
      }

      // optional int32 safesize = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safesize_)));
          set_has_safesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_chat_channel;
        break;
      }

      // optional int32 chat_channel = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_channel_)));
          set_has_chat_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_total_gold;
        break;
      }

      // optional uint64 total_gold = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_gold_)));
          set_has_total_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_vip_award_id;
        break;
      }

      // optional int32 vip_award_id = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_award_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_award_id_)));
          set_has_vip_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_kill_enemy;
        break;
      }

      // optional int32 kill_enemy = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_enemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_enemy_)));
          set_has_kill_enemy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_serial_login_day;
        break;
      }

      // optional int32 serial_login_day = 40 [default = 1];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_login_day_)));
          set_has_serial_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_copies_map;
        break;
      }

      // optional int32 copies_map = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copies_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_map_)));
          set_has_copies_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_total_guild_credits;
        break;
      }

      // optional int32 total_guild_credits = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_guild_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_guild_credits_)));
          set_has_total_guild_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_field_mapid;
        break;
      }

      // optional int32 field_mapid = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_mapid_)));
          set_has_field_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_field_mapx;
        break;
      }

      // optional int32 field_mapx = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_mapx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_mapx_)));
          set_has_field_mapx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_field_mapy;
        break;
      }

      // optional int32 field_mapy = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_mapy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_mapy_)));
          set_has_field_mapy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool inited = 1;
  if (has_inited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->inited(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 nickcolor = 3;
  if (has_nickcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nickcolor(), output);
  }

  // optional int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // optional int32 levelup_point = 5;
  if (has_levelup_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->levelup_point(), output);
  }

  // optional int32 health = 13;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->health(), output);
  }

  // optional int32 hp = 14;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hp(), output);
  }

  // optional int32 mp = 15;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mp(), output);
  }

  // optional int32 sp = 16;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sp(), output);
  }

  // optional int32 jp = 17;
  if (has_jp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->jp(), output);
  }

  // optional int32 hungry = 18 [default = 100];
  if (has_hungry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hungry(), output);
  }

  // optional int32 str = 19;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->str(), output);
  }

  // optional int32 dex = 20;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->dex(), output);
  }

  // optional int32 intgent = 21;
  if (has_intgent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->intgent(), output);
  }

  // optional int32 con = 22;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->con(), output);
  }

  // optional int32 wiz = 23;
  if (has_wiz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->wiz(), output);
  }

  // optional int32 pkcount = 26;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->pkcount(), output);
  }

  // optional int32 battle_prop = 30;
  if (has_battle_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->battle_prop(), output);
  }

  // optional int32 reincarnate = 32;
  if (has_reincarnate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->reincarnate(), output);
  }

  // optional int32 renpin = 33;
  if (has_renpin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->renpin(), output);
  }

  // optional int32 bagsize = 34;
  if (has_bagsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->bagsize(), output);
  }

  // optional int32 safesize = 35;
  if (has_safesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->safesize(), output);
  }

  // optional int32 chat_channel = 36;
  if (has_chat_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->chat_channel(), output);
  }

  // optional uint64 total_gold = 37;
  if (has_total_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->total_gold(), output);
  }

  // optional int32 vip_award_id = 38;
  if (has_vip_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->vip_award_id(), output);
  }

  // optional int32 kill_enemy = 39;
  if (has_kill_enemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->kill_enemy(), output);
  }

  // optional int32 serial_login_day = 40 [default = 1];
  if (has_serial_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->serial_login_day(), output);
  }

  // optional int32 copies_map = 41;
  if (has_copies_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->copies_map(), output);
  }

  // optional int32 total_guild_credits = 42;
  if (has_total_guild_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->total_guild_credits(), output);
  }

  // optional int32 field_mapid = 43;
  if (has_field_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->field_mapid(), output);
  }

  // optional int32 field_mapx = 44;
  if (has_field_mapx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->field_mapx(), output);
  }

  // optional int32 field_mapy = 45;
  if (has_field_mapy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->field_mapy(), output);
  }

}

int CharData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool inited = 1;
    if (has_inited()) {
      total_size += 1 + 1;
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 nickcolor = 3;
    if (has_nickcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nickcolor());
    }

    // optional int32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 levelup_point = 5;
    if (has_levelup_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelup_point());
    }

    // optional int32 health = 13;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 hp = 14;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 15;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sp = 16;
    if (has_sp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

    // optional int32 jp = 17;
    if (has_jp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jp());
    }

    // optional int32 hungry = 18 [default = 100];
    if (has_hungry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hungry());
    }

    // optional int32 str = 19;
    if (has_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str());
    }

    // optional int32 dex = 20;
    if (has_dex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dex());
    }

    // optional int32 intgent = 21;
    if (has_intgent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intgent());
    }

    // optional int32 con = 22;
    if (has_con()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con());
    }

    // optional int32 wiz = 23;
    if (has_wiz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiz());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 pkcount = 26;
    if (has_pkcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // optional int32 battle_prop = 30;
    if (has_battle_prop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_prop());
    }

    // optional int32 reincarnate = 32;
    if (has_reincarnate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reincarnate());
    }

    // optional int32 renpin = 33;
    if (has_renpin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renpin());
    }

    // optional int32 bagsize = 34;
    if (has_bagsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagsize());
    }

    // optional int32 safesize = 35;
    if (has_safesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safesize());
    }

    // optional int32 chat_channel = 36;
    if (has_chat_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_channel());
    }

    // optional uint64 total_gold = 37;
    if (has_total_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_gold());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 vip_award_id = 38;
    if (has_vip_award_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_award_id());
    }

    // optional int32 kill_enemy = 39;
    if (has_kill_enemy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_enemy());
    }

    // optional int32 serial_login_day = 40 [default = 1];
    if (has_serial_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_login_day());
    }

    // optional int32 copies_map = 41;
    if (has_copies_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies_map());
    }

    // optional int32 total_guild_credits = 42;
    if (has_total_guild_credits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_guild_credits());
    }

    // optional int32 field_mapid = 43;
    if (has_field_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_mapid());
    }

    // optional int32 field_mapx = 44;
    if (has_field_mapx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_mapx());
    }

    // optional int32 field_mapy = 45;
    if (has_field_mapy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_mapy());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CharData*>(&from));
}

void CharData::MergeFrom(const CharData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inited()) {
      set_inited(from.inited());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_nickcolor()) {
      set_nickcolor(from.nickcolor());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_levelup_point()) {
      set_levelup_point(from.levelup_point());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_jp()) {
      set_jp(from.jp());
    }
    if (from.has_hungry()) {
      set_hungry(from.hungry());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_intgent()) {
      set_intgent(from.intgent());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
    if (from.has_wiz()) {
      set_wiz(from.wiz());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_battle_prop()) {
      set_battle_prop(from.battle_prop());
    }
    if (from.has_reincarnate()) {
      set_reincarnate(from.reincarnate());
    }
    if (from.has_renpin()) {
      set_renpin(from.renpin());
    }
    if (from.has_bagsize()) {
      set_bagsize(from.bagsize());
    }
    if (from.has_safesize()) {
      set_safesize(from.safesize());
    }
    if (from.has_chat_channel()) {
      set_chat_channel(from.chat_channel());
    }
    if (from.has_total_gold()) {
      set_total_gold(from.total_gold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vip_award_id()) {
      set_vip_award_id(from.vip_award_id());
    }
    if (from.has_kill_enemy()) {
      set_kill_enemy(from.kill_enemy());
    }
    if (from.has_serial_login_day()) {
      set_serial_login_day(from.serial_login_day());
    }
    if (from.has_copies_map()) {
      set_copies_map(from.copies_map());
    }
    if (from.has_total_guild_credits()) {
      set_total_guild_credits(from.total_guild_credits());
    }
    if (from.has_field_mapid()) {
      set_field_mapid(from.field_mapid());
    }
    if (from.has_field_mapx()) {
      set_field_mapx(from.field_mapx());
    }
    if (from.has_field_mapy()) {
      set_field_mapy(from.field_mapy());
    }
  }
}

void CharData::CopyFrom(const CharData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharData::IsInitialized() const {

  return true;
}

void CharData::Swap(CharData* other) {
  if (other != this) {
    std::swap(inited_, other->inited_);
    std::swap(nickname_, other->nickname_);
    std::swap(nickcolor_, other->nickcolor_);
    std::swap(job_, other->job_);
    std::swap(levelup_point_, other->levelup_point_);
    std::swap(health_, other->health_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(sp_, other->sp_);
    std::swap(jp_, other->jp_);
    std::swap(hungry_, other->hungry_);
    std::swap(str_, other->str_);
    std::swap(dex_, other->dex_);
    std::swap(intgent_, other->intgent_);
    std::swap(con_, other->con_);
    std::swap(wiz_, other->wiz_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(battle_prop_, other->battle_prop_);
    std::swap(reincarnate_, other->reincarnate_);
    std::swap(renpin_, other->renpin_);
    std::swap(bagsize_, other->bagsize_);
    std::swap(safesize_, other->safesize_);
    std::swap(chat_channel_, other->chat_channel_);
    std::swap(total_gold_, other->total_gold_);
    std::swap(vip_award_id_, other->vip_award_id_);
    std::swap(kill_enemy_, other->kill_enemy_);
    std::swap(serial_login_day_, other->serial_login_day_);
    std::swap(copies_map_, other->copies_map_);
    std::swap(total_guild_credits_, other->total_guild_credits_);
    std::swap(field_mapid_, other->field_mapid_);
    std::swap(field_mapx_, other->field_mapx_);
    std::swap(field_mapy_, other->field_mapy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CharData::GetTypeName() const {
  return "CharData";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kDurationFieldNumber;
const int EquipInfo::kFrozenFieldNumber;
const int EquipInfo::kPropFieldNumber;
const int EquipInfo::kStarFieldNumber;
const int EquipInfo::kGroovesFieldNumber;
const int EquipInfo::kUpgradeFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  frozen_ = 0;
  prop_ = 0;
  star_ = 0;
  upgrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipInfo& EquipInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    frozen_ = 0;
    prop_ = 0;
    star_ = 0;
    upgrade_ = 0;
  }
  grooves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frozen;
        break;
      }

      // optional int32 frozen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_)));
          set_has_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prop;
        break;
      }

      // optional int32 prop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop_)));
          set_has_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grooves;
        break;
      }

      // repeated int32 grooves = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grooves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_grooves())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grooves())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grooves;
        if (input->ExpectTag(48)) goto parse_upgrade;
        break;
      }

      // optional int32 upgrade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 frozen = 2;
  if (has_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frozen(), output);
  }

  // optional int32 prop = 3;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prop(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // repeated int32 grooves = 5;
  for (int i = 0; i < this->grooves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->grooves(i), output);
  }

  // optional int32 upgrade = 6;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upgrade(), output);
  }

}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 frozen = 2;
    if (has_frozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frozen());
    }

    // optional int32 prop = 3;
    if (has_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 upgrade = 6;
    if (has_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade());
    }

  }
  // repeated int32 grooves = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->grooves_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grooves(i));
    }
    total_size += 1 * this->grooves_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipInfo*>(&from));
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  grooves_.MergeFrom(from.grooves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_frozen()) {
      set_frozen(from.frozen());
    }
    if (from.has_prop()) {
      set_prop(from.prop());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
  }
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {

  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(frozen_, other->frozen_);
    std::swap(prop_, other->prop_);
    std::swap(star_, other->star_);
    grooves_.Swap(&other->grooves_);
    std::swap(upgrade_, other->upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipInfo::GetTypeName() const {
  return "EquipInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfo::kPropertyFieldNumber;
const int PetInfo::kLevelFieldNumber;
const int PetInfo::kExpFieldNumber;
const int PetInfo::kHpFieldNumber;
#endif  // !_MSC_VER

PetInfo::PetInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PetInfo::InitAsDefaultInstance() {
}

PetInfo::PetInfo(const PetInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PetInfo::SharedCtor() {
  _cached_size_ = 0;
  property_ = 0;
  level_ = 0;
  exp_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfo::~PetInfo() {
  SharedDtor();
}

void PetInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PetInfo& PetInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

PetInfo* PetInfo::default_instance_ = NULL;

PetInfo* PetInfo::New() const {
  return new PetInfo;
}

void PetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    property_ = 0;
    level_ = 0;
    exp_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

}

int PetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PetInfo*>(&from));
}

void PetInfo::MergeFrom(const PetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
}

void PetInfo::CopyFrom(const PetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfo::IsInitialized() const {

  return true;
}

void PetInfo::Swap(PetInfo* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PetInfo::GetTypeName() const {
  return "PetInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int WingInfo::kLevelFieldNumber;
const int WingInfo::kExpFieldNumber;
#endif  // !_MSC_VER

WingInfo::WingInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WingInfo::InitAsDefaultInstance() {
}

WingInfo::WingInfo(const WingInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WingInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingInfo::~WingInfo() {
  SharedDtor();
}

void WingInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WingInfo& WingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

WingInfo* WingInfo::default_instance_ = NULL;

WingInfo* WingInfo::New() const {
  return new WingInfo;
}

void WingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

}

int WingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WingInfo*>(&from));
}

void WingInfo::MergeFrom(const WingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
}

void WingInfo::CopyFrom(const WingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingInfo::IsInitialized() const {

  return true;
}

void WingInfo::Swap(WingInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WingInfo::GetTypeName() const {
  return "WingInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipAddInfo::kStrFieldNumber;
const int EquipAddInfo::kConFieldNumber;
const int EquipAddInfo::kDexFieldNumber;
const int EquipAddInfo::kWizFieldNumber;
const int EquipAddInfo::kIntgentFieldNumber;
const int EquipAddInfo::kAttackFieldNumber;
const int EquipAddInfo::kAttackPerFieldNumber;
const int EquipAddInfo::kCriticalFieldNumber;
const int EquipAddInfo::kNone2FieldNumber;
const int EquipAddInfo::kPhydefFieldNumber;
const int EquipAddInfo::kPhydefPerFieldNumber;
const int EquipAddInfo::kMagdefFieldNumber;
const int EquipAddInfo::kMagdefPerFieldNumber;
const int EquipAddInfo::kHpFieldNumber;
const int EquipAddInfo::kHpPerFieldNumber;
const int EquipAddInfo::kMpFieldNumber;
const int EquipAddInfo::kMpPerFieldNumber;
const int EquipAddInfo::kSpFieldNumber;
const int EquipAddInfo::kSpPerFieldNumber;
const int EquipAddInfo::kAtkAccFieldNumber;
const int EquipAddInfo::kDefAccFieldNumber;
#endif  // !_MSC_VER

EquipAddInfo::EquipAddInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipAddInfo::InitAsDefaultInstance() {
}

EquipAddInfo::EquipAddInfo(const EquipAddInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipAddInfo::SharedCtor() {
  _cached_size_ = 0;
  str_ = 0;
  con_ = 0;
  dex_ = 0;
  wiz_ = 0;
  intgent_ = 0;
  attack_ = 0;
  attack_per_ = 0;
  critical_ = 0;
  none2_ = 0;
  phydef_ = 0;
  phydef_per_ = 0;
  magdef_ = 0;
  magdef_per_ = 0;
  hp_ = 0;
  hp_per_ = 0;
  mp_ = 0;
  mp_per_ = 0;
  sp_ = 0;
  sp_per_ = 0;
  atk_acc_ = 0;
  def_acc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAddInfo::~EquipAddInfo() {
  SharedDtor();
}

void EquipAddInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipAddInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipAddInfo& EquipAddInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

EquipAddInfo* EquipAddInfo::default_instance_ = NULL;

EquipAddInfo* EquipAddInfo::New() const {
  return new EquipAddInfo;
}

void EquipAddInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    str_ = 0;
    con_ = 0;
    dex_ = 0;
    wiz_ = 0;
    intgent_ = 0;
    attack_ = 0;
    attack_per_ = 0;
    critical_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    none2_ = 0;
    phydef_ = 0;
    phydef_per_ = 0;
    magdef_ = 0;
    magdef_per_ = 0;
    hp_ = 0;
    hp_per_ = 0;
    mp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mp_per_ = 0;
    sp_ = 0;
    sp_per_ = 0;
    atk_acc_ = 0;
    def_acc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipAddInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_)));
          set_has_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_con;
        break;
      }

      // optional int32 con = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dex;
        break;
      }

      // optional int32 dex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wiz;
        break;
      }

      // optional int32 wiz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wiz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiz_)));
          set_has_wiz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intgent;
        break;
      }

      // optional int32 intgent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intgent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intgent_)));
          set_has_intgent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack;
        break;
      }

      // optional int32 attack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack_per;
        break;
      }

      // optional int32 attack_per = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_per_)));
          set_has_attack_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_critical;
        break;
      }

      // optional int32 critical = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_none2;
        break;
      }

      // optional int32 none2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_none2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &none2_)));
          set_has_none2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_phydef;
        break;
      }

      // optional int32 phydef = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydef_)));
          set_has_phydef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phydef_per;
        break;
      }

      // optional int32 phydef_per = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydef_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydef_per_)));
          set_has_phydef_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_magdef;
        break;
      }

      // optional int32 magdef = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magdef_)));
          set_has_magdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_magdef_per;
        break;
      }

      // optional int32 magdef_per = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magdef_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magdef_per_)));
          set_has_magdef_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hp;
        break;
      }

      // optional int32 hp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hp_per;
        break;
      }

      // optional int32 hp_per = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_per_)));
          set_has_hp_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_mp;
        break;
      }

      // optional int32 mp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_mp_per;
        break;
      }

      // optional int32 mp_per = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_per_)));
          set_has_mp_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sp;
        break;
      }

      // optional int32 sp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sp_per;
        break;
      }

      // optional int32 sp_per = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_per_)));
          set_has_sp_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_atk_acc;
        break;
      }

      // optional int32 atk_acc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_acc_)));
          set_has_atk_acc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_def_acc;
        break;
      }

      // optional int32 def_acc = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_acc_)));
          set_has_def_acc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipAddInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->str(), output);
  }

  // optional int32 con = 2;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->con(), output);
  }

  // optional int32 dex = 3;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dex(), output);
  }

  // optional int32 wiz = 4;
  if (has_wiz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wiz(), output);
  }

  // optional int32 intgent = 5;
  if (has_intgent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->intgent(), output);
  }

  // optional int32 attack = 6;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack(), output);
  }

  // optional int32 attack_per = 7;
  if (has_attack_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack_per(), output);
  }

  // optional int32 critical = 8;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->critical(), output);
  }

  // optional int32 none2 = 9;
  if (has_none2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->none2(), output);
  }

  // optional int32 phydef = 10;
  if (has_phydef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->phydef(), output);
  }

  // optional int32 phydef_per = 11;
  if (has_phydef_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phydef_per(), output);
  }

  // optional int32 magdef = 12;
  if (has_magdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->magdef(), output);
  }

  // optional int32 magdef_per = 13;
  if (has_magdef_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->magdef_per(), output);
  }

  // optional int32 hp = 14;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hp(), output);
  }

  // optional int32 hp_per = 15;
  if (has_hp_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hp_per(), output);
  }

  // optional int32 mp = 16;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->mp(), output);
  }

  // optional int32 mp_per = 17;
  if (has_mp_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->mp_per(), output);
  }

  // optional int32 sp = 18;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sp(), output);
  }

  // optional int32 sp_per = 19;
  if (has_sp_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sp_per(), output);
  }

  // optional int32 atk_acc = 20;
  if (has_atk_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->atk_acc(), output);
  }

  // optional int32 def_acc = 21;
  if (has_def_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->def_acc(), output);
  }

}

int EquipAddInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str());
    }

    // optional int32 con = 2;
    if (has_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con());
    }

    // optional int32 dex = 3;
    if (has_dex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dex());
    }

    // optional int32 wiz = 4;
    if (has_wiz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiz());
    }

    // optional int32 intgent = 5;
    if (has_intgent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intgent());
    }

    // optional int32 attack = 6;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 attack_per = 7;
    if (has_attack_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_per());
    }

    // optional int32 critical = 8;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critical());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 none2 = 9;
    if (has_none2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->none2());
    }

    // optional int32 phydef = 10;
    if (has_phydef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydef());
    }

    // optional int32 phydef_per = 11;
    if (has_phydef_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydef_per());
    }

    // optional int32 magdef = 12;
    if (has_magdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magdef());
    }

    // optional int32 magdef_per = 13;
    if (has_magdef_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magdef_per());
    }

    // optional int32 hp = 14;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 hp_per = 15;
    if (has_hp_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_per());
    }

    // optional int32 mp = 16;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 mp_per = 17;
    if (has_mp_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_per());
    }

    // optional int32 sp = 18;
    if (has_sp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

    // optional int32 sp_per = 19;
    if (has_sp_per()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp_per());
    }

    // optional int32 atk_acc = 20;
    if (has_atk_acc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk_acc());
    }

    // optional int32 def_acc = 21;
    if (has_def_acc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def_acc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAddInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipAddInfo*>(&from));
}

void EquipAddInfo::MergeFrom(const EquipAddInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_wiz()) {
      set_wiz(from.wiz());
    }
    if (from.has_intgent()) {
      set_intgent(from.intgent());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_attack_per()) {
      set_attack_per(from.attack_per());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_none2()) {
      set_none2(from.none2());
    }
    if (from.has_phydef()) {
      set_phydef(from.phydef());
    }
    if (from.has_phydef_per()) {
      set_phydef_per(from.phydef_per());
    }
    if (from.has_magdef()) {
      set_magdef(from.magdef());
    }
    if (from.has_magdef_per()) {
      set_magdef_per(from.magdef_per());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hp_per()) {
      set_hp_per(from.hp_per());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mp_per()) {
      set_mp_per(from.mp_per());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_sp_per()) {
      set_sp_per(from.sp_per());
    }
    if (from.has_atk_acc()) {
      set_atk_acc(from.atk_acc());
    }
    if (from.has_def_acc()) {
      set_def_acc(from.def_acc());
    }
  }
}

void EquipAddInfo::CopyFrom(const EquipAddInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAddInfo::IsInitialized() const {

  return true;
}

void EquipAddInfo::Swap(EquipAddInfo* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(con_, other->con_);
    std::swap(dex_, other->dex_);
    std::swap(wiz_, other->wiz_);
    std::swap(intgent_, other->intgent_);
    std::swap(attack_, other->attack_);
    std::swap(attack_per_, other->attack_per_);
    std::swap(critical_, other->critical_);
    std::swap(none2_, other->none2_);
    std::swap(phydef_, other->phydef_);
    std::swap(phydef_per_, other->phydef_per_);
    std::swap(magdef_, other->magdef_);
    std::swap(magdef_per_, other->magdef_per_);
    std::swap(hp_, other->hp_);
    std::swap(hp_per_, other->hp_per_);
    std::swap(mp_, other->mp_);
    std::swap(mp_per_, other->mp_per_);
    std::swap(sp_, other->sp_);
    std::swap(sp_per_, other->sp_per_);
    std::swap(atk_acc_, other->atk_acc_);
    std::swap(def_acc_, other->def_acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipAddInfo::GetTypeName() const {
  return "EquipAddInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemData::kIdFieldNumber;
const int ItemData::kItemIdFieldNumber;
const int ItemData::kSlotFieldNumber;
const int ItemData::kBindFieldNumber;
const int ItemData::kOverlayFieldNumber;
const int ItemData::kQualityFieldNumber;
const int ItemData::kExpiredTimeFieldNumber;
const int ItemData::kEquipInfoFieldNumber;
const int ItemData::kPetInfoFieldNumber;
const int ItemData::kWingInfoFieldNumber;
const int ItemData::kEquipAddInfoFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_info_ = const_cast< ::EquipInfo*>(
      ::EquipInfo::internal_default_instance());
#else
  equip_info_ = const_cast< ::EquipInfo*>(&::EquipInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pet_info_ = const_cast< ::PetInfo*>(
      ::PetInfo::internal_default_instance());
#else
  pet_info_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  wing_info_ = const_cast< ::WingInfo*>(
      ::WingInfo::internal_default_instance());
#else
  wing_info_ = const_cast< ::WingInfo*>(&::WingInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equip_add_info_ = const_cast< ::EquipAddInfo*>(
      ::EquipAddInfo::internal_default_instance());
#else
  equip_add_info_ = const_cast< ::EquipAddInfo*>(&::EquipAddInfo::default_instance());
#endif
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  item_id_ = 0;
  slot_ = 0;
  bind_ = 0;
  overlay_ = 1;
  quality_ = 0;
  expired_time_ = GOOGLE_LONGLONG(0);
  equip_info_ = NULL;
  pet_info_ = NULL;
  wing_info_ = NULL;
  equip_add_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  SharedDtor();
}

void ItemData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equip_info_;
    delete pet_info_;
    delete wing_info_;
    delete equip_add_info_;
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemData& ItemData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    item_id_ = 0;
    slot_ = 0;
    bind_ = 0;
    overlay_ = 1;
    quality_ = 0;
    expired_time_ = GOOGLE_LONGLONG(0);
    if (has_equip_info()) {
      if (equip_info_ != NULL) equip_info_->::EquipInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pet_info()) {
      if (pet_info_ != NULL) pet_info_->::PetInfo::Clear();
    }
    if (has_wing_info()) {
      if (wing_info_ != NULL) wing_info_->::WingInfo::Clear();
    }
    if (has_equip_add_info()) {
      if (equip_add_info_ != NULL) equip_add_info_->::EquipAddInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // optional int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional int32 bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_overlay;
        break;
      }

      // optional int32 overlay = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlay_)));
          set_has_overlay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expired_time;
        break;
      }

      // optional int64 expired_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_equip_info;
        break;
      }

      // optional .EquipInfo equip_info = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1602)) goto parse_pet_info;
        break;
      }

      // optional .PetInfo pet_info = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2402)) goto parse_wing_info;
        break;
      }

      // optional .WingInfo wing_info = 300;
      case 300: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wing_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(3202)) goto parse_equip_add_info;
        break;
      }

      // optional .EquipAddInfo equip_add_info = 400;
      case 400: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_add_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind(), output);
  }

  // optional int32 overlay = 5 [default = 1];
  if (has_overlay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overlay(), output);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // optional int64 expired_time = 7;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expired_time(), output);
  }

  // optional .EquipInfo equip_info = 100;
  if (has_equip_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->equip_info(), output);
  }

  // optional .PetInfo pet_info = 200;
  if (has_pet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      200, this->pet_info(), output);
  }

  // optional .WingInfo wing_info = 300;
  if (has_wing_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      300, this->wing_info(), output);
  }

  // optional .EquipAddInfo equip_add_info = 400;
  if (has_equip_add_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      400, this->equip_add_info(), output);
  }

}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 overlay = 5 [default = 1];
    if (has_overlay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlay());
    }

    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 expired_time = 7;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expired_time());
    }

    // optional .EquipInfo equip_info = 100;
    if (has_equip_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PetInfo pet_info = 200;
    if (has_pet_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_info());
    }

    // optional .WingInfo wing_info = 300;
    if (has_wing_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_info());
    }

    // optional .EquipAddInfo equip_add_info = 400;
    if (has_equip_add_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_add_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemData*>(&from));
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_overlay()) {
      set_overlay(from.overlay());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
    if (from.has_equip_info()) {
      mutable_equip_info()->::EquipInfo::MergeFrom(from.equip_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pet_info()) {
      mutable_pet_info()->::PetInfo::MergeFrom(from.pet_info());
    }
    if (from.has_wing_info()) {
      mutable_wing_info()->::WingInfo::MergeFrom(from.wing_info());
    }
    if (from.has_equip_add_info()) {
      mutable_equip_add_info()->::EquipAddInfo::MergeFrom(from.equip_add_info());
    }
  }
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(slot_, other->slot_);
    std::swap(bind_, other->bind_);
    std::swap(overlay_, other->overlay_);
    std::swap(quality_, other->quality_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(equip_info_, other->equip_info_);
    std::swap(pet_info_, other->pet_info_);
    std::swap(wing_info_, other->wing_info_);
    std::swap(equip_add_info_, other->equip_add_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemData::GetTypeName() const {
  return "ItemData";
}


// ===================================================================

bool ShortcutKeyData_KeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShortcutKeyData_KeyType ShortcutKeyData::KEY_TYPE_NULL;
const ShortcutKeyData_KeyType ShortcutKeyData::KEY_TYPE_ITEM;
const ShortcutKeyData_KeyType ShortcutKeyData::KEY_TYPE_SKILL;
const ShortcutKeyData_KeyType ShortcutKeyData::KeyType_MIN;
const ShortcutKeyData_KeyType ShortcutKeyData::KeyType_MAX;
const int ShortcutKeyData::KeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShortcutKeyData::kTypeFieldNumber;
const int ShortcutKeyData::kKeySlotFieldNumber;
const int ShortcutKeyData::kItemIdFieldNumber;
const int ShortcutKeyData::kItemSlotFieldNumber;
#endif  // !_MSC_VER

ShortcutKeyData::ShortcutKeyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShortcutKeyData::InitAsDefaultInstance() {
}

ShortcutKeyData::ShortcutKeyData(const ShortcutKeyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShortcutKeyData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  key_slot_ = 0;
  item_id_ = 0;
  item_slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortcutKeyData::~ShortcutKeyData() {
  SharedDtor();
}

void ShortcutKeyData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShortcutKeyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShortcutKeyData& ShortcutKeyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ShortcutKeyData* ShortcutKeyData::default_instance_ = NULL;

ShortcutKeyData* ShortcutKeyData::New() const {
  return new ShortcutKeyData;
}

void ShortcutKeyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    key_slot_ = 0;
    item_id_ = 0;
    item_slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShortcutKeyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShortcutKeyData.KeyType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShortcutKeyData_KeyType_IsValid(value)) {
            set_type(static_cast< ::ShortcutKeyData_KeyType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key_slot;
        break;
      }

      // optional int32 key_slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_slot_)));
          set_has_key_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_slot;
        break;
      }

      // optional int32 item_slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_slot_)));
          set_has_item_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShortcutKeyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ShortcutKeyData.KeyType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 key_slot = 2;
  if (has_key_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_slot(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // optional int32 item_slot = 4;
  if (has_item_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_slot(), output);
  }

}

int ShortcutKeyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ShortcutKeyData.KeyType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 key_slot = 2;
    if (has_key_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_slot());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_slot = 4;
    if (has_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_slot());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortcutKeyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShortcutKeyData*>(&from));
}

void ShortcutKeyData::MergeFrom(const ShortcutKeyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key_slot()) {
      set_key_slot(from.key_slot());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_slot()) {
      set_item_slot(from.item_slot());
    }
  }
}

void ShortcutKeyData::CopyFrom(const ShortcutKeyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortcutKeyData::IsInitialized() const {

  return true;
}

void ShortcutKeyData::Swap(ShortcutKeyData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_slot_, other->key_slot_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_slot_, other->item_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShortcutKeyData::GetTypeName() const {
  return "ShortcutKeyData";
}


// ===================================================================

#ifndef _MSC_VER
const int JobSkillData::kSkillIdFieldNumber;
const int JobSkillData::kLevelFieldNumber;
const int JobSkillData::kExpFieldNumber;
const int JobSkillData::kCdTimeFieldNumber;
#endif  // !_MSC_VER

JobSkillData::JobSkillData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void JobSkillData::InitAsDefaultInstance() {
}

JobSkillData::JobSkillData(const JobSkillData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void JobSkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  exp_ = 0;
  cd_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSkillData::~JobSkillData() {
  SharedDtor();
}

void JobSkillData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JobSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JobSkillData& JobSkillData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

JobSkillData* JobSkillData::default_instance_ = NULL;

JobSkillData* JobSkillData::New() const {
  return new JobSkillData;
}

void JobSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    exp_ = 0;
    cd_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool JobSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd_time;
        break;
      }

      // optional int64 cd_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int64 cd_time = 4;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cd_time(), output);
  }

}

int JobSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 cd_time = 4;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cd_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSkillData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JobSkillData*>(&from));
}

void JobSkillData::MergeFrom(const JobSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
}

void JobSkillData::CopyFrom(const JobSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSkillData::IsInitialized() const {

  return true;
}

void JobSkillData::Swap(JobSkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JobSkillData::GetTypeName() const {
  return "JobSkillData";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kSkillIdFieldNumber;
const int SkillData::kLevelFieldNumber;
const int SkillData::kExpFieldNumber;
const int SkillData::kCdTimeFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  exp_ = 0;
  cd_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillData& SkillData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    exp_ = 0;
    cd_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd_time;
        break;
      }

      // optional int64 cd_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int64 cd_time = 4;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cd_time(), output);
  }

}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 cd_time = 4;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cd_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillData*>(&from));
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillData::GetTypeName() const {
  return "SkillData";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBuffData::kAttackerIdFieldNumber;
const int SkillBuffData::kBuffIdFieldNumber;
const int SkillBuffData::kSkillIdFieldNumber;
const int SkillBuffData::kSkillLevelFieldNumber;
const int SkillBuffData::kRemainTimeFieldNumber;
const int SkillBuffData::kParam1FieldNumber;
const int SkillBuffData::kParam2FieldNumber;
const int SkillBuffData::kParam3FieldNumber;
const int SkillBuffData::kParam4FieldNumber;
#endif  // !_MSC_VER

SkillBuffData::SkillBuffData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkillBuffData::InitAsDefaultInstance() {
}

SkillBuffData::SkillBuffData(const SkillBuffData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBuffData::SharedCtor() {
  _cached_size_ = 0;
  attacker_id_ = 0;
  buff_id_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  remain_time_ = 0;
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  param4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBuffData::~SkillBuffData() {
  SharedDtor();
}

void SkillBuffData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillBuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillBuffData& SkillBuffData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

SkillBuffData* SkillBuffData::default_instance_ = NULL;

SkillBuffData* SkillBuffData::New() const {
  return new SkillBuffData;
}

void SkillBuffData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_id_ = 0;
    buff_id_ = 0;
    skill_id_ = 0;
    skill_level_ = 0;
    remain_time_ = 0;
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkillBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attacker_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_id_)));
          set_has_attacker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // optional int32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_param3;
        break;
      }

      // optional int32 param3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_param4;
        break;
      }

      // optional int32 param4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attacker_id = 1;
  if (has_attacker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attacker_id(), output);
  }

  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_id(), output);
  }

  // optional int32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  // optional int32 skill_level = 4;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_level(), output);
  }

  // optional int32 remain_time = 5;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain_time(), output);
  }

  // optional int32 param1 = 6;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param1(), output);
  }

  // optional int32 param2 = 7;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param2(), output);
  }

  // optional int32 param3 = 8;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->param3(), output);
  }

  // optional int32 param4 = 9;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->param4(), output);
  }

}

int SkillBuffData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attacker_id = 1;
    if (has_attacker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_id());
    }

    // optional int32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // optional int32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional int32 remain_time = 5;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional int32 param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional int32 param3 = 8;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 param4 = 9;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBuffData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillBuffData*>(&from));
}

void SkillBuffData::MergeFrom(const SkillBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_id()) {
      set_attacker_id(from.attacker_id());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
}

void SkillBuffData::CopyFrom(const SkillBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBuffData::IsInitialized() const {

  return true;
}

void SkillBuffData::Swap(SkillBuffData* other) {
  if (other != this) {
    std::swap(attacker_id_, other->attacker_id_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillBuffData::GetTypeName() const {
  return "SkillBuffData";
}


// ===================================================================

bool MissionData_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionData_State MissionData::UNCOMPLETE;
const MissionData_State MissionData::COMPLETED;
const MissionData_State MissionData::CLOSED;
const MissionData_State MissionData::UNACCEPT;
const MissionData_State MissionData::State_MIN;
const MissionData_State MissionData::State_MAX;
const int MissionData::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionData::kIdFieldNumber;
const int MissionData::kStateFieldNumber;
const int MissionData::kMonNumFieldNumber;
const int MissionData::kItemNumFieldNumber;
#endif  // !_MSC_VER

MissionData::MissionData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MissionData::InitAsDefaultInstance() {
}

MissionData::MissionData(const MissionData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MissionData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  mon_num_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionData::~MissionData() {
  SharedDtor();
}

void MissionData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MissionData& MissionData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

MissionData* MissionData::default_instance_ = NULL;

MissionData* MissionData::New() const {
  return new MissionData;
}

void MissionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    mon_num_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .MissionData.State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionData_State_IsValid(value)) {
            set_state(static_cast< ::MissionData_State >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mon_num;
        break;
      }

      // optional int32 mon_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mon_num_)));
          set_has_mon_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .MissionData.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional int32 mon_num = 3;
  if (has_mon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mon_num(), output);
  }

  // optional int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }

}

int MissionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .MissionData.State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 mon_num = 3;
    if (has_mon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mon_num());
    }

    // optional int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MissionData*>(&from));
}

void MissionData::MergeFrom(const MissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_mon_num()) {
      set_mon_num(from.mon_num());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
}

void MissionData::CopyFrom(const MissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionData::IsInitialized() const {

  return true;
}

void MissionData::Swap(MissionData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(mon_num_, other->mon_num_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MissionData::GetTypeName() const {
  return "MissionData";
}


// ===================================================================

bool AchievementData_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AchievementData_State AchievementData::UNCOMPLETE;
const AchievementData_State AchievementData::COMPLETED;
const AchievementData_State AchievementData::CLOSED;
const AchievementData_State AchievementData::State_MIN;
const AchievementData_State AchievementData::State_MAX;
const int AchievementData::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AchievementData::kIdFieldNumber;
const int AchievementData::kStateFieldNumber;
const int AchievementData::kNumFieldNumber;
#endif  // !_MSC_VER

AchievementData::AchievementData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AchievementData::InitAsDefaultInstance() {
}

AchievementData::AchievementData(const AchievementData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementData::~AchievementData() {
  SharedDtor();
}

void AchievementData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AchievementData& AchievementData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

AchievementData* AchievementData::default_instance_ = NULL;

AchievementData* AchievementData::New() const {
  return new AchievementData;
}

void AchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .AchievementData.State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AchievementData_State_IsValid(value)) {
            set_state(static_cast< ::AchievementData_State >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .AchievementData.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

}

int AchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .AchievementData.State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AchievementData*>(&from));
}

void AchievementData::MergeFrom(const AchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
}

void AchievementData::CopyFrom(const AchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementData::IsInitialized() const {

  return true;
}

void AchievementData::Swap(AchievementData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AchievementData::GetTypeName() const {
  return "AchievementData";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityData::kIdFieldNumber;
const int ActivityData::kNumFieldNumber;
#endif  // !_MSC_VER

ActivityData::ActivityData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ActivityData::InitAsDefaultInstance() {
}

ActivityData::ActivityData(const ActivityData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityData::~ActivityData() {
  SharedDtor();
}

void ActivityData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityData& ActivityData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ActivityData* ActivityData::default_instance_ = NULL;

ActivityData* ActivityData::New() const {
  return new ActivityData;
}

void ActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

}

int ActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityData*>(&from));
}

void ActivityData::MergeFrom(const ActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
}

void ActivityData::CopyFrom(const ActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityData::IsInitialized() const {

  return true;
}

void ActivityData::Swap(ActivityData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityData::GetTypeName() const {
  return "ActivityData";
}


// ===================================================================

#ifndef _MSC_VER
const int SettingData::kHideHeadFieldNumber;
const int SettingData::kRefuseTeamupFieldNumber;
const int SettingData::kRefuseGuildteamupFieldNumber;
const int SettingData::kCloseEffectsoundFieldNumber;
const int SettingData::kCloseBgmusicFieldNumber;
const int SettingData::kDropitemToBagFieldNumber;
#endif  // !_MSC_VER

SettingData::SettingData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SettingData::InitAsDefaultInstance() {
}

SettingData::SettingData(const SettingData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SettingData::SharedCtor() {
  _cached_size_ = 0;
  hide_head_ = true;
  refuse_teamup_ = false;
  refuse_guildteamup_ = false;
  close_effectsound_ = false;
  close_bgmusic_ = false;
  dropitem_to_bag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingData::~SettingData() {
  SharedDtor();
}

void SettingData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SettingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SettingData& SettingData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

SettingData* SettingData::default_instance_ = NULL;

SettingData* SettingData::New() const {
  return new SettingData;
}

void SettingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hide_head_ = true;
    refuse_teamup_ = false;
    refuse_guildteamup_ = false;
    close_effectsound_ = false;
    close_bgmusic_ = false;
    dropitem_to_bag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SettingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hide_head = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_head_)));
          set_has_hide_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refuse_teamup;
        break;
      }

      // optional bool refuse_teamup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuse_teamup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refuse_teamup_)));
          set_has_refuse_teamup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refuse_guildteamup;
        break;
      }

      // optional bool refuse_guildteamup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refuse_guildteamup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refuse_guildteamup_)));
          set_has_refuse_guildteamup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_close_effectsound;
        break;
      }

      // optional bool close_effectsound = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_effectsound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_effectsound_)));
          set_has_close_effectsound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_close_bgmusic;
        break;
      }

      // optional bool close_bgmusic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_bgmusic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_bgmusic_)));
          set_has_close_bgmusic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropitem_to_bag;
        break;
      }

      // optional bool dropitem_to_bag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropitem_to_bag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropitem_to_bag_)));
          set_has_dropitem_to_bag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hide_head = 1 [default = true];
  if (has_hide_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hide_head(), output);
  }

  // optional bool refuse_teamup = 2;
  if (has_refuse_teamup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->refuse_teamup(), output);
  }

  // optional bool refuse_guildteamup = 3;
  if (has_refuse_guildteamup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->refuse_guildteamup(), output);
  }

  // optional bool close_effectsound = 4;
  if (has_close_effectsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->close_effectsound(), output);
  }

  // optional bool close_bgmusic = 5;
  if (has_close_bgmusic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->close_bgmusic(), output);
  }

  // optional bool dropitem_to_bag = 6;
  if (has_dropitem_to_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dropitem_to_bag(), output);
  }

}

int SettingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hide_head = 1 [default = true];
    if (has_hide_head()) {
      total_size += 1 + 1;
    }

    // optional bool refuse_teamup = 2;
    if (has_refuse_teamup()) {
      total_size += 1 + 1;
    }

    // optional bool refuse_guildteamup = 3;
    if (has_refuse_guildteamup()) {
      total_size += 1 + 1;
    }

    // optional bool close_effectsound = 4;
    if (has_close_effectsound()) {
      total_size += 1 + 1;
    }

    // optional bool close_bgmusic = 5;
    if (has_close_bgmusic()) {
      total_size += 1 + 1;
    }

    // optional bool dropitem_to_bag = 6;
    if (has_dropitem_to_bag()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SettingData*>(&from));
}

void SettingData::MergeFrom(const SettingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hide_head()) {
      set_hide_head(from.hide_head());
    }
    if (from.has_refuse_teamup()) {
      set_refuse_teamup(from.refuse_teamup());
    }
    if (from.has_refuse_guildteamup()) {
      set_refuse_guildteamup(from.refuse_guildteamup());
    }
    if (from.has_close_effectsound()) {
      set_close_effectsound(from.close_effectsound());
    }
    if (from.has_close_bgmusic()) {
      set_close_bgmusic(from.close_bgmusic());
    }
    if (from.has_dropitem_to_bag()) {
      set_dropitem_to_bag(from.dropitem_to_bag());
    }
  }
}

void SettingData::CopyFrom(const SettingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingData::IsInitialized() const {

  return true;
}

void SettingData::Swap(SettingData* other) {
  if (other != this) {
    std::swap(hide_head_, other->hide_head_);
    std::swap(refuse_teamup_, other->refuse_teamup_);
    std::swap(refuse_guildteamup_, other->refuse_guildteamup_);
    std::swap(close_effectsound_, other->close_effectsound_);
    std::swap(close_bgmusic_, other->close_bgmusic_);
    std::swap(dropitem_to_bag_, other->dropitem_to_bag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SettingData::GetTypeName() const {
  return "SettingData";
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewardsData::kIdFieldNumber;
const int OnlineRewardsData::kTimeFieldNumber;
const int OnlineRewardsData::kFlagFieldNumber;
#endif  // !_MSC_VER

OnlineRewardsData::OnlineRewardsData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OnlineRewardsData::InitAsDefaultInstance() {
}

OnlineRewardsData::OnlineRewardsData(const OnlineRewardsData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineRewardsData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewardsData::~OnlineRewardsData() {
  SharedDtor();
}

void OnlineRewardsData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlineRewardsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlineRewardsData& OnlineRewardsData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

OnlineRewardsData* OnlineRewardsData::default_instance_ = NULL;

OnlineRewardsData* OnlineRewardsData::New() const {
  return new OnlineRewardsData;
}

void OnlineRewardsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OnlineRewardsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineRewardsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }

}

int OnlineRewardsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewardsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlineRewardsData*>(&from));
}

void OnlineRewardsData::MergeFrom(const OnlineRewardsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void OnlineRewardsData::CopyFrom(const OnlineRewardsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewardsData::IsInitialized() const {

  return true;
}

void OnlineRewardsData::Swap(OnlineRewardsData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OnlineRewardsData::GetTypeName() const {
  return "OnlineRewardsData";
}


// ===================================================================

#ifndef _MSC_VER
const int CounterData::kMainTypeFieldNumber;
const int CounterData::kSubTypeFieldNumber;
const int CounterData::kTimestampFieldNumber;
const int CounterData::kValueFieldNumber;
#endif  // !_MSC_VER

CounterData::CounterData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CounterData::InitAsDefaultInstance() {
}

CounterData::CounterData(const CounterData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CounterData::SharedCtor() {
  _cached_size_ = 0;
  main_type_ = 0;
  sub_type_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterData::~CounterData() {
  SharedDtor();
}

void CounterData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CounterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CounterData& CounterData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

CounterData* CounterData::default_instance_ = NULL;

CounterData* CounterData::New() const {
  return new CounterData;
}

void CounterData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    main_type_ = 0;
    sub_type_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CounterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 main_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_type_)));
          set_has_main_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_type;
        break;
      }

      // optional int32 sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 main_type = 1;
  if (has_main_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->main_type(), output);
  }

  // optional int32 sub_type = 2;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_type(), output);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

}

int CounterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 main_type = 1;
    if (has_main_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_type());
    }

    // optional int32 sub_type = 2;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CounterData*>(&from));
}

void CounterData::MergeFrom(const CounterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_type()) {
      set_main_type(from.main_type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void CounterData::CopyFrom(const CounterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterData::IsInitialized() const {

  return true;
}

void CounterData::Swap(CounterData* other) {
  if (other != this) {
    std::swap(main_type_, other->main_type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CounterData::GetTypeName() const {
  return "CounterData";
}


// ===================================================================

#ifndef _MSC_VER
const int CharBinaryData::kChardataFieldNumber;
const int CharBinaryData::kEquipItemsFieldNumber;
const int CharBinaryData::kAvatarItemsFieldNumber;
const int CharBinaryData::kBagItemsFieldNumber;
const int CharBinaryData::kSafeItemsFieldNumber;
const int CharBinaryData::kJobSkillsFieldNumber;
const int CharBinaryData::kSkillsFieldNumber;
const int CharBinaryData::kShortcutKeysFieldNumber;
const int CharBinaryData::kSkillBuffsFieldNumber;
const int CharBinaryData::kMissionsFieldNumber;
const int CharBinaryData::kAchievementsFieldNumber;
const int CharBinaryData::kActivitysFieldNumber;
const int CharBinaryData::kSettingDataFieldNumber;
const int CharBinaryData::kOnlinerewardsDataFieldNumber;
const int CharBinaryData::kCounterDataFieldNumber;
#endif  // !_MSC_VER

CharBinaryData::CharBinaryData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CharBinaryData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chardata_ = const_cast< ::CharData*>(
      ::CharData::internal_default_instance());
#else
  chardata_ = const_cast< ::CharData*>(&::CharData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setting_data_ = const_cast< ::SettingData*>(
      ::SettingData::internal_default_instance());
#else
  setting_data_ = const_cast< ::SettingData*>(&::SettingData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onlinerewards_data_ = const_cast< ::OnlineRewardsData*>(
      ::OnlineRewardsData::internal_default_instance());
#else
  onlinerewards_data_ = const_cast< ::OnlineRewardsData*>(&::OnlineRewardsData::default_instance());
#endif
}

CharBinaryData::CharBinaryData(const CharBinaryData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CharBinaryData::SharedCtor() {
  _cached_size_ = 0;
  chardata_ = NULL;
  setting_data_ = NULL;
  onlinerewards_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharBinaryData::~CharBinaryData() {
  SharedDtor();
}

void CharBinaryData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete chardata_;
    delete setting_data_;
    delete onlinerewards_data_;
  }
}

void CharBinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CharBinaryData& CharBinaryData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

CharBinaryData* CharBinaryData::default_instance_ = NULL;

CharBinaryData* CharBinaryData::New() const {
  return new CharBinaryData;
}

void CharBinaryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chardata()) {
      if (chardata_ != NULL) chardata_->::CharData::Clear();
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (has_setting_data()) {
      if (setting_data_ != NULL) setting_data_->::SettingData::Clear();
    }
    if (has_onlinerewards_data()) {
      if (onlinerewards_data_ != NULL) onlinerewards_data_->::OnlineRewardsData::Clear();
    }
  }
  equip_items_.Clear();
  avatar_items_.Clear();
  bag_items_.Clear();
  safe_items_.Clear();
  job_skills_.Clear();
  skills_.Clear();
  shortcut_keys_.Clear();
  skill_buffs_.Clear();
  missions_.Clear();
  achievements_.Clear();
  activitys_.Clear();
  counter_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CharBinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharData chardata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chardata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_items;
        break;
      }

      // repeated .ItemData equip_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_items;
        if (input->ExpectTag(26)) goto parse_avatar_items;
        break;
      }

      // repeated .ItemData avatar_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar_items;
        if (input->ExpectTag(34)) goto parse_bag_items;
        break;
      }

      // repeated .ItemData bag_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bag_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bag_items;
        if (input->ExpectTag(42)) goto parse_safe_items;
        break;
      }

      // repeated .ItemData safe_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safe_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_safe_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_safe_items;
        if (input->ExpectTag(50)) goto parse_job_skills;
        break;
      }

      // repeated .JobSkillData job_skills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_job_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_job_skills;
        if (input->ExpectTag(58)) goto parse_skills;
        break;
      }

      // repeated .SkillData skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skills;
        if (input->ExpectTag(66)) goto parse_shortcut_keys;
        break;
      }

      // repeated .ShortcutKeyData shortcut_keys = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortcut_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortcut_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_shortcut_keys;
        if (input->ExpectTag(74)) goto parse_skill_buffs;
        break;
      }

      // repeated .SkillBuffData skill_buffs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_buffs;
        if (input->ExpectTag(82)) goto parse_missions;
        break;
      }

      // repeated .MissionData missions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_missions;
        if (input->ExpectTag(90)) goto parse_achievements;
        break;
      }

      // repeated .AchievementData achievements = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_achievements;
        if (input->ExpectTag(98)) goto parse_activitys;
        break;
      }

      // repeated .ActivityData activitys = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_activitys;
        if (input->ExpectTag(106)) goto parse_setting_data;
        break;
      }

      // optional .SettingData setting_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setting_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_onlinerewards_data;
        break;
      }

      // optional .OnlineRewardsData onlinerewards_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlinerewards_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinerewards_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_counter_data;
        break;
      }

      // repeated .CounterData counter_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counter_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_counter_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharBinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CharData chardata = 1;
  if (has_chardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chardata(), output);
  }

  // repeated .ItemData equip_items = 2;
  for (int i = 0; i < this->equip_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equip_items(i), output);
  }

  // repeated .ItemData avatar_items = 3;
  for (int i = 0; i < this->avatar_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->avatar_items(i), output);
  }

  // repeated .ItemData bag_items = 4;
  for (int i = 0; i < this->bag_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->bag_items(i), output);
  }

  // repeated .ItemData safe_items = 5;
  for (int i = 0; i < this->safe_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->safe_items(i), output);
  }

  // repeated .JobSkillData job_skills = 6;
  for (int i = 0; i < this->job_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->job_skills(i), output);
  }

  // repeated .SkillData skills = 7;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->skills(i), output);
  }

  // repeated .ShortcutKeyData shortcut_keys = 8;
  for (int i = 0; i < this->shortcut_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->shortcut_keys(i), output);
  }

  // repeated .SkillBuffData skill_buffs = 9;
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->skill_buffs(i), output);
  }

  // repeated .MissionData missions = 10;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->missions(i), output);
  }

  // repeated .AchievementData achievements = 11;
  for (int i = 0; i < this->achievements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->achievements(i), output);
  }

  // repeated .ActivityData activitys = 12;
  for (int i = 0; i < this->activitys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->activitys(i), output);
  }

  // optional .SettingData setting_data = 13;
  if (has_setting_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->setting_data(), output);
  }

  // optional .OnlineRewardsData onlinerewards_data = 14;
  if (has_onlinerewards_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->onlinerewards_data(), output);
  }

  // repeated .CounterData counter_data = 15;
  for (int i = 0; i < this->counter_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->counter_data(i), output);
  }

}

int CharBinaryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharData chardata = 1;
    if (has_chardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chardata());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .SettingData setting_data = 13;
    if (has_setting_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting_data());
    }

    // optional .OnlineRewardsData onlinerewards_data = 14;
    if (has_onlinerewards_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinerewards_data());
    }

  }
  // repeated .ItemData equip_items = 2;
  total_size += 1 * this->equip_items_size();
  for (int i = 0; i < this->equip_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_items(i));
  }

  // repeated .ItemData avatar_items = 3;
  total_size += 1 * this->avatar_items_size();
  for (int i = 0; i < this->avatar_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar_items(i));
  }

  // repeated .ItemData bag_items = 4;
  total_size += 1 * this->bag_items_size();
  for (int i = 0; i < this->bag_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bag_items(i));
  }

  // repeated .ItemData safe_items = 5;
  total_size += 1 * this->safe_items_size();
  for (int i = 0; i < this->safe_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->safe_items(i));
  }

  // repeated .JobSkillData job_skills = 6;
  total_size += 1 * this->job_skills_size();
  for (int i = 0; i < this->job_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->job_skills(i));
  }

  // repeated .SkillData skills = 7;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .ShortcutKeyData shortcut_keys = 8;
  total_size += 1 * this->shortcut_keys_size();
  for (int i = 0; i < this->shortcut_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shortcut_keys(i));
  }

  // repeated .SkillBuffData skill_buffs = 9;
  total_size += 1 * this->skill_buffs_size();
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_buffs(i));
  }

  // repeated .MissionData missions = 10;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  // repeated .AchievementData achievements = 11;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  // repeated .ActivityData activitys = 12;
  total_size += 1 * this->activitys_size();
  for (int i = 0; i < this->activitys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitys(i));
  }

  // repeated .CounterData counter_data = 15;
  total_size += 1 * this->counter_data_size();
  for (int i = 0; i < this->counter_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counter_data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharBinaryData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CharBinaryData*>(&from));
}

void CharBinaryData::MergeFrom(const CharBinaryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_items_.MergeFrom(from.equip_items_);
  avatar_items_.MergeFrom(from.avatar_items_);
  bag_items_.MergeFrom(from.bag_items_);
  safe_items_.MergeFrom(from.safe_items_);
  job_skills_.MergeFrom(from.job_skills_);
  skills_.MergeFrom(from.skills_);
  shortcut_keys_.MergeFrom(from.shortcut_keys_);
  skill_buffs_.MergeFrom(from.skill_buffs_);
  missions_.MergeFrom(from.missions_);
  achievements_.MergeFrom(from.achievements_);
  activitys_.MergeFrom(from.activitys_);
  counter_data_.MergeFrom(from.counter_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chardata()) {
      mutable_chardata()->::CharData::MergeFrom(from.chardata());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_setting_data()) {
      mutable_setting_data()->::SettingData::MergeFrom(from.setting_data());
    }
    if (from.has_onlinerewards_data()) {
      mutable_onlinerewards_data()->::OnlineRewardsData::MergeFrom(from.onlinerewards_data());
    }
  }
}

void CharBinaryData::CopyFrom(const CharBinaryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharBinaryData::IsInitialized() const {

  return true;
}

void CharBinaryData::Swap(CharBinaryData* other) {
  if (other != this) {
    std::swap(chardata_, other->chardata_);
    equip_items_.Swap(&other->equip_items_);
    avatar_items_.Swap(&other->avatar_items_);
    bag_items_.Swap(&other->bag_items_);
    safe_items_.Swap(&other->safe_items_);
    job_skills_.Swap(&other->job_skills_);
    skills_.Swap(&other->skills_);
    shortcut_keys_.Swap(&other->shortcut_keys_);
    skill_buffs_.Swap(&other->skill_buffs_);
    missions_.Swap(&other->missions_);
    achievements_.Swap(&other->achievements_);
    activitys_.Swap(&other->activitys_);
    std::swap(setting_data_, other->setting_data_);
    std::swap(onlinerewards_data_, other->onlinerewards_data_);
    counter_data_.Swap(&other->counter_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CharBinaryData::GetTypeName() const {
  return "CharBinaryData";
}


// ===================================================================

#ifndef _MSC_VER
const int MapCell::kFlagFieldNumber;
#endif  // !_MSC_VER

MapCell::MapCell()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapCell::InitAsDefaultInstance() {
}

MapCell::MapCell(const MapCell& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapCell::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapCell::~MapCell() {
  SharedDtor();
}

void MapCell::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapCell& MapCell::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

MapCell* MapCell::default_instance_ = NULL;

MapCell* MapCell::New() const {
  return new MapCell;
}

void MapCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MapCellFlag flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapCellFlag_IsValid(value)) {
            set_flag(static_cast< ::MapCellFlag >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MapCellFlag flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag(), output);
  }

}

int MapCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MapCellFlag flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapCell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapCell*>(&from));
}

void MapCell::MergeFrom(const MapCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void MapCell::CopyFrom(const MapCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCell::IsInitialized() const {

  return true;
}

void MapCell::Swap(MapCell* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapCell::GetTypeName() const {
  return "MapCell";
}


// ===================================================================

#ifndef _MSC_VER
const int TileMapData::kWidthFieldNumber;
const int TileMapData::kHeightFieldNumber;
const int TileMapData::kTilewidthFieldNumber;
const int TileMapData::kTileheightFieldNumber;
const int TileMapData::kCellListFieldNumber;
#endif  // !_MSC_VER

TileMapData::TileMapData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TileMapData::InitAsDefaultInstance() {
}

TileMapData::TileMapData(const TileMapData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TileMapData::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  tilewidth_ = 0;
  tileheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileMapData::~TileMapData() {
  SharedDtor();
}

void TileMapData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TileMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TileMapData& TileMapData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

TileMapData* TileMapData::default_instance_ = NULL;

TileMapData* TileMapData::New() const {
  return new TileMapData;
}

void TileMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    tilewidth_ = 0;
    tileheight_ = 0;
  }
  cell_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TileMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tilewidth;
        break;
      }

      // optional int32 tilewidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tilewidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilewidth_)));
          set_has_tilewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tileheight;
        break;
      }

      // optional int32 tileheight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileheight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileheight_)));
          set_has_tileheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_list;
        break;
      }

      // repeated .MapCell cell_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TileMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 tilewidth = 3;
  if (has_tilewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tilewidth(), output);
  }

  // optional int32 tileheight = 4;
  if (has_tileheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tileheight(), output);
  }

  // repeated .MapCell cell_list = 5;
  for (int i = 0; i < this->cell_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->cell_list(i), output);
  }

}

int TileMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 tilewidth = 3;
    if (has_tilewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tilewidth());
    }

    // optional int32 tileheight = 4;
    if (has_tileheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileheight());
    }

  }
  // repeated .MapCell cell_list = 5;
  total_size += 1 * this->cell_list_size();
  for (int i = 0; i < this->cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileMapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TileMapData*>(&from));
}

void TileMapData::MergeFrom(const TileMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_list_.MergeFrom(from.cell_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_tilewidth()) {
      set_tilewidth(from.tilewidth());
    }
    if (from.has_tileheight()) {
      set_tileheight(from.tileheight());
    }
  }
}

void TileMapData::CopyFrom(const TileMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileMapData::IsInitialized() const {

  return true;
}

void TileMapData::Swap(TileMapData* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(tilewidth_, other->tilewidth_);
    std::swap(tileheight_, other->tileheight_);
    cell_list_.Swap(&other->cell_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TileMapData::GetTypeName() const {
  return "TileMapData";
}


// ===================================================================

#ifndef _MSC_VER
const int MapCharInfo::kIdFieldNumber;
const int MapCharInfo::kNameFieldNumber;
const int MapCharInfo::kLevelFieldNumber;
const int MapCharInfo::kCountryFieldNumber;
const int MapCharInfo::kCurhpFieldNumber;
const int MapCharInfo::kMaxhpFieldNumber;
const int MapCharInfo::kCurmpFieldNumber;
const int MapCharInfo::kMaxmpFieldNumber;
const int MapCharInfo::kXFieldNumber;
const int MapCharInfo::kYFieldNumber;
const int MapCharInfo::kTxFieldNumber;
const int MapCharInfo::kTyFieldNumber;
const int MapCharInfo::kDirectionFieldNumber;
const int MapCharInfo::kRaceFieldNumber;
const int MapCharInfo::kMoveSpeedFieldNumber;
const int MapCharInfo::kStateFieldNumber;
const int MapCharInfo::kLooksFieldNumber;
const int MapCharInfo::kSkillBuffsFieldNumber;
#endif  // !_MSC_VER

MapCharInfo::MapCharInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapCharInfo::InitAsDefaultInstance() {
}

MapCharInfo::MapCharInfo(const MapCharInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapCharInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  country_ = 0;
  curhp_ = 0;
  maxhp_ = 0;
  curmp_ = 0;
  maxmp_ = 0;
  x_ = 0;
  y_ = 0;
  tx_ = 0;
  ty_ = 0;
  direction_ = 0;
  race_ = 0;
  move_speed_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapCharInfo::~MapCharInfo() {
  SharedDtor();
}

void MapCharInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapCharInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapCharInfo& MapCharInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

MapCharInfo* MapCharInfo::default_instance_ = NULL;

MapCharInfo* MapCharInfo::New() const {
  return new MapCharInfo;
}

void MapCharInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    country_ = 0;
    curhp_ = 0;
    maxhp_ = 0;
    curmp_ = 0;
    maxmp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    x_ = 0;
    y_ = 0;
    tx_ = 0;
    ty_ = 0;
    direction_ = 0;
    race_ = 0;
    move_speed_ = 0;
    state_ = 1;
  }
  looks_.Clear();
  skill_buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapCharInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country;
        break;
      }

      // optional int32 country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curhp;
        break;
      }

      // optional int32 curhp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curmp;
        break;
      }

      // optional int32 curmp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmp_)));
          set_has_curmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxmp;
        break;
      }

      // optional int32 maxmp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_x;
        break;
      }

      // optional int32 x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_y;
        break;
      }

      // optional int32 y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tx;
        break;
      }

      // optional int32 tx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ty;
        break;
      }

      // optional int32 ty = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ty_)));
          set_has_ty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_direction;
        break;
      }

      // optional int32 direction = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_race;
        break;
      }

      // optional int32 race = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_state;
        break;
      }

      // optional .ObjectState state = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ObjectState_IsValid(value)) {
            set_state(static_cast< ::ObjectState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_looks;
        break;
      }

      // repeated int32 looks = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_looks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_looks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_looks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_looks;
        if (input->ExpectTag(146)) goto parse_skill_buffs;
        break;
      }

      // repeated .SkillBuffData skill_buffs = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_skill_buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapCharInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->country(), output);
  }

  // optional int32 curhp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curhp(), output);
  }

  // optional int32 maxhp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxhp(), output);
  }

  // optional int32 curmp = 7;
  if (has_curmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->curmp(), output);
  }

  // optional int32 maxmp = 8;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxmp(), output);
  }

  // optional int32 x = 9;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->x(), output);
  }

  // optional int32 y = 10;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->y(), output);
  }

  // optional int32 tx = 11;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tx(), output);
  }

  // optional int32 ty = 12;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ty(), output);
  }

  // optional int32 direction = 13;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->direction(), output);
  }

  // optional int32 race = 14;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->race(), output);
  }

  // optional int32 move_speed = 15;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->move_speed(), output);
  }

  // optional .ObjectState state = 16;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->state(), output);
  }

  // repeated int32 looks = 17;
  for (int i = 0; i < this->looks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->looks(i), output);
  }

  // repeated .SkillBuffData skill_buffs = 18;
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->skill_buffs(i), output);
  }

}

int MapCharInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 curhp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 maxhp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 curmp = 7;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmp());
    }

    // optional int32 maxmp = 8;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 x = 9;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 10;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 tx = 11;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tx());
    }

    // optional int32 ty = 12;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ty());
    }

    // optional int32 direction = 13;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 race = 14;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 move_speed = 15;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional .ObjectState state = 16;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated int32 looks = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->looks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->looks(i));
    }
    total_size += 2 * this->looks_size() + data_size;
  }

  // repeated .SkillBuffData skill_buffs = 18;
  total_size += 2 * this->skill_buffs_size();
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_buffs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapCharInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapCharInfo*>(&from));
}

void MapCharInfo::MergeFrom(const MapCharInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  looks_.MergeFrom(from.looks_);
  skill_buffs_.MergeFrom(from.skill_buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curmp()) {
      set_curmp(from.curmp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void MapCharInfo::CopyFrom(const MapCharInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCharInfo::IsInitialized() const {

  return true;
}

void MapCharInfo::Swap(MapCharInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(country_, other->country_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curmp_, other->curmp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(tx_, other->tx_);
    std::swap(ty_, other->ty_);
    std::swap(direction_, other->direction_);
    std::swap(race_, other->race_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(state_, other->state_);
    looks_.Swap(&other->looks_);
    skill_buffs_.Swap(&other->skill_buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapCharInfo::GetTypeName() const {
  return "MapCharInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonsterInfo::kIdFieldNumber;
const int MapMonsterInfo::kCurhpFieldNumber;
const int MapMonsterInfo::kMaxhpFieldNumber;
const int MapMonsterInfo::kXFieldNumber;
const int MapMonsterInfo::kYFieldNumber;
const int MapMonsterInfo::kMonidFieldNumber;
const int MapMonsterInfo::kMoveSpeedFieldNumber;
const int MapMonsterInfo::kStateFieldNumber;
const int MapMonsterInfo::kSkillBuffsFieldNumber;
#endif  // !_MSC_VER

MapMonsterInfo::MapMonsterInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapMonsterInfo::InitAsDefaultInstance() {
}

MapMonsterInfo::MapMonsterInfo(const MapMonsterInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  curhp_ = 0;
  maxhp_ = 0;
  x_ = 0;
  y_ = 0;
  monid_ = 0;
  move_speed_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonsterInfo::~MapMonsterInfo() {
  SharedDtor();
}

void MapMonsterInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapMonsterInfo& MapMonsterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

MapMonsterInfo* MapMonsterInfo::default_instance_ = NULL;

MapMonsterInfo* MapMonsterInfo::New() const {
  return new MapMonsterInfo;
}

void MapMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    curhp_ = 0;
    maxhp_ = 0;
    x_ = 0;
    y_ = 0;
    monid_ = 0;
    move_speed_ = 0;
    state_ = 1;
  }
  skill_buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curhp;
        break;
      }

      // optional int32 curhp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional int32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monid;
        break;
      }

      // optional int32 monid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monid_)));
          set_has_monid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional .ObjectState state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ObjectState_IsValid(value)) {
            set_state(static_cast< ::ObjectState >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_buffs;
        break;
      }

      // repeated .SkillBuffData skill_buffs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_buffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_buffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 curhp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curhp(), output);
  }

  // optional int32 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxhp(), output);
  }

  // optional int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }

  // optional int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }

  // optional int32 monid = 6;
  if (has_monid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monid(), output);
  }

  // optional int32 move_speed = 7;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->move_speed(), output);
  }

  // optional .ObjectState state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  // repeated .SkillBuffData skill_buffs = 9;
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->skill_buffs(i), output);
  }

}

int MapMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 curhp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 monid = 6;
    if (has_monid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monid());
    }

    // optional int32 move_speed = 7;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional .ObjectState state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .SkillBuffData skill_buffs = 9;
  total_size += 1 * this->skill_buffs_size();
  for (int i = 0; i < this->skill_buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_buffs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonsterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapMonsterInfo*>(&from));
}

void MapMonsterInfo::MergeFrom(const MapMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_buffs_.MergeFrom(from.skill_buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_monid()) {
      set_monid(from.monid());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void MapMonsterInfo::CopyFrom(const MapMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonsterInfo::IsInitialized() const {

  return true;
}

void MapMonsterInfo::Swap(MapMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(monid_, other->monid_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(state_, other->state_);
    skill_buffs_.Swap(&other->skill_buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapMonsterInfo::GetTypeName() const {
  return "MapMonsterInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MapNpcInfo::kIdFieldNumber;
const int MapNpcInfo::kXFieldNumber;
const int MapNpcInfo::kYFieldNumber;
const int MapNpcInfo::kNpcidFieldNumber;
const int MapNpcInfo::kFuncFieldNumber;
#endif  // !_MSC_VER

MapNpcInfo::MapNpcInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapNpcInfo::InitAsDefaultInstance() {
}

MapNpcInfo::MapNpcInfo(const MapNpcInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapNpcInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  npcid_ = 0;
  func_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapNpcInfo::~MapNpcInfo() {
  SharedDtor();
}

void MapNpcInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapNpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapNpcInfo& MapNpcInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

MapNpcInfo* MapNpcInfo::default_instance_ = NULL;

MapNpcInfo* MapNpcInfo::New() const {
  return new MapNpcInfo;
}

void MapNpcInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    npcid_ = 0;
    func_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapNpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional int32 npcid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_func;
        break;
      }

      // optional int32 func = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_)));
          set_has_func();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapNpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npcid(), output);
  }

  // optional int32 func = 5;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->func(), output);
  }

}

int MapNpcInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

    // optional int32 func = 5;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->func());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapNpcInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapNpcInfo*>(&from));
}

void MapNpcInfo::MergeFrom(const MapNpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_func()) {
      set_func(from.func());
    }
  }
}

void MapNpcInfo::CopyFrom(const MapNpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapNpcInfo::IsInitialized() const {

  return true;
}

void MapNpcInfo::Swap(MapNpcInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(npcid_, other->npcid_);
    std::swap(func_, other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapNpcInfo::GetTypeName() const {
  return "MapNpcInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLoc::kPkgFieldNumber;
const int ItemLoc::kSlotFieldNumber;
#endif  // !_MSC_VER

ItemLoc::ItemLoc()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemLoc::InitAsDefaultInstance() {
}

ItemLoc::ItemLoc(const ItemLoc& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemLoc::SharedCtor() {
  _cached_size_ = 0;
  pkg_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLoc::~ItemLoc() {
  SharedDtor();
}

void ItemLoc::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemLoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemLoc& ItemLoc::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ItemLoc* ItemLoc::default_instance_ = NULL;

ItemLoc* ItemLoc::New() const {
  return new ItemLoc;
}

void ItemLoc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkg_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemLoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pkg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkg_)));
          set_has_pkg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemLoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pkg = 1;
  if (has_pkg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pkg(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

}

int ItemLoc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pkg = 1;
    if (has_pkg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkg());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLoc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemLoc*>(&from));
}

void ItemLoc::MergeFrom(const ItemLoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkg()) {
      set_pkg(from.pkg());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
}

void ItemLoc::CopyFrom(const ItemLoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLoc::IsInitialized() const {

  return true;
}

void ItemLoc::Swap(ItemLoc* other) {
  if (other != this) {
    std::swap(pkg_, other->pkg_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemLoc::GetTypeName() const {
  return "ItemLoc";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLocData::kLocFieldNumber;
const int ItemLocData::kItemFieldNumber;
#endif  // !_MSC_VER

ItemLocData::ItemLocData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemLocData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::ItemData*>(
      ::ItemData::internal_default_instance());
#else
  item_ = const_cast< ::ItemData*>(&::ItemData::default_instance());
#endif
}

ItemLocData::ItemLocData(const ItemLocData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemLocData::SharedCtor() {
  _cached_size_ = 0;
  loc_ = NULL;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLocData::~ItemLocData() {
  SharedDtor();
}

void ItemLocData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
    delete item_;
  }
}

void ItemLocData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemLocData& ItemLocData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ItemLocData* ItemLocData::default_instance_ = NULL;

ItemLocData* ItemLocData::New() const {
  return new ItemLocData;
}

void ItemLocData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loc()) {
      if (loc_ != NULL) loc_->::ItemLoc::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemLocData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .ItemData item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemLocData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc loc = 1;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->loc(), output);
  }

  // optional .ItemData item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(), output);
  }

}

int ItemLocData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc loc = 1;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc());
    }

    // optional .ItemData item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLocData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemLocData*>(&from));
}

void ItemLocData::MergeFrom(const ItemLocData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loc()) {
      mutable_loc()->::ItemLoc::MergeFrom(from.loc());
    }
    if (from.has_item()) {
      mutable_item()->::ItemData::MergeFrom(from.item());
    }
  }
}

void ItemLocData::CopyFrom(const ItemLocData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLocData::IsInitialized() const {

  return true;
}

void ItemLocData::Swap(ItemLocData* other) {
  if (other != this) {
    std::swap(loc_, other->loc_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemLocData::GetTypeName() const {
  return "ItemLocData";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLocNum::kLocFieldNumber;
const int ItemLocNum::kNumFieldNumber;
#endif  // !_MSC_VER

ItemLocNum::ItemLocNum()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemLocNum::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loc_ = const_cast< ::ItemLoc*>(
      ::ItemLoc::internal_default_instance());
#else
  loc_ = const_cast< ::ItemLoc*>(&::ItemLoc::default_instance());
#endif
}

ItemLocNum::ItemLocNum(const ItemLocNum& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemLocNum::SharedCtor() {
  _cached_size_ = 0;
  loc_ = NULL;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLocNum::~ItemLocNum() {
  SharedDtor();
}

void ItemLocNum::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete loc_;
  }
}

void ItemLocNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemLocNum& ItemLocNum::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoGameData_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGameData_2eproto();
#endif
  return *default_instance_;
}

ItemLocNum* ItemLocNum::default_instance_ = NULL;

ItemLocNum* ItemLocNum::New() const {
  return new ItemLocNum;
}

void ItemLocNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loc()) {
      if (loc_ != NULL) loc_->::ItemLoc::Clear();
    }
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemLocNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemLoc loc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemLocNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemLoc loc = 1;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->loc(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

}

int ItemLocNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemLoc loc = 1;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLocNum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemLocNum*>(&from));
}

void ItemLocNum::MergeFrom(const ItemLocNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loc()) {
      mutable_loc()->::ItemLoc::MergeFrom(from.loc());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
}

void ItemLocNum::CopyFrom(const ItemLocNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLocNum::IsInitialized() const {

  return true;
}

void ItemLocNum::Swap(ItemLocNum* other) {
  if (other != this) {
    std::swap(loc_, other->loc_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemLocNum::GetTypeName() const {
  return "ItemLocNum";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
