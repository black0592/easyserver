// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoFight_2eproto() {
  delete AttackInfo::default_instance_;
  delete TargetInfo::default_instance_;
  delete MsgCharAttackMonster::default_instance_;
  delete MsgCharAttackChar::default_instance_;
  delete NotifyMonsterAttackChar::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoFight_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoFight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  AttackInfo::default_instance_ = new AttackInfo();
  TargetInfo::default_instance_ = new TargetInfo();
  MsgCharAttackMonster::default_instance_ = new MsgCharAttackMonster();
  MsgCharAttackChar::default_instance_ = new MsgCharAttackChar();
  NotifyMonsterAttackChar::default_instance_ = new NotifyMonsterAttackChar();
  AttackInfo::default_instance_->InitAsDefaultInstance();
  TargetInfo::default_instance_->InitAsDefaultInstance();
  MsgCharAttackMonster::default_instance_->InitAsDefaultInstance();
  MsgCharAttackChar::default_instance_->InitAsDefaultInstance();
  NotifyMonsterAttackChar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFight_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoFight_2eproto_once_);
void protobuf_AddDesc_ProtoFight_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoFight_2eproto_once_,
                 &protobuf_AddDesc_ProtoFight_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFight_2eproto {
  StaticDescriptorInitializer_ProtoFight_2eproto() {
    protobuf_AddDesc_ProtoFight_2eproto();
  }
} static_descriptor_initializer_ProtoFight_2eproto_;
#endif
bool FightOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AttackInfo::kIdFieldNumber;
const int AttackInfo::kXFieldNumber;
const int AttackInfo::kYFieldNumber;
const int AttackInfo::kSkillIdFieldNumber;
const int AttackInfo::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

AttackInfo::AttackInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AttackInfo::InitAsDefaultInstance() {
}

AttackInfo::AttackInfo(const AttackInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AttackInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackInfo::~AttackInfo() {
  SharedDtor();
}

void AttackInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttackInfo& AttackInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFight_2eproto();
#endif
  return *default_instance_;
}

AttackInfo* AttackInfo::default_instance_ = NULL;

AttackInfo* AttackInfo::New() const {
  return new AttackInfo;
}

void AttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_level;
        break;
      }

      // optional int32 skill_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }

  // optional int32 skill_level = 5;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_level(), output);
  }

}

int AttackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 5;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttackInfo*>(&from));
}

void AttackInfo::MergeFrom(const AttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
}

void AttackInfo::CopyFrom(const AttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackInfo::IsInitialized() const {

  return true;
}

void AttackInfo::Swap(AttackInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttackInfo::GetTypeName() const {
  return "Protocol.AttackInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TargetInfo::kIdFieldNumber;
const int TargetInfo::kDamageFieldNumber;
const int TargetInfo::kMisssFieldNumber;
const int TargetInfo::kCriticalFieldNumber;
const int TargetInfo::kCurhpFieldNumber;
const int TargetInfo::kMaxhpFieldNumber;
const int TargetInfo::kCurmpFieldNumber;
const int TargetInfo::kMaxmpFieldNumber;
#endif  // !_MSC_VER

TargetInfo::TargetInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TargetInfo::InitAsDefaultInstance() {
}

TargetInfo::TargetInfo(const TargetInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TargetInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  damage_ = 0;
  misss_ = false;
  critical_ = false;
  curhp_ = 0;
  maxhp_ = 0;
  curmp_ = 0;
  maxmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetInfo::~TargetInfo() {
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TargetInfo& TargetInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFight_2eproto();
#endif
  return *default_instance_;
}

TargetInfo* TargetInfo::default_instance_ = NULL;

TargetInfo* TargetInfo::New() const {
  return new TargetInfo;
}

void TargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    damage_ = 0;
    misss_ = false;
    critical_ = false;
    curhp_ = 0;
    maxhp_ = 0;
    curmp_ = 0;
    maxmp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_misss;
        break;
      }

      // optional bool misss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_misss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &misss_)));
          set_has_misss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_critical;
        break;
      }

      // optional bool critical = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curhp;
        break;
      }

      // optional int32 curhp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curmp;
        break;
      }

      // optional int32 curmp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmp_)));
          set_has_curmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxmp;
        break;
      }

      // optional int32 maxmp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // optional bool misss = 3;
  if (has_misss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->misss(), output);
  }

  // optional bool critical = 4;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->critical(), output);
  }

  // optional int32 curhp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curhp(), output);
  }

  // optional int32 maxhp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxhp(), output);
  }

  // optional int32 curmp = 7;
  if (has_curmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->curmp(), output);
  }

  // optional int32 maxmp = 8;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxmp(), output);
  }

}

int TargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional bool misss = 3;
    if (has_misss()) {
      total_size += 1 + 1;
    }

    // optional bool critical = 4;
    if (has_critical()) {
      total_size += 1 + 1;
    }

    // optional int32 curhp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 maxhp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 curmp = 7;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmp());
    }

    // optional int32 maxmp = 8;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TargetInfo*>(&from));
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_misss()) {
      set_misss(from.misss());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curmp()) {
      set_curmp(from.curmp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
  }
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {

  return true;
}

void TargetInfo::Swap(TargetInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(damage_, other->damage_);
    std::swap(misss_, other->misss_);
    std::swap(critical_, other->critical_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curmp_, other->curmp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TargetInfo::GetTypeName() const {
  return "Protocol.TargetInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCharAttackMonster::kAttackInfoFieldNumber;
const int MsgCharAttackMonster::kTargetListFieldNumber;
#endif  // !_MSC_VER

MsgCharAttackMonster::MsgCharAttackMonster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgCharAttackMonster::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(
      ::Protocol::AttackInfo::internal_default_instance());
#else
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(&::Protocol::AttackInfo::default_instance());
#endif
}

MsgCharAttackMonster::MsgCharAttackMonster(const MsgCharAttackMonster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCharAttackMonster::SharedCtor() {
  _cached_size_ = 0;
  attack_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCharAttackMonster::~MsgCharAttackMonster() {
  SharedDtor();
}

void MsgCharAttackMonster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attack_info_;
  }
}

void MsgCharAttackMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCharAttackMonster& MsgCharAttackMonster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFight_2eproto();
#endif
  return *default_instance_;
}

MsgCharAttackMonster* MsgCharAttackMonster::default_instance_ = NULL;

MsgCharAttackMonster* MsgCharAttackMonster::New() const {
  return new MsgCharAttackMonster;
}

void MsgCharAttackMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attack_info()) {
      if (attack_info_ != NULL) attack_info_->::Protocol::AttackInfo::Clear();
    }
  }
  target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgCharAttackMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.AttackInfo attack_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        break;
      }

      // repeated .Protocol.TargetInfo target_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCharAttackMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.AttackInfo attack_info = 1;
  if (has_attack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->attack_info(), output);
  }

  // repeated .Protocol.TargetInfo target_list = 2;
  for (int i = 0; i < this->target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->target_list(i), output);
  }

}

int MsgCharAttackMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.AttackInfo attack_info = 1;
    if (has_attack_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_info());
    }

  }
  // repeated .Protocol.TargetInfo target_list = 2;
  total_size += 1 * this->target_list_size();
  for (int i = 0; i < this->target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCharAttackMonster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCharAttackMonster*>(&from));
}

void MsgCharAttackMonster::MergeFrom(const MsgCharAttackMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_list_.MergeFrom(from.target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_info()) {
      mutable_attack_info()->::Protocol::AttackInfo::MergeFrom(from.attack_info());
    }
  }
}

void MsgCharAttackMonster::CopyFrom(const MsgCharAttackMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharAttackMonster::IsInitialized() const {

  return true;
}

void MsgCharAttackMonster::Swap(MsgCharAttackMonster* other) {
  if (other != this) {
    std::swap(attack_info_, other->attack_info_);
    target_list_.Swap(&other->target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgCharAttackMonster::GetTypeName() const {
  return "Protocol.MsgCharAttackMonster";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCharAttackChar::kAttackInfoFieldNumber;
const int MsgCharAttackChar::kTargetListFieldNumber;
#endif  // !_MSC_VER

MsgCharAttackChar::MsgCharAttackChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgCharAttackChar::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(
      ::Protocol::AttackInfo::internal_default_instance());
#else
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(&::Protocol::AttackInfo::default_instance());
#endif
}

MsgCharAttackChar::MsgCharAttackChar(const MsgCharAttackChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCharAttackChar::SharedCtor() {
  _cached_size_ = 0;
  attack_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCharAttackChar::~MsgCharAttackChar() {
  SharedDtor();
}

void MsgCharAttackChar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attack_info_;
  }
}

void MsgCharAttackChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCharAttackChar& MsgCharAttackChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFight_2eproto();
#endif
  return *default_instance_;
}

MsgCharAttackChar* MsgCharAttackChar::default_instance_ = NULL;

MsgCharAttackChar* MsgCharAttackChar::New() const {
  return new MsgCharAttackChar;
}

void MsgCharAttackChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attack_info()) {
      if (attack_info_ != NULL) attack_info_->::Protocol::AttackInfo::Clear();
    }
  }
  target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgCharAttackChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.AttackInfo attack_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        break;
      }

      // repeated .Protocol.TargetInfo target_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCharAttackChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.AttackInfo attack_info = 1;
  if (has_attack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->attack_info(), output);
  }

  // repeated .Protocol.TargetInfo target_list = 2;
  for (int i = 0; i < this->target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->target_list(i), output);
  }

}

int MsgCharAttackChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.AttackInfo attack_info = 1;
    if (has_attack_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_info());
    }

  }
  // repeated .Protocol.TargetInfo target_list = 2;
  total_size += 1 * this->target_list_size();
  for (int i = 0; i < this->target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCharAttackChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCharAttackChar*>(&from));
}

void MsgCharAttackChar::MergeFrom(const MsgCharAttackChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_list_.MergeFrom(from.target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_info()) {
      mutable_attack_info()->::Protocol::AttackInfo::MergeFrom(from.attack_info());
    }
  }
}

void MsgCharAttackChar::CopyFrom(const MsgCharAttackChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharAttackChar::IsInitialized() const {

  return true;
}

void MsgCharAttackChar::Swap(MsgCharAttackChar* other) {
  if (other != this) {
    std::swap(attack_info_, other->attack_info_);
    target_list_.Swap(&other->target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgCharAttackChar::GetTypeName() const {
  return "Protocol.MsgCharAttackChar";
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMonsterAttackChar::kAttackInfoFieldNumber;
const int NotifyMonsterAttackChar::kTargetListFieldNumber;
#endif  // !_MSC_VER

NotifyMonsterAttackChar::NotifyMonsterAttackChar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotifyMonsterAttackChar::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(
      ::Protocol::AttackInfo::internal_default_instance());
#else
  attack_info_ = const_cast< ::Protocol::AttackInfo*>(&::Protocol::AttackInfo::default_instance());
#endif
}

NotifyMonsterAttackChar::NotifyMonsterAttackChar(const NotifyMonsterAttackChar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMonsterAttackChar::SharedCtor() {
  _cached_size_ = 0;
  attack_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMonsterAttackChar::~NotifyMonsterAttackChar() {
  SharedDtor();
}

void NotifyMonsterAttackChar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attack_info_;
  }
}

void NotifyMonsterAttackChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotifyMonsterAttackChar& NotifyMonsterAttackChar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFight_2eproto();
#endif
  return *default_instance_;
}

NotifyMonsterAttackChar* NotifyMonsterAttackChar::default_instance_ = NULL;

NotifyMonsterAttackChar* NotifyMonsterAttackChar::New() const {
  return new NotifyMonsterAttackChar;
}

void NotifyMonsterAttackChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attack_info()) {
      if (attack_info_ != NULL) attack_info_->::Protocol::AttackInfo::Clear();
    }
  }
  target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotifyMonsterAttackChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.AttackInfo attack_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        break;
      }

      // repeated .Protocol.TargetInfo target_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMonsterAttackChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Protocol.AttackInfo attack_info = 1;
  if (has_attack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->attack_info(), output);
  }

  // repeated .Protocol.TargetInfo target_list = 2;
  for (int i = 0; i < this->target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->target_list(i), output);
  }

}

int NotifyMonsterAttackChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Protocol.AttackInfo attack_info = 1;
    if (has_attack_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_info());
    }

  }
  // repeated .Protocol.TargetInfo target_list = 2;
  total_size += 1 * this->target_list_size();
  for (int i = 0; i < this->target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMonsterAttackChar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotifyMonsterAttackChar*>(&from));
}

void NotifyMonsterAttackChar::MergeFrom(const NotifyMonsterAttackChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_list_.MergeFrom(from.target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_info()) {
      mutable_attack_info()->::Protocol::AttackInfo::MergeFrom(from.attack_info());
    }
  }
}

void NotifyMonsterAttackChar::CopyFrom(const NotifyMonsterAttackChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMonsterAttackChar::IsInitialized() const {

  return true;
}

void NotifyMonsterAttackChar::Swap(NotifyMonsterAttackChar* other) {
  if (other != this) {
    std::swap(attack_info_, other->attack_info_);
    target_list_.Swap(&other->target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotifyMonsterAttackChar::GetTypeName() const {
  return "Protocol.NotifyMonsterAttackChar";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
