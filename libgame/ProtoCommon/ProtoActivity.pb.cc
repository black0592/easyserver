// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

void protobuf_ShutdownFile_ProtoActivity_2eproto() {
  delete ActivityTimeInfo::default_instance_;
  delete RequestGetActivityList::default_instance_;
  delete ResponseGetActivityList::default_instance_;
  delete RequestTakeActivityAward::default_instance_;
  delete ResponseTakeActivityAward::default_instance_;
  delete RequestJoinActivity::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ProtoActivity_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ProtoActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_ProtoGameData_2eproto();
  ActivityTimeInfo::default_instance_ = new ActivityTimeInfo();
  RequestGetActivityList::default_instance_ = new RequestGetActivityList();
  ResponseGetActivityList::default_instance_ = new ResponseGetActivityList();
  RequestTakeActivityAward::default_instance_ = new RequestTakeActivityAward();
  ResponseTakeActivityAward::default_instance_ = new ResponseTakeActivityAward();
  RequestJoinActivity::default_instance_ = new RequestJoinActivity();
  ActivityTimeInfo::default_instance_->InitAsDefaultInstance();
  RequestGetActivityList::default_instance_->InitAsDefaultInstance();
  ResponseGetActivityList::default_instance_->InitAsDefaultInstance();
  RequestTakeActivityAward::default_instance_->InitAsDefaultInstance();
  ResponseTakeActivityAward::default_instance_->InitAsDefaultInstance();
  RequestJoinActivity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoActivity_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoActivity_2eproto_once_);
void protobuf_AddDesc_ProtoActivity_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoActivity_2eproto_once_,
                 &protobuf_AddDesc_ProtoActivity_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoActivity_2eproto {
  StaticDescriptorInitializer_ProtoActivity_2eproto() {
    protobuf_AddDesc_ProtoActivity_2eproto();
  }
} static_descriptor_initializer_ProtoActivity_2eproto_;
#endif
bool ActivityOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityTimeInfo::kIdFieldNumber;
const int ActivityTimeInfo::kBeginDayFieldNumber;
const int ActivityTimeInfo::kEndDayFieldNumber;
const int ActivityTimeInfo::kBeginTimeFieldNumber;
const int ActivityTimeInfo::kEndTimeFieldNumber;
const int ActivityTimeInfo::kOpenedWeeksFieldNumber;
const int ActivityTimeInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

ActivityTimeInfo::ActivityTimeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ActivityTimeInfo::InitAsDefaultInstance() {
}

ActivityTimeInfo::ActivityTimeInfo(const ActivityTimeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  begin_day_ = 0;
  end_day_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  opened_weeks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityTimeInfo::~ActivityTimeInfo() {
  SharedDtor();
}

void ActivityTimeInfo::SharedDtor() {
  if (opened_weeks_ != &::google::protobuf::internal::kEmptyString) {
    delete opened_weeks_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityTimeInfo& ActivityTimeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

ActivityTimeInfo* ActivityTimeInfo::default_instance_ = NULL;

ActivityTimeInfo* ActivityTimeInfo::New() const {
  return new ActivityTimeInfo;
}

void ActivityTimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    begin_day_ = 0;
    end_day_ = 0;
    begin_time_ = 0;
    end_time_ = 0;
    if (has_opened_weeks()) {
      if (opened_weeks_ != &::google::protobuf::internal::kEmptyString) {
        opened_weeks_->clear();
      }
    }
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ActivityTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_day;
        break;
      }

      // optional int32 begin_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_day_)));
          set_has_begin_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_day;
        break;
      }

      // optional int32 end_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_day_)));
          set_has_end_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_begin_time;
        break;
      }

      // optional double begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_end_time;
        break;
      }

      // optional double end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_opened_weeks;
        break;
      }

      // optional string opened_weeks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opened_weeks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opened_weeks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 begin_day = 2;
  if (has_begin_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_day(), output);
  }

  // optional int32 end_day = 3;
  if (has_end_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_day(), output);
  }

  // optional double begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->begin_time(), output);
  }

  // optional double end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->end_time(), output);
  }

  // optional string opened_weeks = 6;
  if (has_opened_weeks()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opened_weeks(), output);
  }

  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

}

int ActivityTimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 begin_day = 2;
    if (has_begin_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_day());
    }

    // optional int32 end_day = 3;
    if (has_end_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_day());
    }

    // optional double begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 + 8;
    }

    // optional double end_time = 5;
    if (has_end_time()) {
      total_size += 1 + 8;
    }

    // optional string opened_weeks = 6;
    if (has_opened_weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opened_weeks());
    }

    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityTimeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityTimeInfo*>(&from));
}

void ActivityTimeInfo::MergeFrom(const ActivityTimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begin_day()) {
      set_begin_day(from.begin_day());
    }
    if (from.has_end_day()) {
      set_end_day(from.end_day());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_opened_weeks()) {
      set_opened_weeks(from.opened_weeks());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
}

void ActivityTimeInfo::CopyFrom(const ActivityTimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityTimeInfo::IsInitialized() const {

  return true;
}

void ActivityTimeInfo::Swap(ActivityTimeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begin_day_, other->begin_day_);
    std::swap(end_day_, other->end_day_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(opened_weeks_, other->opened_weeks_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityTimeInfo::GetTypeName() const {
  return "Protocol.ActivityTimeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetActivityList::kReserveFieldNumber;
#endif  // !_MSC_VER

RequestGetActivityList::RequestGetActivityList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestGetActivityList::InitAsDefaultInstance() {
}

RequestGetActivityList::RequestGetActivityList(const RequestGetActivityList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetActivityList::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetActivityList::~RequestGetActivityList() {
  SharedDtor();
}

void RequestGetActivityList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestGetActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestGetActivityList& RequestGetActivityList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

RequestGetActivityList* RequestGetActivityList::default_instance_ = NULL;

RequestGetActivityList* RequestGetActivityList::New() const {
  return new RequestGetActivityList;
}

void RequestGetActivityList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestGetActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

}

int RequestGetActivityList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetActivityList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestGetActivityList*>(&from));
}

void RequestGetActivityList::MergeFrom(const RequestGetActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
}

void RequestGetActivityList::CopyFrom(const RequestGetActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetActivityList::IsInitialized() const {

  return true;
}

void RequestGetActivityList::Swap(RequestGetActivityList* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestGetActivityList::GetTypeName() const {
  return "Protocol.RequestGetActivityList";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetActivityList::kTimeinfosFieldNumber;
const int ResponseGetActivityList::kActivitysFieldNumber;
#endif  // !_MSC_VER

ResponseGetActivityList::ResponseGetActivityList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseGetActivityList::InitAsDefaultInstance() {
}

ResponseGetActivityList::ResponseGetActivityList(const ResponseGetActivityList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetActivityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetActivityList::~ResponseGetActivityList() {
  SharedDtor();
}

void ResponseGetActivityList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseGetActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseGetActivityList& ResponseGetActivityList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

ResponseGetActivityList* ResponseGetActivityList::default_instance_ = NULL;

ResponseGetActivityList* ResponseGetActivityList::New() const {
  return new ResponseGetActivityList;
}

void ResponseGetActivityList::Clear() {
  timeinfos_.Clear();
  activitys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseGetActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Protocol.ActivityTimeInfo timeinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_timeinfos;
        if (input->ExpectTag(18)) goto parse_activitys;
        break;
      }

      // repeated .ActivityData activitys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activitys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Protocol.ActivityTimeInfo timeinfos = 1;
  for (int i = 0; i < this->timeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->timeinfos(i), output);
  }

  // repeated .ActivityData activitys = 2;
  for (int i = 0; i < this->activitys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->activitys(i), output);
  }

}

int ResponseGetActivityList::ByteSize() const {
  int total_size = 0;

  // repeated .Protocol.ActivityTimeInfo timeinfos = 1;
  total_size += 1 * this->timeinfos_size();
  for (int i = 0; i < this->timeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timeinfos(i));
  }

  // repeated .ActivityData activitys = 2;
  total_size += 1 * this->activitys_size();
  for (int i = 0; i < this->activitys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetActivityList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseGetActivityList*>(&from));
}

void ResponseGetActivityList::MergeFrom(const ResponseGetActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  timeinfos_.MergeFrom(from.timeinfos_);
  activitys_.MergeFrom(from.activitys_);
}

void ResponseGetActivityList::CopyFrom(const ResponseGetActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetActivityList::IsInitialized() const {

  return true;
}

void ResponseGetActivityList::Swap(ResponseGetActivityList* other) {
  if (other != this) {
    timeinfos_.Swap(&other->timeinfos_);
    activitys_.Swap(&other->activitys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseGetActivityList::GetTypeName() const {
  return "Protocol.ResponseGetActivityList";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTakeActivityAward::kIdFieldNumber;
#endif  // !_MSC_VER

RequestTakeActivityAward::RequestTakeActivityAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestTakeActivityAward::InitAsDefaultInstance() {
}

RequestTakeActivityAward::RequestTakeActivityAward(const RequestTakeActivityAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTakeActivityAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTakeActivityAward::~RequestTakeActivityAward() {
  SharedDtor();
}

void RequestTakeActivityAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestTakeActivityAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestTakeActivityAward& RequestTakeActivityAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

RequestTakeActivityAward* RequestTakeActivityAward::default_instance_ = NULL;

RequestTakeActivityAward* RequestTakeActivityAward::New() const {
  return new RequestTakeActivityAward;
}

void RequestTakeActivityAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestTakeActivityAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTakeActivityAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

}

int RequestTakeActivityAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTakeActivityAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestTakeActivityAward*>(&from));
}

void RequestTakeActivityAward::MergeFrom(const RequestTakeActivityAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void RequestTakeActivityAward::CopyFrom(const RequestTakeActivityAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTakeActivityAward::IsInitialized() const {

  return true;
}

void RequestTakeActivityAward::Swap(RequestTakeActivityAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestTakeActivityAward::GetTypeName() const {
  return "Protocol.RequestTakeActivityAward";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTakeActivityAward::kActivityDataFieldNumber;
#endif  // !_MSC_VER

ResponseTakeActivityAward::ResponseTakeActivityAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseTakeActivityAward::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activity_data_ = const_cast< ::ActivityData*>(
      ::ActivityData::internal_default_instance());
#else
  activity_data_ = const_cast< ::ActivityData*>(&::ActivityData::default_instance());
#endif
}

ResponseTakeActivityAward::ResponseTakeActivityAward(const ResponseTakeActivityAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTakeActivityAward::SharedCtor() {
  _cached_size_ = 0;
  activity_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTakeActivityAward::~ResponseTakeActivityAward() {
  SharedDtor();
}

void ResponseTakeActivityAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete activity_data_;
  }
}

void ResponseTakeActivityAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseTakeActivityAward& ResponseTakeActivityAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

ResponseTakeActivityAward* ResponseTakeActivityAward::default_instance_ = NULL;

ResponseTakeActivityAward* ResponseTakeActivityAward::New() const {
  return new ResponseTakeActivityAward;
}

void ResponseTakeActivityAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activity_data()) {
      if (activity_data_ != NULL) activity_data_->::ActivityData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseTakeActivityAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ActivityData activity_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTakeActivityAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ActivityData activity_data = 1;
  if (has_activity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->activity_data(), output);
  }

}

int ResponseTakeActivityAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ActivityData activity_data = 1;
    if (has_activity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTakeActivityAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseTakeActivityAward*>(&from));
}

void ResponseTakeActivityAward::MergeFrom(const ResponseTakeActivityAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_data()) {
      mutable_activity_data()->::ActivityData::MergeFrom(from.activity_data());
    }
  }
}

void ResponseTakeActivityAward::CopyFrom(const ResponseTakeActivityAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTakeActivityAward::IsInitialized() const {

  return true;
}

void ResponseTakeActivityAward::Swap(ResponseTakeActivityAward* other) {
  if (other != this) {
    std::swap(activity_data_, other->activity_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseTakeActivityAward::GetTypeName() const {
  return "Protocol.ResponseTakeActivityAward";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestJoinActivity::kTypeFieldNumber;
const int RequestJoinActivity::kIdFieldNumber;
#endif  // !_MSC_VER

RequestJoinActivity::RequestJoinActivity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestJoinActivity::InitAsDefaultInstance() {
}

RequestJoinActivity::RequestJoinActivity(const RequestJoinActivity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestJoinActivity::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestJoinActivity::~RequestJoinActivity() {
  SharedDtor();
}

void RequestJoinActivity::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RequestJoinActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestJoinActivity& RequestJoinActivity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ProtoActivity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();
#endif
  return *default_instance_;
}

RequestJoinActivity* RequestJoinActivity::default_instance_ = NULL;

RequestJoinActivity* RequestJoinActivity::New() const {
  return new RequestJoinActivity;
}

void RequestJoinActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestJoinActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestJoinActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

}

int RequestJoinActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinActivity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestJoinActivity*>(&from));
}

void RequestJoinActivity::MergeFrom(const RequestJoinActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void RequestJoinActivity::CopyFrom(const RequestJoinActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinActivity::IsInitialized() const {

  return true;
}

void RequestJoinActivity::Swap(RequestJoinActivity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestJoinActivity::GetTypeName() const {
  return "Protocol.RequestJoinActivity";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
