// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrSuper.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoSvrSuper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SuperCmd {

namespace {

const ::google::protobuf::Descriptor* MsgRegisterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRegisterServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRefreshZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRefreshZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginSelectZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginSelectZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSuperSelectZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSuperSelectZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordCharToLoginDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordCharToLoginDB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrSuperOpCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoSvrSuper_2eproto() {
  protobuf_AddDesc_ProtoSvrSuper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoSvrSuper.proto");
  GOOGLE_CHECK(file != NULL);
  MsgRegisterServer_descriptor_ = file->message_type(0);
  static const int MsgRegisterServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, result_),
  };
  MsgRegisterServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRegisterServer_descriptor_,
      MsgRegisterServer::default_instance_,
      MsgRegisterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRegisterServer));
  MsgGetServerInfo_descriptor_ = file->message_type(1);
  static const int MsgGetServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, server_list_),
  };
  MsgGetServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetServerInfo_descriptor_,
      MsgGetServerInfo::default_instance_,
      MsgGetServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetServerInfo));
  NotifyRefreshZoneInfo_descriptor_ = file->message_type(2);
  static const int NotifyRefreshZoneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRefreshZoneInfo, server_list_),
  };
  NotifyRefreshZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRefreshZoneInfo_descriptor_,
      NotifyRefreshZoneInfo::default_instance_,
      NotifyRefreshZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRefreshZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRefreshZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRefreshZoneInfo));
  MsgLoginSelectZone_descriptor_ = file->message_type(3);
  static const int MsgLoginSelectZone_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, login_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, gateway_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, gateway_port_),
  };
  MsgLoginSelectZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginSelectZone_descriptor_,
      MsgLoginSelectZone::default_instance_,
      MsgLoginSelectZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginSelectZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginSelectZone));
  MsgSuperSelectZone_descriptor_ = file->message_type(4);
  static const int MsgSuperSelectZone_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, login_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, login_server_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, gateway_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, gateway_port_),
  };
  MsgSuperSelectZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSuperSelectZone_descriptor_,
      MsgSuperSelectZone::default_instance_,
      MsgSuperSelectZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSuperSelectZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSuperSelectZone));
  MsgRecordCharToLoginDB_descriptor_ = file->message_type(5);
  static const int MsgRecordCharToLoginDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, char_info_),
  };
  MsgRecordCharToLoginDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordCharToLoginDB_descriptor_,
      MsgRecordCharToLoginDB::default_instance_,
      MsgRecordCharToLoginDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordCharToLoginDB));
  SvrSuperOpCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoSvrSuper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRegisterServer_descriptor_, &MsgRegisterServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetServerInfo_descriptor_, &MsgGetServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRefreshZoneInfo_descriptor_, &NotifyRefreshZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginSelectZone_descriptor_, &MsgLoginSelectZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSuperSelectZone_descriptor_, &MsgSuperSelectZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordCharToLoginDB_descriptor_, &MsgRecordCharToLoginDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoSvrSuper_2eproto() {
  delete MsgRegisterServer::default_instance_;
  delete MsgRegisterServer_reflection_;
  delete MsgGetServerInfo::default_instance_;
  delete MsgGetServerInfo_reflection_;
  delete NotifyRefreshZoneInfo::default_instance_;
  delete NotifyRefreshZoneInfo_reflection_;
  delete MsgLoginSelectZone::default_instance_;
  delete MsgLoginSelectZone_reflection_;
  delete MsgSuperSelectZone::default_instance_;
  delete MsgSuperSelectZone_reflection_;
  delete MsgRecordCharToLoginDB::default_instance_;
  delete MsgRecordCharToLoginDB_reflection_;
}

void protobuf_AddDesc_ProtoSvrSuper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoSvrServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoSvrSuper.proto\022\010SuperCmd\032\030ProtoSv"
    "rServerData.proto\">\n\021MsgRegisterServer\022\031"
    "\n\004info\030\001 \001(\0132\013.ServerInfo\022\016\n\006result\030\002 \001("
    "\005\"c\n\020MsgGetServerInfo\022\014\n\004type\030\001 \001(\r\022\017\n\004f"
    "lag\030\002 \001(\r:\0011\022\016\n\006result\030\003 \001(\005\022 \n\013server_l"
    "ist\030\004 \003(\0132\013.ServerInfo\"9\n\025NotifyRefreshZ"
    "oneInfo\022 \n\013server_list\030\001 \003(\0132\013.ServerInf"
    "o\"\233\001\n\022MsgLoginSelectZone\022\017\n\007account\030\001 \001("
    "\t\022\021\n\tlogin_key\030\002 \001(\r\022\025\n\rclient_taskid\030\003 "
    "\001(\r\022\020\n\010uniqueid\030\004 \001(\004\022\016\n\006result\030\010 \001(\r\022\022\n"
    "\ngateway_ip\030\t \001(\r\022\024\n\014gateway_port\030\n \001(\r\""
    "\243\001\n\022MsgSuperSelectZone\022\017\n\007account\030\001 \001(\t\022"
    "\021\n\tlogin_key\030\002 \001(\r\022\025\n\rclient_taskid\030\003 \001("
    "\r\022\030\n\020login_server_uid\030\004 \001(\004\022\016\n\006result\030\010 "
    "\001(\r\022\022\n\ngateway_ip\030\t \001(\r\022\024\n\014gateway_port\030"
    "\n \001(\r\"=\n\026MsgRecordCharToLoginDB\022#\n\tchar_"
    "info\030\001 \001(\0132\020.SvrZoneCharInfo*\321\001\n\016SvrSupe"
    "rOpCode\022\034\n\030SUPER_OP_REGISTER_SERVER\020\001\022\034\n"
    "\030SUPER_OP_GET_SERVER_INFO\020\002\022\036\n\032SUPER_OP_"
    "REFRESH_ZONE_INFO\020\003\022\036\n\032SUPER_OP_LOGIN_SE"
    "LECT_ZONE\020\004\022\036\n\032SUPER_OP_SUPER_SELECT_ZON"
    "E\020\005\022#\n\037SUPER_OP_RECORD_CHAR_TO_LOGINDB\020\006", 880);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoSvrSuper.proto", &protobuf_RegisterTypes);
  MsgRegisterServer::default_instance_ = new MsgRegisterServer();
  MsgGetServerInfo::default_instance_ = new MsgGetServerInfo();
  NotifyRefreshZoneInfo::default_instance_ = new NotifyRefreshZoneInfo();
  MsgLoginSelectZone::default_instance_ = new MsgLoginSelectZone();
  MsgSuperSelectZone::default_instance_ = new MsgSuperSelectZone();
  MsgRecordCharToLoginDB::default_instance_ = new MsgRecordCharToLoginDB();
  MsgRegisterServer::default_instance_->InitAsDefaultInstance();
  MsgGetServerInfo::default_instance_->InitAsDefaultInstance();
  NotifyRefreshZoneInfo::default_instance_->InitAsDefaultInstance();
  MsgLoginSelectZone::default_instance_->InitAsDefaultInstance();
  MsgSuperSelectZone::default_instance_->InitAsDefaultInstance();
  MsgRecordCharToLoginDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoSvrSuper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoSvrSuper_2eproto {
  StaticDescriptorInitializer_ProtoSvrSuper_2eproto() {
    protobuf_AddDesc_ProtoSvrSuper_2eproto();
  }
} static_descriptor_initializer_ProtoSvrSuper_2eproto_;
const ::google::protobuf::EnumDescriptor* SvrSuperOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrSuperOpCode_descriptor_;
}
bool SvrSuperOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRegisterServer::kInfoFieldNumber;
const int MsgRegisterServer::kResultFieldNumber;
#endif  // !_MSC_VER

MsgRegisterServer::MsgRegisterServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgRegisterServer::InitAsDefaultInstance() {
  info_ = const_cast< ::ServerInfo*>(&::ServerInfo::default_instance());
}

MsgRegisterServer::MsgRegisterServer(const MsgRegisterServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRegisterServer::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRegisterServer::~MsgRegisterServer() {
  SharedDtor();
}

void MsgRegisterServer::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgRegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRegisterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRegisterServer_descriptor_;
}

const MsgRegisterServer& MsgRegisterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

MsgRegisterServer* MsgRegisterServer::default_instance_ = NULL;

MsgRegisterServer* MsgRegisterServer::New() const {
  return new MsgRegisterServer;
}

void MsgRegisterServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ServerInfo::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ServerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRegisterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ServerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRegisterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ServerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRegisterServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRegisterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRegisterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRegisterServer::MergeFrom(const MsgRegisterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ServerInfo::MergeFrom(from.info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRegisterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterServer::CopyFrom(const MsgRegisterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterServer::IsInitialized() const {

  return true;
}

void MsgRegisterServer::Swap(MsgRegisterServer* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRegisterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRegisterServer_descriptor_;
  metadata.reflection = MsgRegisterServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetServerInfo::kTypeFieldNumber;
const int MsgGetServerInfo::kFlagFieldNumber;
const int MsgGetServerInfo::kResultFieldNumber;
const int MsgGetServerInfo::kServerListFieldNumber;
#endif  // !_MSC_VER

MsgGetServerInfo::MsgGetServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGetServerInfo::InitAsDefaultInstance() {
}

MsgGetServerInfo::MsgGetServerInfo(const MsgGetServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetServerInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  flag_ = 1u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetServerInfo::~MsgGetServerInfo() {
  SharedDtor();
}

void MsgGetServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGetServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetServerInfo_descriptor_;
}

const MsgGetServerInfo& MsgGetServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

MsgGetServerInfo* MsgGetServerInfo::default_instance_ = NULL;

MsgGetServerInfo* MsgGetServerInfo::New() const {
  return new MsgGetServerInfo;
}

void MsgGetServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    flag_ = 1u;
    result_ = 0;
  }
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_list;
        break;
      }

      // repeated .ServerInfo server_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGetServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 flag = 2 [default = 1];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated .ServerInfo server_list = 4;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 flag = 2 [default = 1];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated .ServerInfo server_list = 4;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 flag = 2 [default = 1];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ServerInfo server_list = 4;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetServerInfo::MergeFrom(const MsgGetServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetServerInfo::CopyFrom(const MsgGetServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetServerInfo::IsInitialized() const {

  return true;
}

void MsgGetServerInfo::Swap(MsgGetServerInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(result_, other->result_);
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetServerInfo_descriptor_;
  metadata.reflection = MsgGetServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRefreshZoneInfo::kServerListFieldNumber;
#endif  // !_MSC_VER

NotifyRefreshZoneInfo::NotifyRefreshZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRefreshZoneInfo::InitAsDefaultInstance() {
}

NotifyRefreshZoneInfo::NotifyRefreshZoneInfo(const NotifyRefreshZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRefreshZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRefreshZoneInfo::~NotifyRefreshZoneInfo() {
  SharedDtor();
}

void NotifyRefreshZoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRefreshZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRefreshZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRefreshZoneInfo_descriptor_;
}

const NotifyRefreshZoneInfo& NotifyRefreshZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

NotifyRefreshZoneInfo* NotifyRefreshZoneInfo::default_instance_ = NULL;

NotifyRefreshZoneInfo* NotifyRefreshZoneInfo::New() const {
  return new NotifyRefreshZoneInfo;
}

void NotifyRefreshZoneInfo::Clear() {
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRefreshZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerInfo server_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRefreshZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerInfo server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRefreshZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerInfo server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRefreshZoneInfo::ByteSize() const {
  int total_size = 0;

  // repeated .ServerInfo server_list = 1;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRefreshZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRefreshZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRefreshZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRefreshZoneInfo::MergeFrom(const NotifyRefreshZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRefreshZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRefreshZoneInfo::CopyFrom(const NotifyRefreshZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRefreshZoneInfo::IsInitialized() const {

  return true;
}

void NotifyRefreshZoneInfo::Swap(NotifyRefreshZoneInfo* other) {
  if (other != this) {
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRefreshZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRefreshZoneInfo_descriptor_;
  metadata.reflection = NotifyRefreshZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginSelectZone::kAccountFieldNumber;
const int MsgLoginSelectZone::kLoginKeyFieldNumber;
const int MsgLoginSelectZone::kClientTaskidFieldNumber;
const int MsgLoginSelectZone::kUniqueidFieldNumber;
const int MsgLoginSelectZone::kResultFieldNumber;
const int MsgLoginSelectZone::kGatewayIpFieldNumber;
const int MsgLoginSelectZone::kGatewayPortFieldNumber;
#endif  // !_MSC_VER

MsgLoginSelectZone::MsgLoginSelectZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLoginSelectZone::InitAsDefaultInstance() {
}

MsgLoginSelectZone::MsgLoginSelectZone(const MsgLoginSelectZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginSelectZone::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = 0u;
  client_taskid_ = 0u;
  uniqueid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  gateway_ip_ = 0u;
  gateway_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginSelectZone::~MsgLoginSelectZone() {
  SharedDtor();
}

void MsgLoginSelectZone::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginSelectZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginSelectZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginSelectZone_descriptor_;
}

const MsgLoginSelectZone& MsgLoginSelectZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

MsgLoginSelectZone* MsgLoginSelectZone::default_instance_ = NULL;

MsgLoginSelectZone* MsgLoginSelectZone::New() const {
  return new MsgLoginSelectZone;
}

void MsgLoginSelectZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    login_key_ = 0u;
    client_taskid_ = 0u;
    uniqueid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    gateway_ip_ = 0u;
    gateway_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginSelectZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_key;
        break;
      }

      // optional uint32 login_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_key_)));
          set_has_login_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_taskid;
        break;
      }

      // optional uint32 client_taskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional uint64 uniqueid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional uint32 result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gateway_ip;
        break;
      }

      // optional uint32 gateway_ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_ip_)));
          set_has_gateway_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gateway_port;
        break;
      }

      // optional uint32 gateway_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_port_)));
          set_has_gateway_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginSelectZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_key(), output);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_taskid(), output);
  }

  // optional uint64 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uniqueid(), output);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result(), output);
  }

  // optional uint32 gateway_ip = 9;
  if (has_gateway_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gateway_ip(), output);
  }

  // optional uint32 gateway_port = 10;
  if (has_gateway_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gateway_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginSelectZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_key(), target);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_taskid(), target);
  }

  // optional uint64 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uniqueid(), target);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->result(), target);
  }

  // optional uint32 gateway_ip = 9;
  if (has_gateway_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gateway_ip(), target);
  }

  // optional uint32 gateway_port = 10;
  if (has_gateway_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gateway_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginSelectZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_key());
    }

    // optional uint32 client_taskid = 3;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_taskid());
    }

    // optional uint64 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

    // optional uint32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 gateway_ip = 9;
    if (has_gateway_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_ip());
    }

    // optional uint32 gateway_port = 10;
    if (has_gateway_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginSelectZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginSelectZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginSelectZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginSelectZone::MergeFrom(const MsgLoginSelectZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateway_ip()) {
      set_gateway_ip(from.gateway_ip());
    }
    if (from.has_gateway_port()) {
      set_gateway_port(from.gateway_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginSelectZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginSelectZone::CopyFrom(const MsgLoginSelectZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginSelectZone::IsInitialized() const {

  return true;
}

void MsgLoginSelectZone::Swap(MsgLoginSelectZone* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(login_key_, other->login_key_);
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(result_, other->result_);
    std::swap(gateway_ip_, other->gateway_ip_);
    std::swap(gateway_port_, other->gateway_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginSelectZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginSelectZone_descriptor_;
  metadata.reflection = MsgLoginSelectZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSuperSelectZone::kAccountFieldNumber;
const int MsgSuperSelectZone::kLoginKeyFieldNumber;
const int MsgSuperSelectZone::kClientTaskidFieldNumber;
const int MsgSuperSelectZone::kLoginServerUidFieldNumber;
const int MsgSuperSelectZone::kResultFieldNumber;
const int MsgSuperSelectZone::kGatewayIpFieldNumber;
const int MsgSuperSelectZone::kGatewayPortFieldNumber;
#endif  // !_MSC_VER

MsgSuperSelectZone::MsgSuperSelectZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSuperSelectZone::InitAsDefaultInstance() {
}

MsgSuperSelectZone::MsgSuperSelectZone(const MsgSuperSelectZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSuperSelectZone::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = 0u;
  client_taskid_ = 0u;
  login_server_uid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  gateway_ip_ = 0u;
  gateway_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSuperSelectZone::~MsgSuperSelectZone() {
  SharedDtor();
}

void MsgSuperSelectZone::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgSuperSelectZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSuperSelectZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSuperSelectZone_descriptor_;
}

const MsgSuperSelectZone& MsgSuperSelectZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

MsgSuperSelectZone* MsgSuperSelectZone::default_instance_ = NULL;

MsgSuperSelectZone* MsgSuperSelectZone::New() const {
  return new MsgSuperSelectZone;
}

void MsgSuperSelectZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    login_key_ = 0u;
    client_taskid_ = 0u;
    login_server_uid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    gateway_ip_ = 0u;
    gateway_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSuperSelectZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_key;
        break;
      }

      // optional uint32 login_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_key_)));
          set_has_login_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_taskid;
        break;
      }

      // optional uint32 client_taskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_server_uid;
        break;
      }

      // optional uint64 login_server_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_server_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_server_uid_)));
          set_has_login_server_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional uint32 result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gateway_ip;
        break;
      }

      // optional uint32 gateway_ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_ip_)));
          set_has_gateway_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gateway_port;
        break;
      }

      // optional uint32 gateway_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_port_)));
          set_has_gateway_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSuperSelectZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_key(), output);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_taskid(), output);
  }

  // optional uint64 login_server_uid = 4;
  if (has_login_server_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->login_server_uid(), output);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result(), output);
  }

  // optional uint32 gateway_ip = 9;
  if (has_gateway_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gateway_ip(), output);
  }

  // optional uint32 gateway_port = 10;
  if (has_gateway_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gateway_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSuperSelectZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_key(), target);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_taskid(), target);
  }

  // optional uint64 login_server_uid = 4;
  if (has_login_server_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->login_server_uid(), target);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->result(), target);
  }

  // optional uint32 gateway_ip = 9;
  if (has_gateway_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gateway_ip(), target);
  }

  // optional uint32 gateway_port = 10;
  if (has_gateway_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gateway_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSuperSelectZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_key());
    }

    // optional uint32 client_taskid = 3;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_taskid());
    }

    // optional uint64 login_server_uid = 4;
    if (has_login_server_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_server_uid());
    }

    // optional uint32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 gateway_ip = 9;
    if (has_gateway_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_ip());
    }

    // optional uint32 gateway_port = 10;
    if (has_gateway_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSuperSelectZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSuperSelectZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSuperSelectZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSuperSelectZone::MergeFrom(const MsgSuperSelectZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_login_server_uid()) {
      set_login_server_uid(from.login_server_uid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateway_ip()) {
      set_gateway_ip(from.gateway_ip());
    }
    if (from.has_gateway_port()) {
      set_gateway_port(from.gateway_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSuperSelectZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSuperSelectZone::CopyFrom(const MsgSuperSelectZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSuperSelectZone::IsInitialized() const {

  return true;
}

void MsgSuperSelectZone::Swap(MsgSuperSelectZone* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(login_key_, other->login_key_);
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(login_server_uid_, other->login_server_uid_);
    std::swap(result_, other->result_);
    std::swap(gateway_ip_, other->gateway_ip_);
    std::swap(gateway_port_, other->gateway_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSuperSelectZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSuperSelectZone_descriptor_;
  metadata.reflection = MsgSuperSelectZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordCharToLoginDB::kCharInfoFieldNumber;
#endif  // !_MSC_VER

MsgRecordCharToLoginDB::MsgRecordCharToLoginDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgRecordCharToLoginDB::InitAsDefaultInstance() {
  char_info_ = const_cast< ::SvrZoneCharInfo*>(&::SvrZoneCharInfo::default_instance());
}

MsgRecordCharToLoginDB::MsgRecordCharToLoginDB(const MsgRecordCharToLoginDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRecordCharToLoginDB::SharedCtor() {
  _cached_size_ = 0;
  char_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordCharToLoginDB::~MsgRecordCharToLoginDB() {
  SharedDtor();
}

void MsgRecordCharToLoginDB::SharedDtor() {
  if (this != default_instance_) {
    delete char_info_;
  }
}

void MsgRecordCharToLoginDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordCharToLoginDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordCharToLoginDB_descriptor_;
}

const MsgRecordCharToLoginDB& MsgRecordCharToLoginDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrSuper_2eproto();
  return *default_instance_;
}

MsgRecordCharToLoginDB* MsgRecordCharToLoginDB::default_instance_ = NULL;

MsgRecordCharToLoginDB* MsgRecordCharToLoginDB::New() const {
  return new MsgRecordCharToLoginDB;
}

void MsgRecordCharToLoginDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_char_info()) {
      if (char_info_ != NULL) char_info_->::SvrZoneCharInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordCharToLoginDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrZoneCharInfo char_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRecordCharToLoginDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrZoneCharInfo char_info = 1;
  if (has_char_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->char_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRecordCharToLoginDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrZoneCharInfo char_info = 1;
  if (has_char_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->char_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRecordCharToLoginDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrZoneCharInfo char_info = 1;
    if (has_char_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordCharToLoginDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordCharToLoginDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordCharToLoginDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordCharToLoginDB::MergeFrom(const MsgRecordCharToLoginDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_info()) {
      mutable_char_info()->::SvrZoneCharInfo::MergeFrom(from.char_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordCharToLoginDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordCharToLoginDB::CopyFrom(const MsgRecordCharToLoginDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordCharToLoginDB::IsInitialized() const {

  return true;
}

void MsgRecordCharToLoginDB::Swap(MsgRecordCharToLoginDB* other) {
  if (other != this) {
    std::swap(char_info_, other->char_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordCharToLoginDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordCharToLoginDB_descriptor_;
  metadata.reflection = MsgRecordCharToLoginDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SuperCmd

// @@protoc_insertion_point(global_scope)
