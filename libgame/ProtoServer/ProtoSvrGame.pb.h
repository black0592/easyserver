// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrGame.proto

#ifndef PROTOBUF_ProtoSvrGame_2eproto__INCLUDED
#define PROTOBUF_ProtoSvrGame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace GameCmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoSvrGame_2eproto();
void protobuf_AssignDesc_ProtoSvrGame_2eproto();
void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

class GatewayForwardCmd;
class GatewayEnterGame;
class GatewayUnregGameUser;
class GatewayKickGameUser;
class GatewayShutdownGame;
class GatewayServerPing;

enum SvrGateway2GameOpCode {
  SVR_OP_FORWARD_CMD = 1,
  SVR_OP_ENTER_GAME = 2,
  SVR_OP_UNREG_GAME_USER = 3,
  SVR_OP_KICK_GAME_USER = 4,
  SVR_OP_SHUTDOWN_GAME = 5,
  SVR_OP_GATEWAY_PING_GAME = 100
};
bool SvrGateway2GameOpCode_IsValid(int value);
const SvrGateway2GameOpCode SvrGateway2GameOpCode_MIN = SVR_OP_FORWARD_CMD;
const SvrGateway2GameOpCode SvrGateway2GameOpCode_MAX = SVR_OP_GATEWAY_PING_GAME;
const int SvrGateway2GameOpCode_ARRAYSIZE = SvrGateway2GameOpCode_MAX + 1;

// ===================================================================

class GatewayForwardCmd : public ::google::protobuf::MessageLite {
 public:
  GatewayForwardCmd();
  virtual ~GatewayForwardCmd();

  GatewayForwardCmd(const GatewayForwardCmd& from);

  inline GatewayForwardCmd& operator=(const GatewayForwardCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayForwardCmd& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayForwardCmd* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayForwardCmd* other);

  // implements Message ----------------------------------------------

  GatewayForwardCmd* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayForwardCmd& from);
  void MergeFrom(const GatewayForwardCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_taskid = 1;
  inline bool has_client_taskid() const;
  inline void clear_client_taskid();
  static const int kClientTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 client_taskid() const;
  inline void set_client_taskid(::google::protobuf::int32 value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional bytes forward_cmd = 3;
  inline bool has_forward_cmd() const;
  inline void clear_forward_cmd();
  static const int kForwardCmdFieldNumber = 3;
  inline const ::std::string& forward_cmd() const;
  inline void set_forward_cmd(const ::std::string& value);
  inline void set_forward_cmd(const char* value);
  inline void set_forward_cmd(const void* value, size_t size);
  inline ::std::string* mutable_forward_cmd();
  inline ::std::string* release_forward_cmd();
  inline void set_allocated_forward_cmd(::std::string* forward_cmd);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayForwardCmd)
 private:
  inline void set_has_client_taskid();
  inline void clear_has_client_taskid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_forward_cmd();
  inline void clear_has_forward_cmd();

  ::google::protobuf::int32 client_taskid_;
  ::google::protobuf::int32 charid_;
  ::std::string* forward_cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayForwardCmd* default_instance_;
};
// -------------------------------------------------------------------

class GatewayEnterGame : public ::google::protobuf::MessageLite {
 public:
  GatewayEnterGame();
  virtual ~GatewayEnterGame();

  GatewayEnterGame(const GatewayEnterGame& from);

  inline GatewayEnterGame& operator=(const GatewayEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayEnterGame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayEnterGame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayEnterGame* other);

  // implements Message ----------------------------------------------

  GatewayEnterGame* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayEnterGame& from);
  void MergeFrom(const GatewayEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_taskid = 1;
  inline bool has_client_taskid() const;
  inline void clear_client_taskid();
  static const int kClientTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 client_taskid() const;
  inline void set_client_taskid(::google::protobuf::int32 value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayEnterGame)
 private:
  inline void set_has_client_taskid();
  inline void clear_has_client_taskid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::int32 client_taskid_;
  ::google::protobuf::int32 charid_;
  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class GatewayUnregGameUser : public ::google::protobuf::MessageLite {
 public:
  GatewayUnregGameUser();
  virtual ~GatewayUnregGameUser();

  GatewayUnregGameUser(const GatewayUnregGameUser& from);

  inline GatewayUnregGameUser& operator=(const GatewayUnregGameUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayUnregGameUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayUnregGameUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayUnregGameUser* other);

  // implements Message ----------------------------------------------

  GatewayUnregGameUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayUnregGameUser& from);
  void MergeFrom(const GatewayUnregGameUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_taskid = 1;
  inline bool has_client_taskid() const;
  inline void clear_client_taskid();
  static const int kClientTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 client_taskid() const;
  inline void set_client_taskid(::google::protobuf::int32 value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayUnregGameUser)
 private:
  inline void set_has_client_taskid();
  inline void clear_has_client_taskid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 client_taskid_;
  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayUnregGameUser* default_instance_;
};
// -------------------------------------------------------------------

class GatewayKickGameUser : public ::google::protobuf::MessageLite {
 public:
  GatewayKickGameUser();
  virtual ~GatewayKickGameUser();

  GatewayKickGameUser(const GatewayKickGameUser& from);

  inline GatewayKickGameUser& operator=(const GatewayKickGameUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayKickGameUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayKickGameUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayKickGameUser* other);

  // implements Message ----------------------------------------------

  GatewayKickGameUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayKickGameUser& from);
  void MergeFrom(const GatewayKickGameUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_taskid = 1;
  inline bool has_client_taskid() const;
  inline void clear_client_taskid();
  static const int kClientTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 client_taskid() const;
  inline void set_client_taskid(::google::protobuf::int32 value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayKickGameUser)
 private:
  inline void set_has_client_taskid();
  inline void clear_has_client_taskid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 client_taskid_;
  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayKickGameUser* default_instance_;
};
// -------------------------------------------------------------------

class GatewayShutdownGame : public ::google::protobuf::MessageLite {
 public:
  GatewayShutdownGame();
  virtual ~GatewayShutdownGame();

  GatewayShutdownGame(const GatewayShutdownGame& from);

  inline GatewayShutdownGame& operator=(const GatewayShutdownGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayShutdownGame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayShutdownGame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayShutdownGame* other);

  // implements Message ----------------------------------------------

  GatewayShutdownGame* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayShutdownGame& from);
  void MergeFrom(const GatewayShutdownGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_taskid = 1;
  inline bool has_client_taskid() const;
  inline void clear_client_taskid();
  static const int kClientTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 client_taskid() const;
  inline void set_client_taskid(::google::protobuf::int32 value);

  // optional int32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int32 charid() const;
  inline void set_charid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayShutdownGame)
 private:
  inline void set_has_client_taskid();
  inline void clear_has_client_taskid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::int32 client_taskid_;
  ::google::protobuf::int32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayShutdownGame* default_instance_;
};
// -------------------------------------------------------------------

class GatewayServerPing : public ::google::protobuf::MessageLite {
 public:
  GatewayServerPing();
  virtual ~GatewayServerPing();

  GatewayServerPing(const GatewayServerPing& from);

  inline GatewayServerPing& operator=(const GatewayServerPing& from) {
    CopyFrom(from);
    return *this;
  }

  static const GatewayServerPing& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GatewayServerPing* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GatewayServerPing* other);

  // implements Message ----------------------------------------------

  GatewayServerPing* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GatewayServerPing& from);
  void MergeFrom(const GatewayServerPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameCmd.GatewayServerPing)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGame_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGame_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGame_2eproto();

  void InitAsDefaultInstance();
  static GatewayServerPing* default_instance_;
};
// ===================================================================


// ===================================================================

// GatewayForwardCmd

// optional int32 client_taskid = 1;
inline bool GatewayForwardCmd::has_client_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayForwardCmd::set_has_client_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayForwardCmd::clear_has_client_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayForwardCmd::clear_client_taskid() {
  client_taskid_ = 0;
  clear_has_client_taskid();
}
inline ::google::protobuf::int32 GatewayForwardCmd::client_taskid() const {
  return client_taskid_;
}
inline void GatewayForwardCmd::set_client_taskid(::google::protobuf::int32 value) {
  set_has_client_taskid();
  client_taskid_ = value;
}

// optional int32 charid = 2;
inline bool GatewayForwardCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayForwardCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayForwardCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayForwardCmd::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 GatewayForwardCmd::charid() const {
  return charid_;
}
inline void GatewayForwardCmd::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bytes forward_cmd = 3;
inline bool GatewayForwardCmd::has_forward_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatewayForwardCmd::set_has_forward_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GatewayForwardCmd::clear_has_forward_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GatewayForwardCmd::clear_forward_cmd() {
  if (forward_cmd_ != &::google::protobuf::internal::kEmptyString) {
    forward_cmd_->clear();
  }
  clear_has_forward_cmd();
}
inline const ::std::string& GatewayForwardCmd::forward_cmd() const {
  return *forward_cmd_;
}
inline void GatewayForwardCmd::set_forward_cmd(const ::std::string& value) {
  set_has_forward_cmd();
  if (forward_cmd_ == &::google::protobuf::internal::kEmptyString) {
    forward_cmd_ = new ::std::string;
  }
  forward_cmd_->assign(value);
}
inline void GatewayForwardCmd::set_forward_cmd(const char* value) {
  set_has_forward_cmd();
  if (forward_cmd_ == &::google::protobuf::internal::kEmptyString) {
    forward_cmd_ = new ::std::string;
  }
  forward_cmd_->assign(value);
}
inline void GatewayForwardCmd::set_forward_cmd(const void* value, size_t size) {
  set_has_forward_cmd();
  if (forward_cmd_ == &::google::protobuf::internal::kEmptyString) {
    forward_cmd_ = new ::std::string;
  }
  forward_cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatewayForwardCmd::mutable_forward_cmd() {
  set_has_forward_cmd();
  if (forward_cmd_ == &::google::protobuf::internal::kEmptyString) {
    forward_cmd_ = new ::std::string;
  }
  return forward_cmd_;
}
inline ::std::string* GatewayForwardCmd::release_forward_cmd() {
  clear_has_forward_cmd();
  if (forward_cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = forward_cmd_;
    forward_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GatewayForwardCmd::set_allocated_forward_cmd(::std::string* forward_cmd) {
  if (forward_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_cmd_;
  }
  if (forward_cmd) {
    set_has_forward_cmd();
    forward_cmd_ = forward_cmd;
  } else {
    clear_has_forward_cmd();
    forward_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GatewayEnterGame

// optional int32 client_taskid = 1;
inline bool GatewayEnterGame::has_client_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayEnterGame::set_has_client_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayEnterGame::clear_has_client_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayEnterGame::clear_client_taskid() {
  client_taskid_ = 0;
  clear_has_client_taskid();
}
inline ::google::protobuf::int32 GatewayEnterGame::client_taskid() const {
  return client_taskid_;
}
inline void GatewayEnterGame::set_client_taskid(::google::protobuf::int32 value) {
  set_has_client_taskid();
  client_taskid_ = value;
}

// optional int32 charid = 2;
inline bool GatewayEnterGame::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayEnterGame::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayEnterGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayEnterGame::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 GatewayEnterGame::charid() const {
  return charid_;
}
inline void GatewayEnterGame::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 3;
inline bool GatewayEnterGame::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatewayEnterGame::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GatewayEnterGame::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GatewayEnterGame::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& GatewayEnterGame::account() const {
  return *account_;
}
inline void GatewayEnterGame::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void GatewayEnterGame::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void GatewayEnterGame::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatewayEnterGame::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* GatewayEnterGame::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GatewayEnterGame::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GatewayUnregGameUser

// optional int32 client_taskid = 1;
inline bool GatewayUnregGameUser::has_client_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayUnregGameUser::set_has_client_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayUnregGameUser::clear_has_client_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayUnregGameUser::clear_client_taskid() {
  client_taskid_ = 0;
  clear_has_client_taskid();
}
inline ::google::protobuf::int32 GatewayUnregGameUser::client_taskid() const {
  return client_taskid_;
}
inline void GatewayUnregGameUser::set_client_taskid(::google::protobuf::int32 value) {
  set_has_client_taskid();
  client_taskid_ = value;
}

// optional int32 charid = 2;
inline bool GatewayUnregGameUser::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayUnregGameUser::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayUnregGameUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayUnregGameUser::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 GatewayUnregGameUser::charid() const {
  return charid_;
}
inline void GatewayUnregGameUser::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// GatewayKickGameUser

// optional int32 client_taskid = 1;
inline bool GatewayKickGameUser::has_client_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayKickGameUser::set_has_client_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayKickGameUser::clear_has_client_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayKickGameUser::clear_client_taskid() {
  client_taskid_ = 0;
  clear_has_client_taskid();
}
inline ::google::protobuf::int32 GatewayKickGameUser::client_taskid() const {
  return client_taskid_;
}
inline void GatewayKickGameUser::set_client_taskid(::google::protobuf::int32 value) {
  set_has_client_taskid();
  client_taskid_ = value;
}

// optional int32 charid = 2;
inline bool GatewayKickGameUser::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayKickGameUser::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayKickGameUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayKickGameUser::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 GatewayKickGameUser::charid() const {
  return charid_;
}
inline void GatewayKickGameUser::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// GatewayShutdownGame

// optional int32 client_taskid = 1;
inline bool GatewayShutdownGame::has_client_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayShutdownGame::set_has_client_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayShutdownGame::clear_has_client_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayShutdownGame::clear_client_taskid() {
  client_taskid_ = 0;
  clear_has_client_taskid();
}
inline ::google::protobuf::int32 GatewayShutdownGame::client_taskid() const {
  return client_taskid_;
}
inline void GatewayShutdownGame::set_client_taskid(::google::protobuf::int32 value) {
  set_has_client_taskid();
  client_taskid_ = value;
}

// optional int32 charid = 2;
inline bool GatewayShutdownGame::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatewayShutdownGame::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatewayShutdownGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatewayShutdownGame::clear_charid() {
  charid_ = 0;
  clear_has_charid();
}
inline ::google::protobuf::int32 GatewayShutdownGame::charid() const {
  return charid_;
}
inline void GatewayShutdownGame::set_charid(::google::protobuf::int32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// GatewayServerPing

// optional int32 timestamp = 1;
inline bool GatewayServerPing::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatewayServerPing::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatewayServerPing::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatewayServerPing::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 GatewayServerPing::timestamp() const {
  return timestamp_;
}
inline void GatewayServerPing::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameCmd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoSvrGame_2eproto__INCLUDED
