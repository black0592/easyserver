// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrGame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoSvrGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameCmd {

namespace {

const ::google::protobuf::Descriptor* GatewayForwardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayForwardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatewayEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatewayUnregGameUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayUnregGameUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatewayKickGameUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayKickGameUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatewayShutdownGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayShutdownGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatewayServerPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatewayServerPing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrGateway2GameOpCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoSvrGame_2eproto() {
  protobuf_AddDesc_ProtoSvrGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoSvrGame.proto");
  GOOGLE_CHECK(file != NULL);
  GatewayForwardCmd_descriptor_ = file->message_type(0);
  static const int GatewayForwardCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayForwardCmd, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayForwardCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayForwardCmd, forward_cmd_),
  };
  GatewayForwardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayForwardCmd_descriptor_,
      GatewayForwardCmd::default_instance_,
      GatewayForwardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayForwardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayForwardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayForwardCmd));
  GatewayEnterGame_descriptor_ = file->message_type(1);
  static const int GatewayEnterGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayEnterGame, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayEnterGame, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayEnterGame, account_),
  };
  GatewayEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayEnterGame_descriptor_,
      GatewayEnterGame::default_instance_,
      GatewayEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayEnterGame));
  GatewayUnregGameUser_descriptor_ = file->message_type(2);
  static const int GatewayUnregGameUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayUnregGameUser, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayUnregGameUser, charid_),
  };
  GatewayUnregGameUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayUnregGameUser_descriptor_,
      GatewayUnregGameUser::default_instance_,
      GatewayUnregGameUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayUnregGameUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayUnregGameUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayUnregGameUser));
  GatewayKickGameUser_descriptor_ = file->message_type(3);
  static const int GatewayKickGameUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayKickGameUser, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayKickGameUser, charid_),
  };
  GatewayKickGameUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayKickGameUser_descriptor_,
      GatewayKickGameUser::default_instance_,
      GatewayKickGameUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayKickGameUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayKickGameUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayKickGameUser));
  GatewayShutdownGame_descriptor_ = file->message_type(4);
  static const int GatewayShutdownGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayShutdownGame, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayShutdownGame, charid_),
  };
  GatewayShutdownGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayShutdownGame_descriptor_,
      GatewayShutdownGame::default_instance_,
      GatewayShutdownGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayShutdownGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayShutdownGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayShutdownGame));
  GatewayServerPing_descriptor_ = file->message_type(5);
  static const int GatewayServerPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayServerPing, timestamp_),
  };
  GatewayServerPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatewayServerPing_descriptor_,
      GatewayServerPing::default_instance_,
      GatewayServerPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayServerPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayServerPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatewayServerPing));
  SvrGateway2GameOpCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoSvrGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayForwardCmd_descriptor_, &GatewayForwardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayEnterGame_descriptor_, &GatewayEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayUnregGameUser_descriptor_, &GatewayUnregGameUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayKickGameUser_descriptor_, &GatewayKickGameUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayShutdownGame_descriptor_, &GatewayShutdownGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatewayServerPing_descriptor_, &GatewayServerPing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoSvrGame_2eproto() {
  delete GatewayForwardCmd::default_instance_;
  delete GatewayForwardCmd_reflection_;
  delete GatewayEnterGame::default_instance_;
  delete GatewayEnterGame_reflection_;
  delete GatewayUnregGameUser::default_instance_;
  delete GatewayUnregGameUser_reflection_;
  delete GatewayKickGameUser::default_instance_;
  delete GatewayKickGameUser_reflection_;
  delete GatewayShutdownGame::default_instance_;
  delete GatewayShutdownGame_reflection_;
  delete GatewayServerPing::default_instance_;
  delete GatewayServerPing_reflection_;
}

void protobuf_AddDesc_ProtoSvrGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoSvrGame.proto\022\007GameCmd\"O\n\021Gateway"
    "ForwardCmd\022\025\n\rclient_taskid\030\001 \001(\005\022\016\n\006cha"
    "rid\030\002 \001(\005\022\023\n\013forward_cmd\030\003 \001(\014\"J\n\020Gatewa"
    "yEnterGame\022\025\n\rclient_taskid\030\001 \001(\005\022\016\n\006cha"
    "rid\030\002 \001(\005\022\017\n\007account\030\003 \001(\t\"=\n\024GatewayUnr"
    "egGameUser\022\025\n\rclient_taskid\030\001 \001(\005\022\016\n\006cha"
    "rid\030\002 \001(\005\"<\n\023GatewayKickGameUser\022\025\n\rclie"
    "nt_taskid\030\001 \001(\005\022\016\n\006charid\030\002 \001(\005\"<\n\023Gatew"
    "ayShutdownGame\022\025\n\rclient_taskid\030\001 \001(\005\022\016\n"
    "\006charid\030\002 \001(\005\"&\n\021GatewayServerPing\022\021\n\tti"
    "mestamp\030\001 \001(\005*\265\001\n\025SvrGateway2GameOpCode\022"
    "\026\n\022SVR_OP_FORWARD_CMD\020\001\022\025\n\021SVR_OP_ENTER_"
    "GAME\020\002\022\032\n\026SVR_OP_UNREG_GAME_USER\020\003\022\031\n\025SV"
    "R_OP_KICK_GAME_USER\020\004\022\030\n\024SVR_OP_SHUTDOWN"
    "_GAME\020\005\022\034\n\030SVR_OP_GATEWAY_PING_GAME\020d", 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoSvrGame.proto", &protobuf_RegisterTypes);
  GatewayForwardCmd::default_instance_ = new GatewayForwardCmd();
  GatewayEnterGame::default_instance_ = new GatewayEnterGame();
  GatewayUnregGameUser::default_instance_ = new GatewayUnregGameUser();
  GatewayKickGameUser::default_instance_ = new GatewayKickGameUser();
  GatewayShutdownGame::default_instance_ = new GatewayShutdownGame();
  GatewayServerPing::default_instance_ = new GatewayServerPing();
  GatewayForwardCmd::default_instance_->InitAsDefaultInstance();
  GatewayEnterGame::default_instance_->InitAsDefaultInstance();
  GatewayUnregGameUser::default_instance_->InitAsDefaultInstance();
  GatewayKickGameUser::default_instance_->InitAsDefaultInstance();
  GatewayShutdownGame::default_instance_->InitAsDefaultInstance();
  GatewayServerPing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoSvrGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoSvrGame_2eproto {
  StaticDescriptorInitializer_ProtoSvrGame_2eproto() {
    protobuf_AddDesc_ProtoSvrGame_2eproto();
  }
} static_descriptor_initializer_ProtoSvrGame_2eproto_;
const ::google::protobuf::EnumDescriptor* SvrGateway2GameOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrGateway2GameOpCode_descriptor_;
}
bool SvrGateway2GameOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayForwardCmd::kClientTaskidFieldNumber;
const int GatewayForwardCmd::kCharidFieldNumber;
const int GatewayForwardCmd::kForwardCmdFieldNumber;
#endif  // !_MSC_VER

GatewayForwardCmd::GatewayForwardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayForwardCmd::InitAsDefaultInstance() {
}

GatewayForwardCmd::GatewayForwardCmd(const GatewayForwardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayForwardCmd::SharedCtor() {
  _cached_size_ = 0;
  client_taskid_ = 0;
  charid_ = 0;
  forward_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayForwardCmd::~GatewayForwardCmd() {
  SharedDtor();
}

void GatewayForwardCmd::SharedDtor() {
  if (forward_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_cmd_;
  }
  if (this != default_instance_) {
  }
}

void GatewayForwardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayForwardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayForwardCmd_descriptor_;
}

const GatewayForwardCmd& GatewayForwardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayForwardCmd* GatewayForwardCmd::default_instance_ = NULL;

GatewayForwardCmd* GatewayForwardCmd::New() const {
  return new GatewayForwardCmd;
}

void GatewayForwardCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_taskid_ = 0;
    charid_ = 0;
    if (has_forward_cmd()) {
      if (forward_cmd_ != &::google::protobuf::internal::kEmptyString) {
        forward_cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayForwardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_forward_cmd;
        break;
      }

      // optional bytes forward_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forward_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayForwardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_taskid(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

  // optional bytes forward_cmd = 3;
  if (has_forward_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->forward_cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayForwardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_taskid(), target);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charid(), target);
  }

  // optional bytes forward_cmd = 3;
  if (has_forward_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->forward_cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayForwardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_taskid = 1;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_taskid());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional bytes forward_cmd = 3;
    if (has_forward_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forward_cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayForwardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayForwardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayForwardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayForwardCmd::MergeFrom(const GatewayForwardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_forward_cmd()) {
      set_forward_cmd(from.forward_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayForwardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayForwardCmd::CopyFrom(const GatewayForwardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayForwardCmd::IsInitialized() const {

  return true;
}

void GatewayForwardCmd::Swap(GatewayForwardCmd* other) {
  if (other != this) {
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(charid_, other->charid_);
    std::swap(forward_cmd_, other->forward_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayForwardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayForwardCmd_descriptor_;
  metadata.reflection = GatewayForwardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayEnterGame::kClientTaskidFieldNumber;
const int GatewayEnterGame::kCharidFieldNumber;
const int GatewayEnterGame::kAccountFieldNumber;
#endif  // !_MSC_VER

GatewayEnterGame::GatewayEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayEnterGame::InitAsDefaultInstance() {
}

GatewayEnterGame::GatewayEnterGame(const GatewayEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayEnterGame::SharedCtor() {
  _cached_size_ = 0;
  client_taskid_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayEnterGame::~GatewayEnterGame() {
  SharedDtor();
}

void GatewayEnterGame::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void GatewayEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayEnterGame_descriptor_;
}

const GatewayEnterGame& GatewayEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayEnterGame* GatewayEnterGame::default_instance_ = NULL;

GatewayEnterGame* GatewayEnterGame::New() const {
  return new GatewayEnterGame;
}

void GatewayEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_taskid_ = 0;
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_taskid(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_taskid(), target);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_taskid = 1;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_taskid());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayEnterGame::MergeFrom(const GatewayEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayEnterGame::CopyFrom(const GatewayEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayEnterGame::IsInitialized() const {

  return true;
}

void GatewayEnterGame::Swap(GatewayEnterGame* other) {
  if (other != this) {
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayEnterGame_descriptor_;
  metadata.reflection = GatewayEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayUnregGameUser::kClientTaskidFieldNumber;
const int GatewayUnregGameUser::kCharidFieldNumber;
#endif  // !_MSC_VER

GatewayUnregGameUser::GatewayUnregGameUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayUnregGameUser::InitAsDefaultInstance() {
}

GatewayUnregGameUser::GatewayUnregGameUser(const GatewayUnregGameUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayUnregGameUser::SharedCtor() {
  _cached_size_ = 0;
  client_taskid_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayUnregGameUser::~GatewayUnregGameUser() {
  SharedDtor();
}

void GatewayUnregGameUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatewayUnregGameUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayUnregGameUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayUnregGameUser_descriptor_;
}

const GatewayUnregGameUser& GatewayUnregGameUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayUnregGameUser* GatewayUnregGameUser::default_instance_ = NULL;

GatewayUnregGameUser* GatewayUnregGameUser::New() const {
  return new GatewayUnregGameUser;
}

void GatewayUnregGameUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_taskid_ = 0;
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayUnregGameUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayUnregGameUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_taskid(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayUnregGameUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_taskid(), target);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayUnregGameUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_taskid = 1;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_taskid());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayUnregGameUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayUnregGameUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayUnregGameUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayUnregGameUser::MergeFrom(const GatewayUnregGameUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayUnregGameUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayUnregGameUser::CopyFrom(const GatewayUnregGameUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayUnregGameUser::IsInitialized() const {

  return true;
}

void GatewayUnregGameUser::Swap(GatewayUnregGameUser* other) {
  if (other != this) {
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayUnregGameUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayUnregGameUser_descriptor_;
  metadata.reflection = GatewayUnregGameUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayKickGameUser::kClientTaskidFieldNumber;
const int GatewayKickGameUser::kCharidFieldNumber;
#endif  // !_MSC_VER

GatewayKickGameUser::GatewayKickGameUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayKickGameUser::InitAsDefaultInstance() {
}

GatewayKickGameUser::GatewayKickGameUser(const GatewayKickGameUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayKickGameUser::SharedCtor() {
  _cached_size_ = 0;
  client_taskid_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayKickGameUser::~GatewayKickGameUser() {
  SharedDtor();
}

void GatewayKickGameUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatewayKickGameUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayKickGameUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayKickGameUser_descriptor_;
}

const GatewayKickGameUser& GatewayKickGameUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayKickGameUser* GatewayKickGameUser::default_instance_ = NULL;

GatewayKickGameUser* GatewayKickGameUser::New() const {
  return new GatewayKickGameUser;
}

void GatewayKickGameUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_taskid_ = 0;
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayKickGameUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayKickGameUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_taskid(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayKickGameUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_taskid(), target);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayKickGameUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_taskid = 1;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_taskid());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayKickGameUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayKickGameUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayKickGameUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayKickGameUser::MergeFrom(const GatewayKickGameUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayKickGameUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayKickGameUser::CopyFrom(const GatewayKickGameUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayKickGameUser::IsInitialized() const {

  return true;
}

void GatewayKickGameUser::Swap(GatewayKickGameUser* other) {
  if (other != this) {
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayKickGameUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayKickGameUser_descriptor_;
  metadata.reflection = GatewayKickGameUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayShutdownGame::kClientTaskidFieldNumber;
const int GatewayShutdownGame::kCharidFieldNumber;
#endif  // !_MSC_VER

GatewayShutdownGame::GatewayShutdownGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayShutdownGame::InitAsDefaultInstance() {
}

GatewayShutdownGame::GatewayShutdownGame(const GatewayShutdownGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayShutdownGame::SharedCtor() {
  _cached_size_ = 0;
  client_taskid_ = 0;
  charid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayShutdownGame::~GatewayShutdownGame() {
  SharedDtor();
}

void GatewayShutdownGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatewayShutdownGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayShutdownGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayShutdownGame_descriptor_;
}

const GatewayShutdownGame& GatewayShutdownGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayShutdownGame* GatewayShutdownGame::default_instance_ = NULL;

GatewayShutdownGame* GatewayShutdownGame::New() const {
  return new GatewayShutdownGame;
}

void GatewayShutdownGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_taskid_ = 0;
    charid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayShutdownGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayShutdownGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_taskid(), output);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayShutdownGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 client_taskid = 1;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_taskid(), target);
  }

  // optional int32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayShutdownGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 client_taskid = 1;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_taskid());
    }

    // optional int32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayShutdownGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayShutdownGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayShutdownGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayShutdownGame::MergeFrom(const GatewayShutdownGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayShutdownGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayShutdownGame::CopyFrom(const GatewayShutdownGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayShutdownGame::IsInitialized() const {

  return true;
}

void GatewayShutdownGame::Swap(GatewayShutdownGame* other) {
  if (other != this) {
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayShutdownGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayShutdownGame_descriptor_;
  metadata.reflection = GatewayShutdownGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatewayServerPing::kTimestampFieldNumber;
#endif  // !_MSC_VER

GatewayServerPing::GatewayServerPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatewayServerPing::InitAsDefaultInstance() {
}

GatewayServerPing::GatewayServerPing(const GatewayServerPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatewayServerPing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatewayServerPing::~GatewayServerPing() {
  SharedDtor();
}

void GatewayServerPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatewayServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayServerPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatewayServerPing_descriptor_;
}

const GatewayServerPing& GatewayServerPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrGame_2eproto();
  return *default_instance_;
}

GatewayServerPing* GatewayServerPing::default_instance_ = NULL;

GatewayServerPing* GatewayServerPing::New() const {
  return new GatewayServerPing;
}

void GatewayServerPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatewayServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatewayServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatewayServerPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatewayServerPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayServerPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatewayServerPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatewayServerPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatewayServerPing::MergeFrom(const GatewayServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatewayServerPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayServerPing::CopyFrom(const GatewayServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayServerPing::IsInitialized() const {

  return true;
}

void GatewayServerPing::Swap(GatewayServerPing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatewayServerPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatewayServerPing_descriptor_;
  metadata.reflection = GatewayServerPing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameCmd

// @@protoc_insertion_point(global_scope)
