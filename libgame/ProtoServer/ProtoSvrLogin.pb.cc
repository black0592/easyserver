// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoSvrLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LoginCmd {

namespace {

const ::google::protobuf::Descriptor* RequestRegisterGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegisterGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegisterGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegisterGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGameServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGameServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserEndTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserEndTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUserEndTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUserEndTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGetUserCashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGetUserCashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGetUserCashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGetUserCashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUpdateUserCashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUpdateUserCashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUpdateUserCashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUpdateUserCashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStopAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStopAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRegisterGatewayServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegisterGatewayServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegisterGatewayServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegisterGatewayServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRegUserToGateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegUserToGateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegUserToGateway_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegUserToGateway_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUnregLoginUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUnregLoginUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUnregGatewayUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUnregGatewayUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGatewayServerPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGatewayServerPing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrGame2LoginOpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrGateway2LoginOpCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoSvrLogin_2eproto() {
  protobuf_AddDesc_ProtoSvrLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoSvrLogin.proto");
  GOOGLE_CHECK(file != NULL);
  RequestRegisterGameServer_descriptor_ = file->message_type(0);
  static const int RequestRegisterGameServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGameServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGameServer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGameServer, port_),
  };
  RequestRegisterGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegisterGameServer_descriptor_,
      RequestRegisterGameServer::default_instance_,
      RequestRegisterGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegisterGameServer));
  ResponseRegisterGameServer_descriptor_ = file->message_type(1);
  static const int ResponseRegisterGameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGameServer, result_),
  };
  ResponseRegisterGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegisterGameServer_descriptor_,
      ResponseRegisterGameServer::default_instance_,
      ResponseRegisterGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegisterGameServer));
  UpdateGameServerInfo_descriptor_ = file->message_type(2);
  static const int UpdateGameServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, online_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, state_),
  };
  UpdateGameServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGameServerInfo_descriptor_,
      UpdateGameServerInfo::default_instance_,
      UpdateGameServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGameServerInfo));
  RequestUserEndTime_descriptor_ = file->message_type(3);
  static const int RequestUserEndTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserEndTime, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserEndTime, account_),
  };
  RequestUserEndTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserEndTime_descriptor_,
      RequestUserEndTime::default_instance_,
      RequestUserEndTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserEndTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserEndTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserEndTime));
  ResponseUserEndTime_descriptor_ = file->message_type(4);
  static const int ResponseUserEndTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserEndTime, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserEndTime, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserEndTime, end_time_),
  };
  ResponseUserEndTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUserEndTime_descriptor_,
      ResponseUserEndTime::default_instance_,
      ResponseUserEndTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserEndTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserEndTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUserEndTime));
  RequestGetUserCashInfo_descriptor_ = file->message_type(5);
  static const int RequestGetUserCashInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetUserCashInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetUserCashInfo, account_),
  };
  RequestGetUserCashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGetUserCashInfo_descriptor_,
      RequestGetUserCashInfo::default_instance_,
      RequestGetUserCashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetUserCashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetUserCashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGetUserCashInfo));
  ResponseGetUserCashInfo_descriptor_ = file->message_type(6);
  static const int ResponseGetUserCashInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, cashpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, credits_),
  };
  ResponseGetUserCashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGetUserCashInfo_descriptor_,
      ResponseGetUserCashInfo::default_instance_,
      ResponseGetUserCashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetUserCashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGetUserCashInfo));
  RequestUpdateUserCashInfo_descriptor_ = file->message_type(7);
  static const int RequestUpdateUserCashInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, cashpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, type_),
  };
  RequestUpdateUserCashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUpdateUserCashInfo_descriptor_,
      RequestUpdateUserCashInfo::default_instance_,
      RequestUpdateUserCashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateUserCashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUpdateUserCashInfo));
  ResponseUpdateUserCashInfo_descriptor_ = file->message_type(8);
  static const int ResponseUpdateUserCashInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, cashpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, type_),
  };
  ResponseUpdateUserCashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUpdateUserCashInfo_descriptor_,
      ResponseUpdateUserCashInfo::default_instance_,
      ResponseUpdateUserCashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpdateUserCashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUpdateUserCashInfo));
  RequestStopAccount_descriptor_ = file->message_type(9);
  static const int RequestStopAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStopAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStopAccount, charname_),
  };
  RequestStopAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStopAccount_descriptor_,
      RequestStopAccount::default_instance_,
      RequestStopAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStopAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStopAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStopAccount));
  GameServerPing_descriptor_ = file->message_type(10);
  static const int GameServerPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, timestamp_),
  };
  GameServerPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerPing_descriptor_,
      GameServerPing::default_instance_,
      GameServerPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerPing));
  RequestRegisterGatewayServer_descriptor_ = file->message_type(11);
  static const int RequestRegisterGatewayServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, port_),
  };
  RequestRegisterGatewayServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegisterGatewayServer_descriptor_,
      RequestRegisterGatewayServer::default_instance_,
      RequestRegisterGatewayServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegisterGatewayServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegisterGatewayServer));
  ResponseRegisterGatewayServer_descriptor_ = file->message_type(12);
  static const int ResponseRegisterGatewayServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGatewayServer, result_),
  };
  ResponseRegisterGatewayServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegisterGatewayServer_descriptor_,
      ResponseRegisterGatewayServer::default_instance_,
      ResponseRegisterGatewayServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGatewayServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegisterGatewayServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegisterGatewayServer));
  RequestRegUserToGateway_descriptor_ = file->message_type(13);
  static const int RequestRegUserToGateway_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, key_),
  };
  RequestRegUserToGateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegUserToGateway_descriptor_,
      RequestRegUserToGateway::default_instance_,
      RequestRegUserToGateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegUserToGateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegUserToGateway));
  ResponseRegUserToGateway_descriptor_ = file->message_type(14);
  static const int ResponseRegUserToGateway_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, result_),
  };
  ResponseRegUserToGateway_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegUserToGateway_descriptor_,
      ResponseRegUserToGateway::default_instance_,
      ResponseRegUserToGateway_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegUserToGateway, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegUserToGateway));
  NotifyUnregLoginUser_descriptor_ = file->message_type(15);
  static const int NotifyUnregLoginUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregLoginUser, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregLoginUser, key_),
  };
  NotifyUnregLoginUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUnregLoginUser_descriptor_,
      NotifyUnregLoginUser::default_instance_,
      NotifyUnregLoginUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregLoginUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregLoginUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUnregLoginUser));
  NotifyUnregGatewayUser_descriptor_ = file->message_type(16);
  static const int NotifyUnregGatewayUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregGatewayUser, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregGatewayUser, key_),
  };
  NotifyUnregGatewayUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUnregGatewayUser_descriptor_,
      NotifyUnregGatewayUser::default_instance_,
      NotifyUnregGatewayUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregGatewayUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUnregGatewayUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUnregGatewayUser));
  MsgGatewayServerPing_descriptor_ = file->message_type(17);
  static const int MsgGatewayServerPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatewayServerPing, timestamp_),
  };
  MsgGatewayServerPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGatewayServerPing_descriptor_,
      MsgGatewayServerPing::default_instance_,
      MsgGatewayServerPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatewayServerPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatewayServerPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGatewayServerPing));
  SvrGame2LoginOpCode_descriptor_ = file->enum_type(0);
  SvrGateway2LoginOpCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoSvrLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegisterGameServer_descriptor_, &RequestRegisterGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegisterGameServer_descriptor_, &ResponseRegisterGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGameServerInfo_descriptor_, &UpdateGameServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserEndTime_descriptor_, &RequestUserEndTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUserEndTime_descriptor_, &ResponseUserEndTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGetUserCashInfo_descriptor_, &RequestGetUserCashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGetUserCashInfo_descriptor_, &ResponseGetUserCashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUpdateUserCashInfo_descriptor_, &RequestUpdateUserCashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUpdateUserCashInfo_descriptor_, &ResponseUpdateUserCashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStopAccount_descriptor_, &RequestStopAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerPing_descriptor_, &GameServerPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegisterGatewayServer_descriptor_, &RequestRegisterGatewayServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegisterGatewayServer_descriptor_, &ResponseRegisterGatewayServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegUserToGateway_descriptor_, &RequestRegUserToGateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegUserToGateway_descriptor_, &ResponseRegUserToGateway::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUnregLoginUser_descriptor_, &NotifyUnregLoginUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUnregGatewayUser_descriptor_, &NotifyUnregGatewayUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGatewayServerPing_descriptor_, &MsgGatewayServerPing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoSvrLogin_2eproto() {
  delete RequestRegisterGameServer::default_instance_;
  delete RequestRegisterGameServer_reflection_;
  delete ResponseRegisterGameServer::default_instance_;
  delete ResponseRegisterGameServer_reflection_;
  delete UpdateGameServerInfo::default_instance_;
  delete UpdateGameServerInfo_reflection_;
  delete RequestUserEndTime::default_instance_;
  delete RequestUserEndTime_reflection_;
  delete ResponseUserEndTime::default_instance_;
  delete ResponseUserEndTime_reflection_;
  delete RequestGetUserCashInfo::default_instance_;
  delete RequestGetUserCashInfo_reflection_;
  delete ResponseGetUserCashInfo::default_instance_;
  delete ResponseGetUserCashInfo_reflection_;
  delete RequestUpdateUserCashInfo::default_instance_;
  delete RequestUpdateUserCashInfo_reflection_;
  delete ResponseUpdateUserCashInfo::default_instance_;
  delete ResponseUpdateUserCashInfo_reflection_;
  delete RequestStopAccount::default_instance_;
  delete RequestStopAccount_reflection_;
  delete GameServerPing::default_instance_;
  delete GameServerPing_reflection_;
  delete RequestRegisterGatewayServer::default_instance_;
  delete RequestRegisterGatewayServer_reflection_;
  delete ResponseRegisterGatewayServer::default_instance_;
  delete ResponseRegisterGatewayServer_reflection_;
  delete RequestRegUserToGateway::default_instance_;
  delete RequestRegUserToGateway_reflection_;
  delete ResponseRegUserToGateway::default_instance_;
  delete ResponseRegUserToGateway_reflection_;
  delete NotifyUnregLoginUser::default_instance_;
  delete NotifyUnregLoginUser_reflection_;
  delete NotifyUnregGatewayUser::default_instance_;
  delete NotifyUnregGatewayUser_reflection_;
  delete MsgGatewayServerPing::default_instance_;
  delete MsgGatewayServerPing_reflection_;
}

void protobuf_AddDesc_ProtoSvrLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoSvrServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoSvrLogin.proto\022\010LoginCmd\032\030ProtoSv"
    "rServerData.proto\"C\n\031RequestRegisterGame"
    "Server\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004port"
    "\030\003 \001(\005\",\n\032ResponseRegisterGameServer\022\016\n\006"
    "result\030\001 \001(\005\"]\n\024UpdateGameServerInfo\022\021\n\t"
    "server_id\030\001 \001(\005\022\022\n\nonline_num\030\002 \001(\t\022\017\n\007m"
    "ax_num\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\"5\n\022RequestUs"
    "erEndTime\022\016\n\006charid\030\001 \001(\005\022\017\n\007account\030\002 \001"
    "(\t\"H\n\023ResponseUserEndTime\022\016\n\006charid\030\001 \001("
    "\005\022\017\n\007account\030\002 \001(\t\022\020\n\010end_time\030\003 \001(\005\"9\n\026"
    "RequestGetUserCashInfo\022\016\n\006charid\030\001 \001(\005\022\017"
    "\n\007account\030\002 \001(\t\"^\n\027ResponseGetUserCashIn"
    "fo\022\016\n\006charid\030\001 \001(\005\022\017\n\007account\030\002 \001(\t\022\021\n\tc"
    "ashpoint\030\003 \001(\005\022\017\n\007credits\030\004 \001(\005\"n\n\031Reque"
    "stUpdateUserCashInfo\022\016\n\006charid\030\001 \001(\005\022\017\n\007"
    "account\030\002 \001(\t\022\021\n\tcashpoint\030\003 \001(\005\022\017\n\007cred"
    "its\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\"o\n\032ResponseUpdat"
    "eUserCashInfo\022\016\n\006charid\030\001 \001(\005\022\017\n\007account"
    "\030\002 \001(\t\022\021\n\tcashpoint\030\003 \001(\005\022\017\n\007credits\030\004 \001"
    "(\005\022\014\n\004type\030\005 \001(\005\"7\n\022RequestStopAccount\022\017"
    "\n\007account\030\001 \001(\t\022\020\n\010charname\030\002 \001(\t\"#\n\016Gam"
    "eServerPing\022\021\n\ttimestamp\030\001 \001(\005\"b\n\034Reques"
    "tRegisterGatewayServer\022\016\n\006zoneid\030\001 \001(\005\022\n"
    "\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\n\n\002ip\030\004 \001(\t\022\014\n\004"
    "port\030\005 \001(\005\"/\n\035ResponseRegisterGatewaySer"
    "ver\022\016\n\006result\030\001 \001(\005\"Z\n\027RequestRegUserToG"
    "ateway\022\016\n\006zoneid\030\001 \001(\005\022\021\n\tgatewayid\030\002 \001("
    "\005\022\017\n\007account\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\"k\n\030Respo"
    "nseRegUserToGateway\022\016\n\006zoneid\030\001 \001(\005\022\021\n\tg"
    "atewayid\030\002 \001(\005\022\017\n\007account\030\003 \001(\t\022\013\n\003key\030\004"
    " \001(\t\022\016\n\006result\030\005 \001(\005\"4\n\024NotifyUnregLogin"
    "User\022\017\n\007account\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\"6\n\026No"
    "tifyUnregGatewayUser\022\017\n\007account\030\001 \001(\t\022\013\n"
    "\003key\030\002 \001(\t\")\n\024MsgGatewayServerPing\022\021\n\tti"
    "mestamp\030\001 \001(\005*\246\002\n\023SvrGame2LoginOpCode\022\036\n"
    "\032SVR_OP_GAME_TO_LOGIN_START\0202\022\036\n\032SVR_OP_"
    "REGISTER_GAMESERVER\0203\022!\n\035SVR_OP_UPDATE_G"
    "AMESERVER_INFO\0204\022\030\n\024SVR_OP_USER_END_TIME"
    "\0205\022\035\n\031SVR_OP_GET_USER_CASH_INFO\0206\022 \n\034SVR"
    "_OP_UPDATE_USER_CASH_INFO\0207\022\027\n\023SVR_OP_ST"
    "OP_ACCOUNT\0208\022\032\n\026SVR_OP_GAMESERVER_PING\0209"
    "\022\034\n\030SVR_OP_GAME_TO_LOGIN_END\020c*\371\001\n\026SvrGa"
    "teway2LoginOpCode\022!\n\035SVR_OP_GATEWAY_TO_L"
    "OGIN_START\020d\022!\n\035SVR_OP_REGISTER_GATEWAYS"
    "ERVER\020e\022\036\n\032SVR_OP_REG_USER_TO_GATEWAY\020f\022"
    "\032\n\026SVR_OP_UNREG_LOGINUSER\020g\022\034\n\030SVR_OP_UN"
    "REG_GATEWAYUSER\020h\022\035\n\031SVR_OP_GATEWAY_PING"
    "_LOGIN\020i\022 \n\033SVR_OP_GATEWAY_TO_LOGIN_END\020"
    "\307\001", 1922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoSvrLogin.proto", &protobuf_RegisterTypes);
  RequestRegisterGameServer::default_instance_ = new RequestRegisterGameServer();
  ResponseRegisterGameServer::default_instance_ = new ResponseRegisterGameServer();
  UpdateGameServerInfo::default_instance_ = new UpdateGameServerInfo();
  RequestUserEndTime::default_instance_ = new RequestUserEndTime();
  ResponseUserEndTime::default_instance_ = new ResponseUserEndTime();
  RequestGetUserCashInfo::default_instance_ = new RequestGetUserCashInfo();
  ResponseGetUserCashInfo::default_instance_ = new ResponseGetUserCashInfo();
  RequestUpdateUserCashInfo::default_instance_ = new RequestUpdateUserCashInfo();
  ResponseUpdateUserCashInfo::default_instance_ = new ResponseUpdateUserCashInfo();
  RequestStopAccount::default_instance_ = new RequestStopAccount();
  GameServerPing::default_instance_ = new GameServerPing();
  RequestRegisterGatewayServer::default_instance_ = new RequestRegisterGatewayServer();
  ResponseRegisterGatewayServer::default_instance_ = new ResponseRegisterGatewayServer();
  RequestRegUserToGateway::default_instance_ = new RequestRegUserToGateway();
  ResponseRegUserToGateway::default_instance_ = new ResponseRegUserToGateway();
  NotifyUnregLoginUser::default_instance_ = new NotifyUnregLoginUser();
  NotifyUnregGatewayUser::default_instance_ = new NotifyUnregGatewayUser();
  MsgGatewayServerPing::default_instance_ = new MsgGatewayServerPing();
  RequestRegisterGameServer::default_instance_->InitAsDefaultInstance();
  ResponseRegisterGameServer::default_instance_->InitAsDefaultInstance();
  UpdateGameServerInfo::default_instance_->InitAsDefaultInstance();
  RequestUserEndTime::default_instance_->InitAsDefaultInstance();
  ResponseUserEndTime::default_instance_->InitAsDefaultInstance();
  RequestGetUserCashInfo::default_instance_->InitAsDefaultInstance();
  ResponseGetUserCashInfo::default_instance_->InitAsDefaultInstance();
  RequestUpdateUserCashInfo::default_instance_->InitAsDefaultInstance();
  ResponseUpdateUserCashInfo::default_instance_->InitAsDefaultInstance();
  RequestStopAccount::default_instance_->InitAsDefaultInstance();
  GameServerPing::default_instance_->InitAsDefaultInstance();
  RequestRegisterGatewayServer::default_instance_->InitAsDefaultInstance();
  ResponseRegisterGatewayServer::default_instance_->InitAsDefaultInstance();
  RequestRegUserToGateway::default_instance_->InitAsDefaultInstance();
  ResponseRegUserToGateway::default_instance_->InitAsDefaultInstance();
  NotifyUnregLoginUser::default_instance_->InitAsDefaultInstance();
  NotifyUnregGatewayUser::default_instance_->InitAsDefaultInstance();
  MsgGatewayServerPing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoSvrLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoSvrLogin_2eproto {
  StaticDescriptorInitializer_ProtoSvrLogin_2eproto() {
    protobuf_AddDesc_ProtoSvrLogin_2eproto();
  }
} static_descriptor_initializer_ProtoSvrLogin_2eproto_;
const ::google::protobuf::EnumDescriptor* SvrGame2LoginOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrGame2LoginOpCode_descriptor_;
}
bool SvrGame2LoginOpCode_IsValid(int value) {
  switch(value) {
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SvrGateway2LoginOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrGateway2LoginOpCode_descriptor_;
}
bool SvrGateway2LoginOpCode_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 199:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegisterGameServer::kIdFieldNumber;
const int RequestRegisterGameServer::kNameFieldNumber;
const int RequestRegisterGameServer::kPortFieldNumber;
#endif  // !_MSC_VER

RequestRegisterGameServer::RequestRegisterGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegisterGameServer::InitAsDefaultInstance() {
}

RequestRegisterGameServer::RequestRegisterGameServer(const RequestRegisterGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegisterGameServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterGameServer::~RequestRegisterGameServer() {
  SharedDtor();
}

void RequestRegisterGameServer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestRegisterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegisterGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegisterGameServer_descriptor_;
}

const RequestRegisterGameServer& RequestRegisterGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestRegisterGameServer* RequestRegisterGameServer::default_instance_ = NULL;

RequestRegisterGameServer* RequestRegisterGameServer::New() const {
  return new RequestRegisterGameServer;
}

void RequestRegisterGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegisterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegisterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegisterGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegisterGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegisterGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegisterGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegisterGameServer::MergeFrom(const RequestRegisterGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegisterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegisterGameServer::CopyFrom(const RequestRegisterGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterGameServer::IsInitialized() const {

  return true;
}

void RequestRegisterGameServer::Swap(RequestRegisterGameServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegisterGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegisterGameServer_descriptor_;
  metadata.reflection = RequestRegisterGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegisterGameServer::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseRegisterGameServer::ResponseRegisterGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegisterGameServer::InitAsDefaultInstance() {
}

ResponseRegisterGameServer::ResponseRegisterGameServer(const ResponseRegisterGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegisterGameServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegisterGameServer::~ResponseRegisterGameServer() {
  SharedDtor();
}

void ResponseRegisterGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRegisterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegisterGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegisterGameServer_descriptor_;
}

const ResponseRegisterGameServer& ResponseRegisterGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseRegisterGameServer* ResponseRegisterGameServer::default_instance_ = NULL;

ResponseRegisterGameServer* ResponseRegisterGameServer::New() const {
  return new ResponseRegisterGameServer;
}

void ResponseRegisterGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegisterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegisterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegisterGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegisterGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegisterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegisterGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegisterGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegisterGameServer::MergeFrom(const ResponseRegisterGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegisterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegisterGameServer::CopyFrom(const ResponseRegisterGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegisterGameServer::IsInitialized() const {

  return true;
}

void ResponseRegisterGameServer::Swap(ResponseRegisterGameServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegisterGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegisterGameServer_descriptor_;
  metadata.reflection = ResponseRegisterGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGameServerInfo::kServerIdFieldNumber;
const int UpdateGameServerInfo::kOnlineNumFieldNumber;
const int UpdateGameServerInfo::kMaxNumFieldNumber;
const int UpdateGameServerInfo::kStateFieldNumber;
#endif  // !_MSC_VER

UpdateGameServerInfo::UpdateGameServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGameServerInfo::InitAsDefaultInstance() {
}

UpdateGameServerInfo::UpdateGameServerInfo(const UpdateGameServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGameServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  online_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_num_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGameServerInfo::~UpdateGameServerInfo() {
  SharedDtor();
}

void UpdateGameServerInfo::SharedDtor() {
  if (online_num_ != &::google::protobuf::internal::kEmptyString) {
    delete online_num_;
  }
  if (this != default_instance_) {
  }
}

void UpdateGameServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGameServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGameServerInfo_descriptor_;
}

const UpdateGameServerInfo& UpdateGameServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

UpdateGameServerInfo* UpdateGameServerInfo::default_instance_ = NULL;

UpdateGameServerInfo* UpdateGameServerInfo::New() const {
  return new UpdateGameServerInfo;
}

void UpdateGameServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_online_num()) {
      if (online_num_ != &::google::protobuf::internal::kEmptyString) {
        online_num_->clear();
      }
    }
    max_num_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGameServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_online_num;
        break;
      }

      // optional string online_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->online_num().data(), this->online_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateGameServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // optional string online_num = 2;
  if (has_online_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->online_num().data(), this->online_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->online_num(), output);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_num(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGameServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // optional string online_num = 2;
  if (has_online_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->online_num().data(), this->online_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->online_num(), target);
  }

  // optional int32 max_num = 3;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_num(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGameServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional string online_num = 2;
    if (has_online_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->online_num());
    }

    // optional int32 max_num = 3;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGameServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGameServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGameServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGameServerInfo::MergeFrom(const UpdateGameServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_online_num()) {
      set_online_num(from.online_num());
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGameServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameServerInfo::CopyFrom(const UpdateGameServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameServerInfo::IsInitialized() const {

  return true;
}

void UpdateGameServerInfo::Swap(UpdateGameServerInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(online_num_, other->online_num_);
    std::swap(max_num_, other->max_num_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGameServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGameServerInfo_descriptor_;
  metadata.reflection = UpdateGameServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserEndTime::kCharidFieldNumber;
const int RequestUserEndTime::kAccountFieldNumber;
#endif  // !_MSC_VER

RequestUserEndTime::RequestUserEndTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUserEndTime::InitAsDefaultInstance() {
}

RequestUserEndTime::RequestUserEndTime(const RequestUserEndTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUserEndTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserEndTime::~RequestUserEndTime() {
  SharedDtor();
}

void RequestUserEndTime::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void RequestUserEndTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserEndTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserEndTime_descriptor_;
}

const RequestUserEndTime& RequestUserEndTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestUserEndTime* RequestUserEndTime::default_instance_ = NULL;

RequestUserEndTime* RequestUserEndTime::New() const {
  return new RequestUserEndTime;
}

void RequestUserEndTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserEndTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUserEndTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUserEndTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUserEndTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserEndTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserEndTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserEndTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserEndTime::MergeFrom(const RequestUserEndTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserEndTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserEndTime::CopyFrom(const RequestUserEndTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserEndTime::IsInitialized() const {

  return true;
}

void RequestUserEndTime::Swap(RequestUserEndTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserEndTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserEndTime_descriptor_;
  metadata.reflection = RequestUserEndTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUserEndTime::kCharidFieldNumber;
const int ResponseUserEndTime::kAccountFieldNumber;
const int ResponseUserEndTime::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ResponseUserEndTime::ResponseUserEndTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUserEndTime::InitAsDefaultInstance() {
}

ResponseUserEndTime::ResponseUserEndTime(const ResponseUserEndTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUserEndTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUserEndTime::~ResponseUserEndTime() {
  SharedDtor();
}

void ResponseUserEndTime::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ResponseUserEndTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUserEndTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUserEndTime_descriptor_;
}

const ResponseUserEndTime& ResponseUserEndTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseUserEndTime* ResponseUserEndTime::default_instance_ = NULL;

ResponseUserEndTime* ResponseUserEndTime::New() const {
  return new ResponseUserEndTime;
}

void ResponseUserEndTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUserEndTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUserEndTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUserEndTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUserEndTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUserEndTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUserEndTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUserEndTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUserEndTime::MergeFrom(const ResponseUserEndTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUserEndTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUserEndTime::CopyFrom(const ResponseUserEndTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUserEndTime::IsInitialized() const {

  return true;
}

void ResponseUserEndTime::Swap(ResponseUserEndTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUserEndTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUserEndTime_descriptor_;
  metadata.reflection = ResponseUserEndTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetUserCashInfo::kCharidFieldNumber;
const int RequestGetUserCashInfo::kAccountFieldNumber;
#endif  // !_MSC_VER

RequestGetUserCashInfo::RequestGetUserCashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGetUserCashInfo::InitAsDefaultInstance() {
}

RequestGetUserCashInfo::RequestGetUserCashInfo(const RequestGetUserCashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetUserCashInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetUserCashInfo::~RequestGetUserCashInfo() {
  SharedDtor();
}

void RequestGetUserCashInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void RequestGetUserCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGetUserCashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGetUserCashInfo_descriptor_;
}

const RequestGetUserCashInfo& RequestGetUserCashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestGetUserCashInfo* RequestGetUserCashInfo::default_instance_ = NULL;

RequestGetUserCashInfo* RequestGetUserCashInfo::New() const {
  return new RequestGetUserCashInfo;
}

void RequestGetUserCashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGetUserCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetUserCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGetUserCashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGetUserCashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetUserCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGetUserCashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGetUserCashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGetUserCashInfo::MergeFrom(const RequestGetUserCashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGetUserCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetUserCashInfo::CopyFrom(const RequestGetUserCashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetUserCashInfo::IsInitialized() const {

  return true;
}

void RequestGetUserCashInfo::Swap(RequestGetUserCashInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGetUserCashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGetUserCashInfo_descriptor_;
  metadata.reflection = RequestGetUserCashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetUserCashInfo::kCharidFieldNumber;
const int ResponseGetUserCashInfo::kAccountFieldNumber;
const int ResponseGetUserCashInfo::kCashpointFieldNumber;
const int ResponseGetUserCashInfo::kCreditsFieldNumber;
#endif  // !_MSC_VER

ResponseGetUserCashInfo::ResponseGetUserCashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGetUserCashInfo::InitAsDefaultInstance() {
}

ResponseGetUserCashInfo::ResponseGetUserCashInfo(const ResponseGetUserCashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetUserCashInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cashpoint_ = 0;
  credits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetUserCashInfo::~ResponseGetUserCashInfo() {
  SharedDtor();
}

void ResponseGetUserCashInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ResponseGetUserCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGetUserCashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGetUserCashInfo_descriptor_;
}

const ResponseGetUserCashInfo& ResponseGetUserCashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseGetUserCashInfo* ResponseGetUserCashInfo::default_instance_ = NULL;

ResponseGetUserCashInfo* ResponseGetUserCashInfo::New() const {
  return new ResponseGetUserCashInfo;
}

void ResponseGetUserCashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    cashpoint_ = 0;
    credits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGetUserCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cashpoint;
        break;
      }

      // optional int32 cashpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashpoint_)));
          set_has_cashpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_credits;
        break;
      }

      // optional int32 credits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetUserCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cashpoint(), output);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->credits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGetUserCashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cashpoint(), target);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->credits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGetUserCashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 cashpoint = 3;
    if (has_cashpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashpoint());
    }

    // optional int32 credits = 4;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetUserCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGetUserCashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGetUserCashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGetUserCashInfo::MergeFrom(const ResponseGetUserCashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cashpoint()) {
      set_cashpoint(from.cashpoint());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGetUserCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGetUserCashInfo::CopyFrom(const ResponseGetUserCashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetUserCashInfo::IsInitialized() const {

  return true;
}

void ResponseGetUserCashInfo::Swap(ResponseGetUserCashInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(cashpoint_, other->cashpoint_);
    std::swap(credits_, other->credits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGetUserCashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGetUserCashInfo_descriptor_;
  metadata.reflection = ResponseGetUserCashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateUserCashInfo::kCharidFieldNumber;
const int RequestUpdateUserCashInfo::kAccountFieldNumber;
const int RequestUpdateUserCashInfo::kCashpointFieldNumber;
const int RequestUpdateUserCashInfo::kCreditsFieldNumber;
const int RequestUpdateUserCashInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestUpdateUserCashInfo::RequestUpdateUserCashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUpdateUserCashInfo::InitAsDefaultInstance() {
}

RequestUpdateUserCashInfo::RequestUpdateUserCashInfo(const RequestUpdateUserCashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpdateUserCashInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cashpoint_ = 0;
  credits_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateUserCashInfo::~RequestUpdateUserCashInfo() {
  SharedDtor();
}

void RequestUpdateUserCashInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void RequestUpdateUserCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUpdateUserCashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUpdateUserCashInfo_descriptor_;
}

const RequestUpdateUserCashInfo& RequestUpdateUserCashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestUpdateUserCashInfo* RequestUpdateUserCashInfo::default_instance_ = NULL;

RequestUpdateUserCashInfo* RequestUpdateUserCashInfo::New() const {
  return new RequestUpdateUserCashInfo;
}

void RequestUpdateUserCashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    cashpoint_ = 0;
    credits_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUpdateUserCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cashpoint;
        break;
      }

      // optional int32 cashpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashpoint_)));
          set_has_cashpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_credits;
        break;
      }

      // optional int32 credits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpdateUserCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cashpoint(), output);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->credits(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUpdateUserCashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cashpoint(), target);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->credits(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUpdateUserCashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 cashpoint = 3;
    if (has_cashpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashpoint());
    }

    // optional int32 credits = 4;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateUserCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUpdateUserCashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUpdateUserCashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUpdateUserCashInfo::MergeFrom(const RequestUpdateUserCashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cashpoint()) {
      set_cashpoint(from.cashpoint());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUpdateUserCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpdateUserCashInfo::CopyFrom(const RequestUpdateUserCashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateUserCashInfo::IsInitialized() const {

  return true;
}

void RequestUpdateUserCashInfo::Swap(RequestUpdateUserCashInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(cashpoint_, other->cashpoint_);
    std::swap(credits_, other->credits_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUpdateUserCashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUpdateUserCashInfo_descriptor_;
  metadata.reflection = RequestUpdateUserCashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUpdateUserCashInfo::kCharidFieldNumber;
const int ResponseUpdateUserCashInfo::kAccountFieldNumber;
const int ResponseUpdateUserCashInfo::kCashpointFieldNumber;
const int ResponseUpdateUserCashInfo::kCreditsFieldNumber;
const int ResponseUpdateUserCashInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

ResponseUpdateUserCashInfo::ResponseUpdateUserCashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUpdateUserCashInfo::InitAsDefaultInstance() {
}

ResponseUpdateUserCashInfo::ResponseUpdateUserCashInfo(const ResponseUpdateUserCashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUpdateUserCashInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cashpoint_ = 0;
  credits_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpdateUserCashInfo::~ResponseUpdateUserCashInfo() {
  SharedDtor();
}

void ResponseUpdateUserCashInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ResponseUpdateUserCashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUpdateUserCashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUpdateUserCashInfo_descriptor_;
}

const ResponseUpdateUserCashInfo& ResponseUpdateUserCashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseUpdateUserCashInfo* ResponseUpdateUserCashInfo::default_instance_ = NULL;

ResponseUpdateUserCashInfo* ResponseUpdateUserCashInfo::New() const {
  return new ResponseUpdateUserCashInfo;
}

void ResponseUpdateUserCashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    cashpoint_ = 0;
    credits_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUpdateUserCashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cashpoint;
        break;
      }

      // optional int32 cashpoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashpoint_)));
          set_has_cashpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_credits;
        break;
      }

      // optional int32 credits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
          set_has_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUpdateUserCashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cashpoint(), output);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->credits(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUpdateUserCashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 cashpoint = 3;
  if (has_cashpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cashpoint(), target);
  }

  // optional int32 credits = 4;
  if (has_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->credits(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUpdateUserCashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 cashpoint = 3;
    if (has_cashpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashpoint());
    }

    // optional int32 credits = 4;
    if (has_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credits());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpdateUserCashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUpdateUserCashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUpdateUserCashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUpdateUserCashInfo::MergeFrom(const ResponseUpdateUserCashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cashpoint()) {
      set_cashpoint(from.cashpoint());
    }
    if (from.has_credits()) {
      set_credits(from.credits());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUpdateUserCashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUpdateUserCashInfo::CopyFrom(const ResponseUpdateUserCashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpdateUserCashInfo::IsInitialized() const {

  return true;
}

void ResponseUpdateUserCashInfo::Swap(ResponseUpdateUserCashInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(cashpoint_, other->cashpoint_);
    std::swap(credits_, other->credits_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUpdateUserCashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUpdateUserCashInfo_descriptor_;
  metadata.reflection = ResponseUpdateUserCashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStopAccount::kAccountFieldNumber;
const int RequestStopAccount::kCharnameFieldNumber;
#endif  // !_MSC_VER

RequestStopAccount::RequestStopAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStopAccount::InitAsDefaultInstance() {
}

RequestStopAccount::RequestStopAccount(const RequestStopAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStopAccount::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStopAccount::~RequestStopAccount() {
  SharedDtor();
}

void RequestStopAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestStopAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStopAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStopAccount_descriptor_;
}

const RequestStopAccount& RequestStopAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestStopAccount* RequestStopAccount::default_instance_ = NULL;

RequestStopAccount* RequestStopAccount::New() const {
  return new RequestStopAccount;
}

void RequestStopAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStopAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStopAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStopAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStopAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStopAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStopAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStopAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStopAccount::MergeFrom(const RequestStopAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStopAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStopAccount::CopyFrom(const RequestStopAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStopAccount::IsInitialized() const {

  return true;
}

void RequestStopAccount::Swap(RequestStopAccount* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStopAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStopAccount_descriptor_;
  metadata.reflection = RequestStopAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerPing::kTimestampFieldNumber;
#endif  // !_MSC_VER

GameServerPing::GameServerPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerPing::InitAsDefaultInstance() {
}

GameServerPing::GameServerPing(const GameServerPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerPing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerPing::~GameServerPing() {
  SharedDtor();
}

void GameServerPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerPing_descriptor_;
}

const GameServerPing& GameServerPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

GameServerPing* GameServerPing::default_instance_ = NULL;

GameServerPing* GameServerPing::New() const {
  return new GameServerPing;
}

void GameServerPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerPing::MergeFrom(const GameServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPing::CopyFrom(const GameServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPing::IsInitialized() const {

  return true;
}

void GameServerPing::Swap(GameServerPing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerPing_descriptor_;
  metadata.reflection = GameServerPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegisterGatewayServer::kZoneidFieldNumber;
const int RequestRegisterGatewayServer::kIdFieldNumber;
const int RequestRegisterGatewayServer::kNameFieldNumber;
const int RequestRegisterGatewayServer::kIpFieldNumber;
const int RequestRegisterGatewayServer::kPortFieldNumber;
#endif  // !_MSC_VER

RequestRegisterGatewayServer::RequestRegisterGatewayServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegisterGatewayServer::InitAsDefaultInstance() {
}

RequestRegisterGatewayServer::RequestRegisterGatewayServer(const RequestRegisterGatewayServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegisterGatewayServer::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegisterGatewayServer::~RequestRegisterGatewayServer() {
  SharedDtor();
}

void RequestRegisterGatewayServer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RequestRegisterGatewayServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegisterGatewayServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegisterGatewayServer_descriptor_;
}

const RequestRegisterGatewayServer& RequestRegisterGatewayServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestRegisterGatewayServer* RequestRegisterGatewayServer::default_instance_ = NULL;

RequestRegisterGatewayServer* RequestRegisterGatewayServer::New() const {
  return new RequestRegisterGatewayServer;
}

void RequestRegisterGatewayServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegisterGatewayServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegisterGatewayServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegisterGatewayServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegisterGatewayServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegisterGatewayServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegisterGatewayServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegisterGatewayServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegisterGatewayServer::MergeFrom(const RequestRegisterGatewayServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegisterGatewayServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegisterGatewayServer::CopyFrom(const RequestRegisterGatewayServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegisterGatewayServer::IsInitialized() const {

  return true;
}

void RequestRegisterGatewayServer::Swap(RequestRegisterGatewayServer* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegisterGatewayServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegisterGatewayServer_descriptor_;
  metadata.reflection = RequestRegisterGatewayServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegisterGatewayServer::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseRegisterGatewayServer::ResponseRegisterGatewayServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegisterGatewayServer::InitAsDefaultInstance() {
}

ResponseRegisterGatewayServer::ResponseRegisterGatewayServer(const ResponseRegisterGatewayServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegisterGatewayServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegisterGatewayServer::~ResponseRegisterGatewayServer() {
  SharedDtor();
}

void ResponseRegisterGatewayServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRegisterGatewayServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegisterGatewayServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegisterGatewayServer_descriptor_;
}

const ResponseRegisterGatewayServer& ResponseRegisterGatewayServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseRegisterGatewayServer* ResponseRegisterGatewayServer::default_instance_ = NULL;

ResponseRegisterGatewayServer* ResponseRegisterGatewayServer::New() const {
  return new ResponseRegisterGatewayServer;
}

void ResponseRegisterGatewayServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegisterGatewayServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegisterGatewayServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegisterGatewayServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegisterGatewayServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegisterGatewayServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegisterGatewayServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegisterGatewayServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegisterGatewayServer::MergeFrom(const ResponseRegisterGatewayServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegisterGatewayServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegisterGatewayServer::CopyFrom(const ResponseRegisterGatewayServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegisterGatewayServer::IsInitialized() const {

  return true;
}

void ResponseRegisterGatewayServer::Swap(ResponseRegisterGatewayServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegisterGatewayServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegisterGatewayServer_descriptor_;
  metadata.reflection = ResponseRegisterGatewayServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegUserToGateway::kZoneidFieldNumber;
const int RequestRegUserToGateway::kGatewayidFieldNumber;
const int RequestRegUserToGateway::kAccountFieldNumber;
const int RequestRegUserToGateway::kKeyFieldNumber;
#endif  // !_MSC_VER

RequestRegUserToGateway::RequestRegUserToGateway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegUserToGateway::InitAsDefaultInstance() {
}

RequestRegUserToGateway::RequestRegUserToGateway(const RequestRegUserToGateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegUserToGateway::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  gatewayid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegUserToGateway::~RequestRegUserToGateway() {
  SharedDtor();
}

void RequestRegUserToGateway::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RequestRegUserToGateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegUserToGateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegUserToGateway_descriptor_;
}

const RequestRegUserToGateway& RequestRegUserToGateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

RequestRegUserToGateway* RequestRegUserToGateway::default_instance_ = NULL;

RequestRegUserToGateway* RequestRegUserToGateway::New() const {
  return new RequestRegUserToGateway;
}

void RequestRegUserToGateway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    gatewayid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegUserToGateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatewayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional string key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegUserToGateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegUserToGateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegUserToGateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegUserToGateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegUserToGateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegUserToGateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegUserToGateway::MergeFrom(const RequestRegUserToGateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegUserToGateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegUserToGateway::CopyFrom(const RequestRegUserToGateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegUserToGateway::IsInitialized() const {

  return true;
}

void RequestRegUserToGateway::Swap(RequestRegUserToGateway* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(account_, other->account_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegUserToGateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegUserToGateway_descriptor_;
  metadata.reflection = RequestRegUserToGateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegUserToGateway::kZoneidFieldNumber;
const int ResponseRegUserToGateway::kGatewayidFieldNumber;
const int ResponseRegUserToGateway::kAccountFieldNumber;
const int ResponseRegUserToGateway::kKeyFieldNumber;
const int ResponseRegUserToGateway::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseRegUserToGateway::ResponseRegUserToGateway()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegUserToGateway::InitAsDefaultInstance() {
}

ResponseRegUserToGateway::ResponseRegUserToGateway(const ResponseRegUserToGateway& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegUserToGateway::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  gatewayid_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegUserToGateway::~ResponseRegUserToGateway() {
  SharedDtor();
}

void ResponseRegUserToGateway::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ResponseRegUserToGateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegUserToGateway::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegUserToGateway_descriptor_;
}

const ResponseRegUserToGateway& ResponseRegUserToGateway::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

ResponseRegUserToGateway* ResponseRegUserToGateway::default_instance_ = NULL;

ResponseRegUserToGateway* ResponseRegUserToGateway::New() const {
  return new ResponseRegUserToGateway;
}

void ResponseRegUserToGateway::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    gatewayid_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegUserToGateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatewayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional string key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegUserToGateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegUserToGateway::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegUserToGateway::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegUserToGateway::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegUserToGateway* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegUserToGateway*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegUserToGateway::MergeFrom(const ResponseRegUserToGateway& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegUserToGateway::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegUserToGateway::CopyFrom(const ResponseRegUserToGateway& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegUserToGateway::IsInitialized() const {

  return true;
}

void ResponseRegUserToGateway::Swap(ResponseRegUserToGateway* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(account_, other->account_);
    std::swap(key_, other->key_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegUserToGateway::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegUserToGateway_descriptor_;
  metadata.reflection = ResponseRegUserToGateway_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUnregLoginUser::kAccountFieldNumber;
const int NotifyUnregLoginUser::kKeyFieldNumber;
#endif  // !_MSC_VER

NotifyUnregLoginUser::NotifyUnregLoginUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyUnregLoginUser::InitAsDefaultInstance() {
}

NotifyUnregLoginUser::NotifyUnregLoginUser(const NotifyUnregLoginUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUnregLoginUser::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUnregLoginUser::~NotifyUnregLoginUser() {
  SharedDtor();
}

void NotifyUnregLoginUser::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void NotifyUnregLoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUnregLoginUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUnregLoginUser_descriptor_;
}

const NotifyUnregLoginUser& NotifyUnregLoginUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

NotifyUnregLoginUser* NotifyUnregLoginUser::default_instance_ = NULL;

NotifyUnregLoginUser* NotifyUnregLoginUser::New() const {
  return new NotifyUnregLoginUser;
}

void NotifyUnregLoginUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUnregLoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUnregLoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyUnregLoginUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyUnregLoginUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUnregLoginUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUnregLoginUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUnregLoginUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUnregLoginUser::MergeFrom(const NotifyUnregLoginUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUnregLoginUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUnregLoginUser::CopyFrom(const NotifyUnregLoginUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUnregLoginUser::IsInitialized() const {

  return true;
}

void NotifyUnregLoginUser::Swap(NotifyUnregLoginUser* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUnregLoginUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUnregLoginUser_descriptor_;
  metadata.reflection = NotifyUnregLoginUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUnregGatewayUser::kAccountFieldNumber;
const int NotifyUnregGatewayUser::kKeyFieldNumber;
#endif  // !_MSC_VER

NotifyUnregGatewayUser::NotifyUnregGatewayUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyUnregGatewayUser::InitAsDefaultInstance() {
}

NotifyUnregGatewayUser::NotifyUnregGatewayUser(const NotifyUnregGatewayUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUnregGatewayUser::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUnregGatewayUser::~NotifyUnregGatewayUser() {
  SharedDtor();
}

void NotifyUnregGatewayUser::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void NotifyUnregGatewayUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUnregGatewayUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUnregGatewayUser_descriptor_;
}

const NotifyUnregGatewayUser& NotifyUnregGatewayUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

NotifyUnregGatewayUser* NotifyUnregGatewayUser::default_instance_ = NULL;

NotifyUnregGatewayUser* NotifyUnregGatewayUser::New() const {
  return new NotifyUnregGatewayUser;
}

void NotifyUnregGatewayUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUnregGatewayUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUnregGatewayUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyUnregGatewayUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyUnregGatewayUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUnregGatewayUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUnregGatewayUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUnregGatewayUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUnregGatewayUser::MergeFrom(const NotifyUnregGatewayUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUnregGatewayUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUnregGatewayUser::CopyFrom(const NotifyUnregGatewayUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUnregGatewayUser::IsInitialized() const {

  return true;
}

void NotifyUnregGatewayUser::Swap(NotifyUnregGatewayUser* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUnregGatewayUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUnregGatewayUser_descriptor_;
  metadata.reflection = NotifyUnregGatewayUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGatewayServerPing::kTimestampFieldNumber;
#endif  // !_MSC_VER

MsgGatewayServerPing::MsgGatewayServerPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGatewayServerPing::InitAsDefaultInstance() {
}

MsgGatewayServerPing::MsgGatewayServerPing(const MsgGatewayServerPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGatewayServerPing::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGatewayServerPing::~MsgGatewayServerPing() {
  SharedDtor();
}

void MsgGatewayServerPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGatewayServerPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGatewayServerPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGatewayServerPing_descriptor_;
}

const MsgGatewayServerPing& MsgGatewayServerPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrLogin_2eproto();
  return *default_instance_;
}

MsgGatewayServerPing* MsgGatewayServerPing::default_instance_ = NULL;

MsgGatewayServerPing* MsgGatewayServerPing::New() const {
  return new MsgGatewayServerPing;
}

void MsgGatewayServerPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGatewayServerPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGatewayServerPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGatewayServerPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGatewayServerPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGatewayServerPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGatewayServerPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGatewayServerPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGatewayServerPing::MergeFrom(const MsgGatewayServerPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGatewayServerPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGatewayServerPing::CopyFrom(const MsgGatewayServerPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGatewayServerPing::IsInitialized() const {

  return true;
}

void MsgGatewayServerPing::Swap(MsgGatewayServerPing* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGatewayServerPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGatewayServerPing_descriptor_;
  metadata.reflection = MsgGatewayServerPing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginCmd

// @@protoc_insertion_point(global_scope)
