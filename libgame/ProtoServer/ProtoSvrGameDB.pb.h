// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrGameDB.proto

#ifndef PROTOBUF_ProtoSvrGameDB_2eproto__INCLUDED
#define PROTOBUF_ProtoSvrGameDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ProtoSvrServerData.pb.h"
// @@protoc_insertion_point(includes)

namespace GameDBCmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoSvrGameDB_2eproto();
void protobuf_AssignDesc_ProtoSvrGameDB_2eproto();
void protobuf_ShutdownFile_ProtoSvrGameDB_2eproto();

class RequestGetCharList;
class ResponseGetCharList;

enum SvrGameDBOpCode {
  GAMEDB_OP_GET_CHARLIST = 1
};
bool SvrGameDBOpCode_IsValid(int value);
const SvrGameDBOpCode SvrGameDBOpCode_MIN = GAMEDB_OP_GET_CHARLIST;
const SvrGameDBOpCode SvrGameDBOpCode_MAX = GAMEDB_OP_GET_CHARLIST;
const int SvrGameDBOpCode_ARRAYSIZE = SvrGameDBOpCode_MAX + 1;

// ===================================================================

class RequestGetCharList : public ::google::protobuf::MessageLite {
 public:
  RequestGetCharList();
  virtual ~RequestGetCharList();

  RequestGetCharList(const RequestGetCharList& from);

  inline RequestGetCharList& operator=(const RequestGetCharList& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequestGetCharList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RequestGetCharList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RequestGetCharList* other);

  // implements Message ----------------------------------------------

  RequestGetCharList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RequestGetCharList& from);
  void MergeFrom(const RequestGetCharList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:GameDBCmd.RequestGetCharList)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGameDB_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGameDB_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGameDB_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGameDB_2eproto();

  void InitAsDefaultInstance();
  static RequestGetCharList* default_instance_;
};
// -------------------------------------------------------------------

class ResponseGetCharList : public ::google::protobuf::MessageLite {
 public:
  ResponseGetCharList();
  virtual ~ResponseGetCharList();

  ResponseGetCharList(const ResponseGetCharList& from);

  inline ResponseGetCharList& operator=(const ResponseGetCharList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResponseGetCharList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResponseGetCharList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResponseGetCharList* other);

  // implements Message ----------------------------------------------

  ResponseGetCharList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResponseGetCharList& from);
  void MergeFrom(const ResponseGetCharList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:GameDBCmd.ResponseGetCharList)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrGameDB_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrGameDB_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrGameDB_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrGameDB_2eproto();

  void InitAsDefaultInstance();
  static ResponseGetCharList* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestGetCharList

// optional string account = 1;
inline bool RequestGetCharList::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestGetCharList::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestGetCharList::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestGetCharList::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestGetCharList::account() const {
  return *account_;
}
inline void RequestGetCharList::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestGetCharList::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RequestGetCharList::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestGetCharList::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RequestGetCharList::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestGetCharList::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseGetCharList

// optional string account = 1;
inline bool ResponseGetCharList::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseGetCharList::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseGetCharList::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseGetCharList::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ResponseGetCharList::account() const {
  return *account_;
}
inline void ResponseGetCharList::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ResponseGetCharList::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ResponseGetCharList::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseGetCharList::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* ResponseGetCharList::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseGetCharList::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameDBCmd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoSvrGameDB_2eproto__INCLUDED
