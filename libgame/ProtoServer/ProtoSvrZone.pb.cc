// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrZone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoSvrZone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZoneCmd {

namespace {

const ::google::protobuf::Descriptor* MsgRegisterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRegisterServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserSelectZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserSelectZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordCharToLoginDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordCharToLoginDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKickGatewayUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKickGatewayUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnregZoneUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnregZoneUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrZoneOpCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoSvrZone_2eproto() {
  protobuf_AddDesc_ProtoSvrZone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoSvrZone.proto");
  GOOGLE_CHECK(file != NULL);
  MsgRegisterServer_descriptor_ = file->message_type(0);
  static const int MsgRegisterServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, result_),
  };
  MsgRegisterServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRegisterServer_descriptor_,
      MsgRegisterServer::default_instance_,
      MsgRegisterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRegisterServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRegisterServer));
  MsgGetServerInfo_descriptor_ = file->message_type(1);
  static const int MsgGetServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, server_list_),
  };
  MsgGetServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetServerInfo_descriptor_,
      MsgGetServerInfo::default_instance_,
      MsgGetServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetServerInfo));
  MsgUserSelectZone_descriptor_ = file->message_type(2);
  static const int MsgUserSelectZone_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, login_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, client_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, login_server_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, gateway_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, gateway_port_),
  };
  MsgUserSelectZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserSelectZone_descriptor_,
      MsgUserSelectZone::default_instance_,
      MsgUserSelectZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserSelectZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserSelectZone));
  MsgRecordCharToLoginDB_descriptor_ = file->message_type(3);
  static const int MsgRecordCharToLoginDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, char_info_),
  };
  MsgRecordCharToLoginDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordCharToLoginDB_descriptor_,
      MsgRecordCharToLoginDB::default_instance_,
      MsgRecordCharToLoginDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordCharToLoginDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordCharToLoginDB));
  NotifyUpdateServerInfo_descriptor_ = file->message_type(4);
  static const int NotifyUpdateServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateServerInfo, server_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateServerInfo, onlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateServerInfo, state_),
  };
  NotifyUpdateServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateServerInfo_descriptor_,
      NotifyUpdateServerInfo::default_instance_,
      NotifyUpdateServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateServerInfo));
  MsgKickGatewayUser_descriptor_ = file->message_type(5);
  static const int MsgKickGatewayUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickGatewayUser, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickGatewayUser, result_),
  };
  MsgKickGatewayUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKickGatewayUser_descriptor_,
      MsgKickGatewayUser::default_instance_,
      MsgKickGatewayUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickGatewayUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickGatewayUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKickGatewayUser));
  MsgUnregZoneUser_descriptor_ = file->message_type(6);
  static const int MsgUnregZoneUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnregZoneUser, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnregZoneUser, result_),
  };
  MsgUnregZoneUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnregZoneUser_descriptor_,
      MsgUnregZoneUser::default_instance_,
      MsgUnregZoneUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnregZoneUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnregZoneUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnregZoneUser));
  SvrZoneOpCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoSvrZone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRegisterServer_descriptor_, &MsgRegisterServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetServerInfo_descriptor_, &MsgGetServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserSelectZone_descriptor_, &MsgUserSelectZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordCharToLoginDB_descriptor_, &MsgRecordCharToLoginDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateServerInfo_descriptor_, &NotifyUpdateServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKickGatewayUser_descriptor_, &MsgKickGatewayUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnregZoneUser_descriptor_, &MsgUnregZoneUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoSvrZone_2eproto() {
  delete MsgRegisterServer::default_instance_;
  delete MsgRegisterServer_reflection_;
  delete MsgGetServerInfo::default_instance_;
  delete MsgGetServerInfo_reflection_;
  delete MsgUserSelectZone::default_instance_;
  delete MsgUserSelectZone_reflection_;
  delete MsgRecordCharToLoginDB::default_instance_;
  delete MsgRecordCharToLoginDB_reflection_;
  delete NotifyUpdateServerInfo::default_instance_;
  delete NotifyUpdateServerInfo_reflection_;
  delete MsgKickGatewayUser::default_instance_;
  delete MsgKickGatewayUser_reflection_;
  delete MsgUnregZoneUser::default_instance_;
  delete MsgUnregZoneUser_reflection_;
}

void protobuf_AddDesc_ProtoSvrZone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoSvrServerData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoSvrZone.proto\022\007ZoneCmd\032\030ProtoSvrS"
    "erverData.proto\">\n\021MsgRegisterServer\022\031\n\004"
    "info\030\001 \001(\0132\013.ServerInfo\022\016\n\006result\030\002 \001(\005\""
    "c\n\020MsgGetServerInfo\022\014\n\004type\030\001 \001(\r\022\017\n\004fla"
    "g\030\002 \001(\r:\0011\022\016\n\006result\030\003 \001(\005\022 \n\013server_lis"
    "t\030\004 \003(\0132\013.ServerInfo\"\242\001\n\021MsgUserSelectZo"
    "ne\022\017\n\007account\030\001 \001(\t\022\021\n\tlogin_key\030\002 \001(\r\022\025"
    "\n\rclient_taskid\030\003 \001(\r\022\030\n\020login_server_ui"
    "d\030\004 \001(\004\022\016\n\006result\030\005 \001(\005\022\022\n\ngateway_ip\030\006 "
    "\001(\r\022\024\n\014gateway_port\030\007 \001(\r\"=\n\026MsgRecordCh"
    "arToLoginDB\022#\n\tchar_info\030\001 \001(\0132\020.SvrZone"
    "CharInfo\"N\n\026NotifyUpdateServerInfo\022\022\n\nse"
    "rver_uid\030\001 \001(\004\022\021\n\tonlinenum\030\002 \001(\005\022\r\n\005sta"
    "te\030\003 \001(\005\"5\n\022MsgKickGatewayUser\022\017\n\007accoun"
    "t\030\001 \001(\t\022\016\n\006result\030\002 \001(\005\"3\n\020MsgUnregZoneU"
    "ser\022\017\n\007account\030\001 \001(\t\022\016\n\006result\030\002 \001(\005*\336\001\n"
    "\rSvrZoneOpCode\022\033\n\027ZONE_OP_REGISTER_SERVE"
    "R\020\001\022\033\n\027ZONE_OP_GET_SERVER_INFO\020\002\022\034\n\030ZONE"
    "_OP_USER_SELECT_ZONE\020\003\022\"\n\036ZONE_OP_RECORD"
    "_CHAR_TO_LOGINDB\020\004\022\036\n\032ZONE_OP_UPDATE_SER"
    "VER_INFO\020\005\022\025\n\021ZONE_OP_KICK_USER\020\006\022\032\n\026ZON"
    "E_OP_UNREG_ZONEUSER\020\007", 861);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoSvrZone.proto", &protobuf_RegisterTypes);
  MsgRegisterServer::default_instance_ = new MsgRegisterServer();
  MsgGetServerInfo::default_instance_ = new MsgGetServerInfo();
  MsgUserSelectZone::default_instance_ = new MsgUserSelectZone();
  MsgRecordCharToLoginDB::default_instance_ = new MsgRecordCharToLoginDB();
  NotifyUpdateServerInfo::default_instance_ = new NotifyUpdateServerInfo();
  MsgKickGatewayUser::default_instance_ = new MsgKickGatewayUser();
  MsgUnregZoneUser::default_instance_ = new MsgUnregZoneUser();
  MsgRegisterServer::default_instance_->InitAsDefaultInstance();
  MsgGetServerInfo::default_instance_->InitAsDefaultInstance();
  MsgUserSelectZone::default_instance_->InitAsDefaultInstance();
  MsgRecordCharToLoginDB::default_instance_->InitAsDefaultInstance();
  NotifyUpdateServerInfo::default_instance_->InitAsDefaultInstance();
  MsgKickGatewayUser::default_instance_->InitAsDefaultInstance();
  MsgUnregZoneUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoSvrZone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoSvrZone_2eproto {
  StaticDescriptorInitializer_ProtoSvrZone_2eproto() {
    protobuf_AddDesc_ProtoSvrZone_2eproto();
  }
} static_descriptor_initializer_ProtoSvrZone_2eproto_;
const ::google::protobuf::EnumDescriptor* SvrZoneOpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrZoneOpCode_descriptor_;
}
bool SvrZoneOpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRegisterServer::kInfoFieldNumber;
const int MsgRegisterServer::kResultFieldNumber;
#endif  // !_MSC_VER

MsgRegisterServer::MsgRegisterServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgRegisterServer::InitAsDefaultInstance() {
  info_ = const_cast< ::ServerInfo*>(&::ServerInfo::default_instance());
}

MsgRegisterServer::MsgRegisterServer(const MsgRegisterServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRegisterServer::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRegisterServer::~MsgRegisterServer() {
  SharedDtor();
}

void MsgRegisterServer::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgRegisterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRegisterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRegisterServer_descriptor_;
}

const MsgRegisterServer& MsgRegisterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgRegisterServer* MsgRegisterServer::default_instance_ = NULL;

MsgRegisterServer* MsgRegisterServer::New() const {
  return new MsgRegisterServer;
}

void MsgRegisterServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ServerInfo::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRegisterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRegisterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ServerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRegisterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ServerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRegisterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ServerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRegisterServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRegisterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRegisterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRegisterServer::MergeFrom(const MsgRegisterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ServerInfo::MergeFrom(from.info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRegisterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterServer::CopyFrom(const MsgRegisterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterServer::IsInitialized() const {

  return true;
}

void MsgRegisterServer::Swap(MsgRegisterServer* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRegisterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRegisterServer_descriptor_;
  metadata.reflection = MsgRegisterServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetServerInfo::kTypeFieldNumber;
const int MsgGetServerInfo::kFlagFieldNumber;
const int MsgGetServerInfo::kResultFieldNumber;
const int MsgGetServerInfo::kServerListFieldNumber;
#endif  // !_MSC_VER

MsgGetServerInfo::MsgGetServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGetServerInfo::InitAsDefaultInstance() {
}

MsgGetServerInfo::MsgGetServerInfo(const MsgGetServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGetServerInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  flag_ = 1u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetServerInfo::~MsgGetServerInfo() {
  SharedDtor();
}

void MsgGetServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGetServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetServerInfo_descriptor_;
}

const MsgGetServerInfo& MsgGetServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgGetServerInfo* MsgGetServerInfo::default_instance_ = NULL;

MsgGetServerInfo* MsgGetServerInfo::New() const {
  return new MsgGetServerInfo;
}

void MsgGetServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    flag_ = 1u;
    result_ = 0;
  }
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_list;
        break;
      }

      // repeated .ServerInfo server_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGetServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 flag = 2 [default = 1];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // repeated .ServerInfo server_list = 4;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGetServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 flag = 2 [default = 1];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // repeated .ServerInfo server_list = 4;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGetServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 flag = 2 [default = 1];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ServerInfo server_list = 4;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetServerInfo::MergeFrom(const MsgGetServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetServerInfo::CopyFrom(const MsgGetServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetServerInfo::IsInitialized() const {

  return true;
}

void MsgGetServerInfo::Swap(MsgGetServerInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(result_, other->result_);
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetServerInfo_descriptor_;
  metadata.reflection = MsgGetServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserSelectZone::kAccountFieldNumber;
const int MsgUserSelectZone::kLoginKeyFieldNumber;
const int MsgUserSelectZone::kClientTaskidFieldNumber;
const int MsgUserSelectZone::kLoginServerUidFieldNumber;
const int MsgUserSelectZone::kResultFieldNumber;
const int MsgUserSelectZone::kGatewayIpFieldNumber;
const int MsgUserSelectZone::kGatewayPortFieldNumber;
#endif  // !_MSC_VER

MsgUserSelectZone::MsgUserSelectZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUserSelectZone::InitAsDefaultInstance() {
}

MsgUserSelectZone::MsgUserSelectZone(const MsgUserSelectZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUserSelectZone::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = 0u;
  client_taskid_ = 0u;
  login_server_uid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  gateway_ip_ = 0u;
  gateway_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserSelectZone::~MsgUserSelectZone() {
  SharedDtor();
}

void MsgUserSelectZone::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgUserSelectZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserSelectZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserSelectZone_descriptor_;
}

const MsgUserSelectZone& MsgUserSelectZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgUserSelectZone* MsgUserSelectZone::default_instance_ = NULL;

MsgUserSelectZone* MsgUserSelectZone::New() const {
  return new MsgUserSelectZone;
}

void MsgUserSelectZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    login_key_ = 0u;
    client_taskid_ = 0u;
    login_server_uid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    gateway_ip_ = 0u;
    gateway_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserSelectZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_key;
        break;
      }

      // optional uint32 login_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_key_)));
          set_has_login_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_taskid;
        break;
      }

      // optional uint32 client_taskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_taskid_)));
          set_has_client_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_server_uid;
        break;
      }

      // optional uint64 login_server_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_server_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_server_uid_)));
          set_has_login_server_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gateway_ip;
        break;
      }

      // optional uint32 gateway_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_ip_)));
          set_has_gateway_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gateway_port;
        break;
      }

      // optional uint32 gateway_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateway_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_port_)));
          set_has_gateway_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUserSelectZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_key(), output);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_taskid(), output);
  }

  // optional uint64 login_server_uid = 4;
  if (has_login_server_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->login_server_uid(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional uint32 gateway_ip = 6;
  if (has_gateway_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gateway_ip(), output);
  }

  // optional uint32 gateway_port = 7;
  if (has_gateway_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gateway_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUserSelectZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 login_key = 2;
  if (has_login_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_key(), target);
  }

  // optional uint32 client_taskid = 3;
  if (has_client_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_taskid(), target);
  }

  // optional uint64 login_server_uid = 4;
  if (has_login_server_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->login_server_uid(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional uint32 gateway_ip = 6;
  if (has_gateway_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gateway_ip(), target);
  }

  // optional uint32 gateway_port = 7;
  if (has_gateway_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gateway_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUserSelectZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_key());
    }

    // optional uint32 client_taskid = 3;
    if (has_client_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_taskid());
    }

    // optional uint64 login_server_uid = 4;
    if (has_login_server_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_server_uid());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 gateway_ip = 6;
    if (has_gateway_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_ip());
    }

    // optional uint32 gateway_port = 7;
    if (has_gateway_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserSelectZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserSelectZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserSelectZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserSelectZone::MergeFrom(const MsgUserSelectZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_client_taskid()) {
      set_client_taskid(from.client_taskid());
    }
    if (from.has_login_server_uid()) {
      set_login_server_uid(from.login_server_uid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateway_ip()) {
      set_gateway_ip(from.gateway_ip());
    }
    if (from.has_gateway_port()) {
      set_gateway_port(from.gateway_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserSelectZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserSelectZone::CopyFrom(const MsgUserSelectZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserSelectZone::IsInitialized() const {

  return true;
}

void MsgUserSelectZone::Swap(MsgUserSelectZone* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(login_key_, other->login_key_);
    std::swap(client_taskid_, other->client_taskid_);
    std::swap(login_server_uid_, other->login_server_uid_);
    std::swap(result_, other->result_);
    std::swap(gateway_ip_, other->gateway_ip_);
    std::swap(gateway_port_, other->gateway_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserSelectZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserSelectZone_descriptor_;
  metadata.reflection = MsgUserSelectZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordCharToLoginDB::kCharInfoFieldNumber;
#endif  // !_MSC_VER

MsgRecordCharToLoginDB::MsgRecordCharToLoginDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgRecordCharToLoginDB::InitAsDefaultInstance() {
  char_info_ = const_cast< ::SvrZoneCharInfo*>(&::SvrZoneCharInfo::default_instance());
}

MsgRecordCharToLoginDB::MsgRecordCharToLoginDB(const MsgRecordCharToLoginDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRecordCharToLoginDB::SharedCtor() {
  _cached_size_ = 0;
  char_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordCharToLoginDB::~MsgRecordCharToLoginDB() {
  SharedDtor();
}

void MsgRecordCharToLoginDB::SharedDtor() {
  if (this != default_instance_) {
    delete char_info_;
  }
}

void MsgRecordCharToLoginDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordCharToLoginDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordCharToLoginDB_descriptor_;
}

const MsgRecordCharToLoginDB& MsgRecordCharToLoginDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgRecordCharToLoginDB* MsgRecordCharToLoginDB::default_instance_ = NULL;

MsgRecordCharToLoginDB* MsgRecordCharToLoginDB::New() const {
  return new MsgRecordCharToLoginDB;
}

void MsgRecordCharToLoginDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_char_info()) {
      if (char_info_ != NULL) char_info_->::SvrZoneCharInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordCharToLoginDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SvrZoneCharInfo char_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRecordCharToLoginDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SvrZoneCharInfo char_info = 1;
  if (has_char_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->char_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRecordCharToLoginDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SvrZoneCharInfo char_info = 1;
  if (has_char_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->char_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRecordCharToLoginDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SvrZoneCharInfo char_info = 1;
    if (has_char_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordCharToLoginDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordCharToLoginDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordCharToLoginDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordCharToLoginDB::MergeFrom(const MsgRecordCharToLoginDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_info()) {
      mutable_char_info()->::SvrZoneCharInfo::MergeFrom(from.char_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordCharToLoginDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordCharToLoginDB::CopyFrom(const MsgRecordCharToLoginDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordCharToLoginDB::IsInitialized() const {

  return true;
}

void MsgRecordCharToLoginDB::Swap(MsgRecordCharToLoginDB* other) {
  if (other != this) {
    std::swap(char_info_, other->char_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordCharToLoginDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordCharToLoginDB_descriptor_;
  metadata.reflection = MsgRecordCharToLoginDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateServerInfo::kServerUidFieldNumber;
const int NotifyUpdateServerInfo::kOnlinenumFieldNumber;
const int NotifyUpdateServerInfo::kStateFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateServerInfo::NotifyUpdateServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyUpdateServerInfo::InitAsDefaultInstance() {
}

NotifyUpdateServerInfo::NotifyUpdateServerInfo(const NotifyUpdateServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyUpdateServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_uid_ = GOOGLE_ULONGLONG(0);
  onlinenum_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateServerInfo::~NotifyUpdateServerInfo() {
  SharedDtor();
}

void NotifyUpdateServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUpdateServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateServerInfo_descriptor_;
}

const NotifyUpdateServerInfo& NotifyUpdateServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

NotifyUpdateServerInfo* NotifyUpdateServerInfo::default_instance_ = NULL;

NotifyUpdateServerInfo* NotifyUpdateServerInfo::New() const {
  return new NotifyUpdateServerInfo;
}

void NotifyUpdateServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_uid_ = GOOGLE_ULONGLONG(0);
    onlinenum_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 server_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_uid_)));
          set_has_server_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlinenum;
        break;
      }

      // optional int32 onlinenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyUpdateServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 server_uid = 1;
  if (has_server_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_uid(), output);
  }

  // optional int32 onlinenum = 2;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlinenum(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyUpdateServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 server_uid = 1;
  if (has_server_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_uid(), target);
  }

  // optional int32 onlinenum = 2;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlinenum(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyUpdateServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 server_uid = 1;
    if (has_server_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_uid());
    }

    // optional int32 onlinenum = 2;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinenum());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateServerInfo::MergeFrom(const NotifyUpdateServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_uid()) {
      set_server_uid(from.server_uid());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateServerInfo::CopyFrom(const NotifyUpdateServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateServerInfo::IsInitialized() const {

  return true;
}

void NotifyUpdateServerInfo::Swap(NotifyUpdateServerInfo* other) {
  if (other != this) {
    std::swap(server_uid_, other->server_uid_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateServerInfo_descriptor_;
  metadata.reflection = NotifyUpdateServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKickGatewayUser::kAccountFieldNumber;
const int MsgKickGatewayUser::kResultFieldNumber;
#endif  // !_MSC_VER

MsgKickGatewayUser::MsgKickGatewayUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgKickGatewayUser::InitAsDefaultInstance() {
}

MsgKickGatewayUser::MsgKickGatewayUser(const MsgKickGatewayUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgKickGatewayUser::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKickGatewayUser::~MsgKickGatewayUser() {
  SharedDtor();
}

void MsgKickGatewayUser::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgKickGatewayUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgKickGatewayUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKickGatewayUser_descriptor_;
}

const MsgKickGatewayUser& MsgKickGatewayUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgKickGatewayUser* MsgKickGatewayUser::default_instance_ = NULL;

MsgKickGatewayUser* MsgKickGatewayUser::New() const {
  return new MsgKickGatewayUser;
}

void MsgKickGatewayUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKickGatewayUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKickGatewayUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKickGatewayUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKickGatewayUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKickGatewayUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKickGatewayUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKickGatewayUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKickGatewayUser::MergeFrom(const MsgKickGatewayUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKickGatewayUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKickGatewayUser::CopyFrom(const MsgKickGatewayUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKickGatewayUser::IsInitialized() const {

  return true;
}

void MsgKickGatewayUser::Swap(MsgKickGatewayUser* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKickGatewayUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKickGatewayUser_descriptor_;
  metadata.reflection = MsgKickGatewayUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnregZoneUser::kAccountFieldNumber;
const int MsgUnregZoneUser::kResultFieldNumber;
#endif  // !_MSC_VER

MsgUnregZoneUser::MsgUnregZoneUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUnregZoneUser::InitAsDefaultInstance() {
}

MsgUnregZoneUser::MsgUnregZoneUser(const MsgUnregZoneUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnregZoneUser::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnregZoneUser::~MsgUnregZoneUser() {
  SharedDtor();
}

void MsgUnregZoneUser::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void MsgUnregZoneUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUnregZoneUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnregZoneUser_descriptor_;
}

const MsgUnregZoneUser& MsgUnregZoneUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoSvrZone_2eproto();
  return *default_instance_;
}

MsgUnregZoneUser* MsgUnregZoneUser::default_instance_ = NULL;

MsgUnregZoneUser* MsgUnregZoneUser::New() const {
  return new MsgUnregZoneUser;
}

void MsgUnregZoneUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnregZoneUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnregZoneUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnregZoneUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnregZoneUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUnregZoneUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnregZoneUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnregZoneUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnregZoneUser::MergeFrom(const MsgUnregZoneUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnregZoneUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnregZoneUser::CopyFrom(const MsgUnregZoneUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnregZoneUser::IsInitialized() const {

  return true;
}

void MsgUnregZoneUser::Swap(MsgUnregZoneUser* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnregZoneUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnregZoneUser_descriptor_;
  metadata.reflection = MsgUnregZoneUser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZoneCmd

// @@protoc_insertion_point(global_scope)
