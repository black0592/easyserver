// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoSvrServerData.proto

#ifndef PROTOBUF_ProtoSvrServerData_2eproto__INCLUDED
#define PROTOBUF_ProtoSvrServerData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoSvrServerData_2eproto();
void protobuf_AssignDesc_ProtoSvrServerData_2eproto();
void protobuf_ShutdownFile_ProtoSvrServerData_2eproto();

class ServerInfo;
class SvrZoneCharInfo;

// ===================================================================

class ServerInfo : public ::google::protobuf::MessageLite {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServerInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uniqueid = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 1;
  inline ::google::protobuf::uint64 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint64 value);

  // optional int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline ::google::protobuf::int32 ip() const;
  inline void set_ip(::google::protobuf::int32 value);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 onlinenum = 7;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlinenumFieldNumber = 7;
  inline ::google::protobuf::int32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::int32 value);

  // optional int32 maxnum = 8;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxnumFieldNumber = 8;
  inline ::google::protobuf::int32 maxnum() const;
  inline void set_maxnum(::google::protobuf::int32 value);

  // optional int32 group = 9;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 9;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 flag = 11;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 11;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 ip_str = 20;
  inline bool has_ip_str() const;
  inline void clear_ip_str();
  static const int kIpStrFieldNumber = 20;
  inline ::google::protobuf::int32 ip_str() const;
  inline void set_ip_str(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerInfo)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_ip_str();
  inline void clear_has_ip_str();

  ::google::protobuf::uint64 uniqueid_;
  ::std::string* name_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 onlinenum_;
  ::google::protobuf::int32 maxnum_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 ip_str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrServerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrServerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrServerData_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrServerData_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SvrZoneCharInfo : public ::google::protobuf::MessageLite {
 public:
  SvrZoneCharInfo();
  virtual ~SvrZoneCharInfo();

  SvrZoneCharInfo(const SvrZoneCharInfo& from);

  inline SvrZoneCharInfo& operator=(const SvrZoneCharInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SvrZoneCharInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SvrZoneCharInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SvrZoneCharInfo* other);

  // implements Message ----------------------------------------------

  SvrZoneCharInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SvrZoneCharInfo& from);
  void MergeFrom(const SvrZoneCharInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string charname = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 charlevel = 4;
  inline bool has_charlevel() const;
  inline void clear_charlevel();
  static const int kCharlevelFieldNumber = 4;
  inline ::google::protobuf::int32 charlevel() const;
  inline void set_charlevel(::google::protobuf::int32 value);

  // optional int32 charrace = 5;
  inline bool has_charrace() const;
  inline void clear_charrace();
  static const int kCharraceFieldNumber = 5;
  inline ::google::protobuf::int32 charrace() const;
  inline void set_charrace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrZoneCharInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_charlevel();
  inline void clear_has_charlevel();
  inline void set_has_charrace();
  inline void clear_has_charrace();

  ::std::string* account_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 charlevel_;
  ::std::string* charname_;
  ::google::protobuf::int32 charrace_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ProtoSvrServerData_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ProtoSvrServerData_2eproto();
  #endif
  friend void protobuf_AssignDesc_ProtoSvrServerData_2eproto();
  friend void protobuf_ShutdownFile_ProtoSvrServerData_2eproto();

  void InitAsDefaultInstance();
  static SvrZoneCharInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerInfo

// optional uint64 uniqueid = 1;
inline bool ServerInfo::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_uniqueid() {
  uniqueid_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqueid();
}
inline ::google::protobuf::uint64 ServerInfo::uniqueid() const {
  return uniqueid_;
}
inline void ServerInfo::set_uniqueid(::google::protobuf::uint64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// optional int32 serverid = 2;
inline bool ServerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ServerInfo::serverid() const {
  return serverid_;
}
inline void ServerInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string name = 3;
inline bool ServerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerInfo::name() const {
  return *name_;
}
inline void ServerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ServerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 4;
inline bool ServerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ServerInfo::type() const {
  return type_;
}
inline void ServerInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 ip = 5;
inline bool ServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
inline ::google::protobuf::int32 ServerInfo::ip() const {
  return ip_;
}
inline void ServerInfo::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
}

// optional int32 port = 6;
inline bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerInfo::port() const {
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 onlinenum = 7;
inline bool ServerInfo::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerInfo::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerInfo::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerInfo::clear_onlinenum() {
  onlinenum_ = 0;
  clear_has_onlinenum();
}
inline ::google::protobuf::int32 ServerInfo::onlinenum() const {
  return onlinenum_;
}
inline void ServerInfo::set_onlinenum(::google::protobuf::int32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
}

// optional int32 maxnum = 8;
inline bool ServerInfo::has_maxnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerInfo::set_has_maxnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerInfo::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerInfo::clear_maxnum() {
  maxnum_ = 0;
  clear_has_maxnum();
}
inline ::google::protobuf::int32 ServerInfo::maxnum() const {
  return maxnum_;
}
inline void ServerInfo::set_maxnum(::google::protobuf::int32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional int32 group = 9;
inline bool ServerInfo::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerInfo::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerInfo::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 ServerInfo::group() const {
  return group_;
}
inline void ServerInfo::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 state = 10;
inline bool ServerInfo::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerInfo::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ServerInfo::state() const {
  return state_;
}
inline void ServerInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 flag = 11;
inline bool ServerInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ServerInfo::flag() const {
  return flag_;
}
inline void ServerInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 ip_str = 20;
inline bool ServerInfo::has_ip_str() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerInfo::set_has_ip_str() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerInfo::clear_has_ip_str() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerInfo::clear_ip_str() {
  ip_str_ = 0;
  clear_has_ip_str();
}
inline ::google::protobuf::int32 ServerInfo::ip_str() const {
  return ip_str_;
}
inline void ServerInfo::set_ip_str(::google::protobuf::int32 value) {
  set_has_ip_str();
  ip_str_ = value;
}

// -------------------------------------------------------------------

// SvrZoneCharInfo

// optional int32 zoneid = 1;
inline bool SvrZoneCharInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrZoneCharInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrZoneCharInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrZoneCharInfo::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 SvrZoneCharInfo::zoneid() const {
  return zoneid_;
}
inline void SvrZoneCharInfo::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional string account = 2;
inline bool SvrZoneCharInfo::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrZoneCharInfo::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrZoneCharInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrZoneCharInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SvrZoneCharInfo::account() const {
  return *account_;
}
inline void SvrZoneCharInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SvrZoneCharInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SvrZoneCharInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrZoneCharInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* SvrZoneCharInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrZoneCharInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string charname = 3;
inline bool SvrZoneCharInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrZoneCharInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrZoneCharInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrZoneCharInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& SvrZoneCharInfo::charname() const {
  return *charname_;
}
inline void SvrZoneCharInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SvrZoneCharInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SvrZoneCharInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrZoneCharInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* SvrZoneCharInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrZoneCharInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 charlevel = 4;
inline bool SvrZoneCharInfo::has_charlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvrZoneCharInfo::set_has_charlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvrZoneCharInfo::clear_has_charlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvrZoneCharInfo::clear_charlevel() {
  charlevel_ = 0;
  clear_has_charlevel();
}
inline ::google::protobuf::int32 SvrZoneCharInfo::charlevel() const {
  return charlevel_;
}
inline void SvrZoneCharInfo::set_charlevel(::google::protobuf::int32 value) {
  set_has_charlevel();
  charlevel_ = value;
}

// optional int32 charrace = 5;
inline bool SvrZoneCharInfo::has_charrace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SvrZoneCharInfo::set_has_charrace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SvrZoneCharInfo::clear_has_charrace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SvrZoneCharInfo::clear_charrace() {
  charrace_ = 0;
  clear_has_charrace();
}
inline ::google::protobuf::int32 SvrZoneCharInfo::charrace() const {
  return charrace_;
}
inline void SvrZoneCharInfo::set_charrace(::google::protobuf::int32 value) {
  set_has_charrace();
  charrace_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoSvrServerData_2eproto__INCLUDED
